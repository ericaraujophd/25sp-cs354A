{
  "hash": "50423271c6d0c5eef613651ab55483d0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Week 02: Union, Union All, Intersect, Except\"\nsubtitle: \"SLO 04\"\ndate: 2023-09-18\nauthor: \"Eric Araujo\"\nformat:\n  html:\n    code-fold: false\njupyter: python3\n---\n\n## üîÅ Set Operators in SQL\n\n| Operator     | Description                                                     | Duplicates | Order Requirement           | Supported in SQLite |\n|--------------|-----------------------------------------------------------------|------------|------------------------------|----------------------|\n| UNION        | Combines results from two queries, removing duplicates          | No         | Yes (same number and types) | Yes                  |\n| UNION ALL    | Combines results from two queries, keeping duplicates           | Yes        | Yes                          | Yes                  |\n| INTERSECT    | Returns rows common to both queries                             | No         | Yes                          | Yes                  |\n| EXCEPT       | Returns rows from the first query that are not in the second    | No         | Yes                          | Yes                  |\n\n### ‚ÅâÔ∏è FAQ\n\n**Q1: What is the difference between `UNION` and `UNION ALL`?**\n\n- `UNION` combines results from two queries and removes duplicates.\n- `UNION ALL` combines results from two queries and keeps duplicates.\n\n**Q2: What does the `INTERSECT` operator do?**\n\n- The `INTERSECT` operator returns rows that are common to both queries.\n\n**Q3: What does the `EXCEPT` operator do?**\n\n- The `EXCEPT` operator returns rows from the first query that are not present in the second query.\n\n**Q4: Do all set operators require the same number of columns and data types in the queries?**\n\n- Yes, all set operators require the same number of columns and compatible data types in the queries.\n\n**Q5: Are set operators supported in SQLite?**\n\n- Yes, all set operators are supported in SQLite.\n\n**Q6: Do set operators remove duplicates by default?**\n\n- Yes, `UNION` and `INTERSECT` remove duplicates by default, while `UNION ALL` keeps duplicates.\n\n**Q7: Can you use set operators with different data types?**\n\n- No, set operators require compatible data types in the queries.\n\n**Q8: Do set operators require the same order of columns in the queries?**\n\n- Yes, set operators require the same order of columns in the queries.\n\n**Q9: Can you use set operators with subqueries?**\n\n- Yes, you can use set operators with subqueries as long as the subqueries return compatible data types and the same number of columns.\n\n**Q10: What happens if the queries in a set operator have different numbers of columns?**\n\n- If the queries in a set operator have different numbers of columns, an error will occur.\n\n**Q11: Can you use set operators with different table names?**\n\n- Yes, you can use set operators with different table names as long as the queries return compatible data types and the same number of columns.\n\n**Q12: Can you use set operators with different column names?**\n\n- Yes, you can use set operators with different column names as long as the queries return compatible data types and the same number of columns.\n\n**Q13: Can you use set operators with different data sources?**\n\n- Yes, you can use set operators with different data sources as long as the queries return compatible data types and the same number of columns.\n\n## üë©üèΩ‚Äçüíª Queries References\n\n```sql\n-- Example of UNION\nSELECT column1, column2 FROM table1\nUNION\nSELECT column1, column2 FROM table2;\n-- Example of UNION ALL\nSELECT column1, column2 FROM table1\nUNION ALL\nSELECT column1, column2 FROM table2;\n-- Example of INTERSECT\nSELECT column1, column2 FROM table1\nINTERSECT\nSELECT column1, column2 FROM table2;\n-- Example of EXCEPT\nSELECT column1, column2 FROM table1\nEXCEPT\nSELECT column1, column2 FROM table2;\n```\n\n## ‚öΩ Scenario: Premier League vs Champions League\n\nWe‚Äôll create two tables:\n\n* **premier_league_teams**: current Premier League teams.\n* **champions_league_teams**: clubs currently in the UEFA Champions League.\n\nSome Premier League teams also play in the Champions League, but not all Champions League teams are English.\n\n## üß± Table Definitions and Sample Data\n\n::: {#cell-6 .cell execution_count=1}\n``` {.python .cell-code}\n%%capture\n%load_ext sql\n%sql sqlite:///dbs/w02/slo2.4-union.db\n%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n```\n:::\n\n\n::: {#cell-7 .cell execution_count=2}\n``` {.python .cell-code}\n%%sql\n\nDROP TABLE IF EXISTS premier_league_teams;\nDROP TABLE IF EXISTS champions_league_teams;\n\nCREATE TABLE premier_league_teams (\n    team_name TEXT,\n    jersey_color TEXT,\n    founded_year INTEGER,\n    city TEXT\n);\n\nCREATE TABLE champions_league_teams (\n    team_name TEXT,\n    jersey_color TEXT,\n    founded_year INTEGER,\n    city TEXT\n);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/slo2.4-union.db\nDone.\nDone.\nDone.\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n[]\n```\n:::\n:::\n\n\n## ‚öΩ Sample Inserts\n\n::: {#cell-9 .cell execution_count=3}\n``` {.python .cell-code}\n%%sql\nINSERT INTO premier_league_teams VALUES\n('Manchester City', 'Sky Blue', 1880, 'Manchester'),\n('Arsenal', 'Red and White', 1886, 'London'),\n('Liverpool', 'Red', 1892, 'Liverpool'),\n('Chelsea', 'Blue', 1905, 'London'),\n('Manchester United', 'Red', 1878, 'Manchester'),\n('Tottenham', 'White and Navy', 1882, 'London');\n\nINSERT INTO champions_league_teams VALUES\n('Real Madrid', 'White', 1902, 'Madrid'),\n('Barcelona', 'Blue and Red', 1899, 'Barcelona'),\n('Manchester City', 'Sky Blue', 1880, 'Manchester'),\n('Bayern Munich', 'Red and White', 1900, 'Munich'),\n('Paris Saint-Germain', 'Blue and Red', 1970, 'Paris'),\n('Arsenal', 'Red and White', 1886, 'London'),\n('Inter Milan', 'Blue and Black', 1908, 'Milan'),\n('Liverpool', 'Red', 1892, 'Liverpool'),\n('Liverpool', 'Red', 1892, 'Liverpool'); -- duplicate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/slo2.4-union.db\n6 rows affected.\n9 rows affected.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n[]\n```\n:::\n:::\n\n\n### üîç Updated Query Examples with All Columns\n\n**1. UNION: All distinct teams with full details**\n\n```sql\nSELECT * FROM premier_league_teams\nUNION\nSELECT * FROM champions_league_teams;\n```\n\n::: {#cell-11 .cell execution_count=4}\n``` {.python .cell-code}\n%%sql\nSELECT * FROM premier_league_teams\nUNION\nSELECT * FROM champions_league_teams;\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/slo2.4-union.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>team_name</th>\n            <th>jersey_color</th>\n            <th>founded_year</th>\n            <th>city</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Arsenal</td>\n            <td>Red and White</td>\n            <td>1886</td>\n            <td>London</td>\n        </tr>\n        <tr>\n            <td>Barcelona</td>\n            <td>Blue and Red</td>\n            <td>1899</td>\n            <td>Barcelona</td>\n        </tr>\n        <tr>\n            <td>Bayern Munich</td>\n            <td>Red and White</td>\n            <td>1900</td>\n            <td>Munich</td>\n        </tr>\n        <tr>\n            <td>Chelsea</td>\n            <td>Blue</td>\n            <td>1905</td>\n            <td>London</td>\n        </tr>\n        <tr>\n            <td>Inter Milan</td>\n            <td>Blue and Black</td>\n            <td>1908</td>\n            <td>Milan</td>\n        </tr>\n        <tr>\n            <td>Liverpool</td>\n            <td>Red</td>\n            <td>1892</td>\n            <td>Liverpool</td>\n        </tr>\n        <tr>\n            <td>Manchester City</td>\n            <td>Sky Blue</td>\n            <td>1880</td>\n            <td>Manchester</td>\n        </tr>\n        <tr>\n            <td>Manchester United</td>\n            <td>Red</td>\n            <td>1878</td>\n            <td>Manchester</td>\n        </tr>\n        <tr>\n            <td>Paris Saint-Germain</td>\n            <td>Blue and Red</td>\n            <td>1970</td>\n            <td>Paris</td>\n        </tr>\n        <tr>\n            <td>Real Madrid</td>\n            <td>White</td>\n            <td>1902</td>\n            <td>Madrid</td>\n        </tr>\n        <tr>\n            <td>Tottenham</td>\n            <td>White and Navy</td>\n            <td>1882</td>\n            <td>London</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n**2. INTERSECT: Full details of teams in both leagues**\n\n```sql\nSELECT * FROM premier_league_teams\nINTERSECT\nSELECT * FROM champions_league_teams;\n```\n\n::: {#cell-13 .cell execution_count=5}\n``` {.python .cell-code}\n%%sql\nSELECT * FROM premier_league_teams\nINTERSECT\nSELECT * FROM champions_league_teams;\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/slo2.4-union.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>team_name</th>\n            <th>jersey_color</th>\n            <th>founded_year</th>\n            <th>city</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Arsenal</td>\n            <td>Red and White</td>\n            <td>1886</td>\n            <td>London</td>\n        </tr>\n        <tr>\n            <td>Liverpool</td>\n            <td>Red</td>\n            <td>1892</td>\n            <td>Liverpool</td>\n        </tr>\n        <tr>\n            <td>Manchester City</td>\n            <td>Sky Blue</td>\n            <td>1880</td>\n            <td>Manchester</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n**3. EXCEPT: PL teams not in the CL (full detail)**\n\n```sql\nSELECT * FROM premier_league_teams\nEXCEPT\nSELECT * FROM champions_league_teams;\n```\n\n::: {#cell-15 .cell execution_count=6}\n``` {.python .cell-code}\n%%sql\nSELECT * FROM premier_league_teams\nEXCEPT\nSELECT * FROM champions_league_teams;\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/slo2.4-union.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>team_name</th>\n            <th>jersey_color</th>\n            <th>founded_year</th>\n            <th>city</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Chelsea</td>\n            <td>Blue</td>\n            <td>1905</td>\n            <td>London</td>\n        </tr>\n        <tr>\n            <td>Manchester United</td>\n            <td>Red</td>\n            <td>1878</td>\n            <td>Manchester</td>\n        </tr>\n        <tr>\n            <td>Tottenham</td>\n            <td>White and Navy</td>\n            <td>1882</td>\n            <td>London</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n#### Some things for you to try out:\n\n* Query for oldest teams only in PL using EXCEPT and ORDER BY founded_year\n* Group teams by city and count how many come from each city (with GROUP BY)\n* Match color styles (e.g., WHERE jersey_color LIKE '%Red%')\n* Join both tables on team_name to compare differences (e.g., color changes)\n\n\n",
    "supporting": [
      "week02-04-union_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}