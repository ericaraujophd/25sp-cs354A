{
  "hash": "58ecee1cb3262a5569685b09cdd14eb4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Week 02: SQL ‚Äì Dates and Times\"\nauthor: \"Eric Araujo\"\nformat:\n  html:\n    code-fold: false\njupyter: python3\n---\n\nIn **SQLite**, date and time operations are handled using a set of built-in functions that work with text values in **ISO-8601** format: 'YYYY-MM-DD HH:MM:SS'. These functions can parse, manipulate, and format date/time values.\n\nHere‚Äôs a breakdown of how **date and time functions** and operators work in SQLite:\n\n## üïí Common Date & Time Functions\n\n### 1. DATE(timestring, modifier1, modifier2, ...)\n\nReturns the **date** (no time part).\n\n```sql\nSELECT DATE('now'); -- Current date (UTC)\nSELECT DATE('now', 'localtime'); -- Current date (local time)\nSELECT DATE('2025-03-30', '+1 day'); -- Adds 1 day\nSELECT DATE('2025-03-30', '-1 month'); -- Subtracts 1 month\n```\n\n### 2. TIME(timestring, modifier1, modifier2, ...)\n\nReturns the **time** (no date part).\n\n```sql\nSELECT TIME('now'); -- Current time (UTC)\nSELECT TIME('now', 'localtime'); -- Current time (local)\n```\n\n### 3. DATETIME(timestring, modifier1, modifier2, ...)\n\nReturns both **date** and **time**.\n\n```sql\nSELECT DATETIME('now'); -- Current date and time (UTC)\nSELECT DATETIME('now', '+1 hour'); -- Adds one hour\n```\n\n### 4. JULIANDAY(timestring, modifier1, ...)\n\nReturns the **Julian** day number, which is a floating point value representing days since noon in Greenwich on November 24, 4714 B.C.\n\n```sql\nSELECT JULIANDAY('2025-03-30');\n```\n\n### 5. STRFTIME(format, timestring, modifier1, ...)\n\nReturns a formatted string using format codes.\n\n```sql\nSELECT STRFTIME('%Y-%m-%d', 'now'); -- \"2025-03-30\"\nSELECT STRFTIME('%H:%M:%S', 'now'); -- Time part\nSELECT STRFTIME('%Y', 'now');       -- Year only\n```\n\nüß© Common format codes:\n\n* %Y = year (e.g. 2025)\n* %m = month (01‚Äì12)\n* %d = day (01‚Äì31)\n* %H = hour (00‚Äì23)\n* %M = minute (00‚Äì59)\n* %S = seconds (00‚Äì59)\n\n### üõ†Ô∏è Useful Modifiers\n\nYou can use one or more modifiers to shift the date/time:\n\n| Modifier               | Effect                              |\n|------------------------|--------------------------------------|\n| `'localtime'`          | Converts to local time               |\n| `'utc'`                | Converts to UTC                      |\n| `'+NNN days'`          | Adds NNN days                        |\n| `'-NNN months'`        | Subtracts NNN months                 |\n| `'start of month'`     | Sets date to the 1st of the month    |\n| `'weekday N'`          | Moves to next weekday (0=Sun...6=Sat)|\n| `'start of year'`      | Sets date to January 1st             |\n\n```sql\nSELECT DATE('now', 'start of month', '+1 month', '-1 day');\n-- Last day of current month\n```\n\n## üîç Examples\n\n```sql\n-- Age from birthday\nSELECT (JULIANDAY('now') - JULIANDAY('1990-05-15')) / 365 AS age;\n\n-- Timestamp 7 days from now\nSELECT DATETIME('now', '+7 days');\n\n-- Current time, formatted\nSELECT STRFTIME('%d-%m-%Y %H:%M', 'now', 'localtime');\n```\n\n## üîó Tip: Date/time values in SQLite are stored as TEXT\n\nSQLite doesn‚Äôt have a dedicated DATE or TIME type. Store your datetime values as ISO strings (YYYY-MM-DD HH:MM:SS) for full compatibility with these functions.\n\n## üì¶ Example Database: appointments\n\nüß± Table: appointments\n\n::: {#cell-10 .cell execution_count=1}\n``` {.python .cell-code}\n%%capture\n%load_ext sql\n%sql sqlite:///dbs/w02/appointments.db\n%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n```\n:::\n\n\n::: {#cell-11 .cell execution_count=2}\n``` {.python .cell-code}\n%%sql\n\nDROP TABLE IF EXISTS appointments;\n\nCREATE TABLE appointments (\n    id INTEGER PRIMARY KEY,\n    title TEXT NOT NULL,\n    client_name TEXT NOT NULL,\n    scheduled_at TEXT NOT NULL  -- Stored in 'YYYY-MM-DD HH:MM:SS' format\n);\n\n-- Sample data\nINSERT INTO appointments (title, client_name, scheduled_at) VALUES\n('Consultation', 'Alice', '2025-03-30 10:00:00'),\n('Follow-up', 'Bob', '2025-03-31 14:30:00'),\n('Strategy Meeting', 'Charlie', '2025-04-01 09:00:00'),\n('Project Review', 'Diana', '2025-04-01 16:45:00'),\n('Feedback Session', 'Eve', '2025-04-02 11:15:00');\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/appointments.db\nDone.\nDone.\n5 rows affected.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n[]\n```\n:::\n:::\n\n\n### üß™ Example Queries Using Date/Time Functions\n\n#### ‚úÖ 1. Get all appointments today (UTC)\n\n::: {#cell-13 .cell execution_count=3}\n``` {.python .cell-code}\n%%sql\nSELECT * \nFROM appointments \nWHERE DATE(scheduled_at) = DATE('now');\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/appointments.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>id</th>\n            <th>title</th>\n            <th>client_name</th>\n            <th>scheduled_at</th>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n---\n\n‚úÖ 2. Get all appointments in the next 3 days\n\n::: {#cell-15 .cell execution_count=4}\n``` {.python .cell-code}\n%%sql\nSELECT * \nFROM appointments \nWHERE DATE(scheduled_at) BETWEEN DATE('now') AND DATE('now', '+3 days');\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/appointments.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>id</th>\n            <th>title</th>\n            <th>client_name</th>\n            <th>scheduled_at</th>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n---\n\n‚úÖ 3. Show appointments with day of the week\n\n::: {#cell-17 .cell execution_count=5}\n``` {.python .cell-code}\n%%sql\nSELECT \n    id,\n    title,\n    client_name,\n    scheduled_at,\n    STRFTIME('%w', scheduled_at) AS weekday_num,\n    CASE STRFTIME('%w', scheduled_at)\n        WHEN '0' THEN 'Sunday'\n        WHEN '1' THEN 'Monday'\n        WHEN '2' THEN 'Tuesday'\n        WHEN '3' THEN 'Wednesday'\n        WHEN '4' THEN 'Thursday'\n        WHEN '5' THEN 'Friday'\n        WHEN '6' THEN 'Saturday'\n    END AS weekday\nFROM appointments;\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/appointments.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>id</th>\n            <th>title</th>\n            <th>client_name</th>\n            <th>scheduled_at</th>\n            <th>weekday_num</th>\n            <th>weekday</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>Consultation</td>\n            <td>Alice</td>\n            <td>2025-03-30 10:00:00</td>\n            <td>0</td>\n            <td>Sunday</td>\n        </tr>\n        <tr>\n            <td>2</td>\n            <td>Follow-up</td>\n            <td>Bob</td>\n            <td>2025-03-31 14:30:00</td>\n            <td>1</td>\n            <td>Monday</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td>Strategy Meeting</td>\n            <td>Charlie</td>\n            <td>2025-04-01 09:00:00</td>\n            <td>2</td>\n            <td>Tuesday</td>\n        </tr>\n        <tr>\n            <td>4</td>\n            <td>Project Review</td>\n            <td>Diana</td>\n            <td>2025-04-01 16:45:00</td>\n            <td>2</td>\n            <td>Tuesday</td>\n        </tr>\n        <tr>\n            <td>5</td>\n            <td>Feedback Session</td>\n            <td>Eve</td>\n            <td>2025-04-02 11:15:00</td>\n            <td>3</td>\n            <td>Wednesday</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n---\n\n‚úÖ 4. Count how many appointments per day\n\n::: {#cell-19 .cell execution_count=6}\n``` {.python .cell-code}\n%%sql\nSELECT \n    DATE(scheduled_at) AS date,\n    COUNT(*) AS total_appointments\nFROM appointments\nGROUP BY DATE(scheduled_at);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/appointments.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>date</th>\n            <th>total_appointments</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>2025-03-30</td>\n            <td>1</td>\n        </tr>\n        <tr>\n            <td>2025-03-31</td>\n            <td>1</td>\n        </tr>\n        <tr>\n            <td>2025-04-01</td>\n            <td>2</td>\n        </tr>\n        <tr>\n            <td>2025-04-02</td>\n            <td>1</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n---\n\n‚úÖ 5. Check if any appointment is scheduled on a weekend\n\n::: {#cell-21 .cell execution_count=7}\n``` {.python .cell-code}\n%%sql\nSELECT *\nFROM appointments\nWHERE STRFTIME('%w', scheduled_at) IN ('0', '6');  -- Sunday or Saturday\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/appointments.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>id</th>\n            <th>title</th>\n            <th>client_name</th>\n            <th>scheduled_at</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>Consultation</td>\n            <td>Alice</td>\n            <td>2025-03-30 10:00:00</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n---\n\n‚úÖ 6. Show how many hours until each appointment (from now)\n\n::: {#cell-23 .cell execution_count=8}\n``` {.python .cell-code}\n%%sql\nSELECT \n    id,\n    title,\n    scheduled_at,\n    ROUND((JULIANDAY(scheduled_at) - JULIANDAY('now')) * 24, 2) AS hours_until\nFROM appointments;\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/appointments.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>id</th>\n            <th>title</th>\n            <th>scheduled_at</th>\n            <th>hours_until</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>Consultation</td>\n            <td>2025-03-30 10:00:00</td>\n            <td>-104.18</td>\n        </tr>\n        <tr>\n            <td>2</td>\n            <td>Follow-up</td>\n            <td>2025-03-31 14:30:00</td>\n            <td>-75.68</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td>Strategy Meeting</td>\n            <td>2025-04-01 09:00:00</td>\n            <td>-57.18</td>\n        </tr>\n        <tr>\n            <td>4</td>\n            <td>Project Review</td>\n            <td>2025-04-01 16:45:00</td>\n            <td>-49.43</td>\n        </tr>\n        <tr>\n            <td>5</td>\n            <td>Feedback Session</td>\n            <td>2025-04-02 11:15:00</td>\n            <td>-30.93</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n#### üåç Example: Show today‚Äôs local appointments\n\n::: {#cell-25 .cell execution_count=9}\n``` {.python .cell-code}\n%%sql\nSELECT *\nFROM appointments\nWHERE DATE(scheduled_at) = DATE('now', 'localtime');\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/appointments.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>id</th>\n            <th>title</th>\n            <th>client_name</th>\n            <th>scheduled_at</th>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n---\n\nExplanation:\n\n* DATE('now', 'localtime') gets today‚Äôs date in the local time zone.\n* This query filters all appointments scheduled for today (local time).\n\n",
    "supporting": [
      "week03-02-time_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}