{
  "hash": "b22b0e381d8045f4a4648a4762c892f0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Week 02: SQL ‚Äì Using CASE\"\nauthor: \"Eric Araujo\"\nformat:\n  html:\n    code-fold: false\njupyter: python3\n---\n\nThe CASE statement in SQL is a way to add conditional logic to your queries ‚Äî it‚Äôs like an IF-THEN-ELSE structure in programming languages.\n\n## üìå Basic Syntax of CASE\n\n```sql\nCASE\n    WHEN condition1 THEN result1\n    WHEN condition2 THEN result2\n    ...\n    ELSE resultN\nEND\n```\n\nYou can use it:\n\n* In SELECT to create computed columns.\n* In ORDER BY to sort conditionally.\n* In WHERE (less common, but possible).\n\n## ‚úÖ Example 1: Using CASE in a SELECT\n\n```sql\nSELECT name,\n       age,\n       CASE \n           WHEN age < 18 THEN 'Minor'\n           WHEN age < 65 THEN 'Adult'\n           ELSE 'Senior'\n       END AS age_group\nFROM people;\n```\n\nThis assigns a label (Minor, Adult, or Senior) based on age.\n\n## ‚úÖ Example 2: Conditional Aggregation\n\n```sql\nSELECT \n    department,\n    COUNT(*) AS total_employees,\n    SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) AS female_employees\nFROM employees\nGROUP BY department;\n```\n\nThis counts total and female employees per department.\n\n## ‚úÖ Example 3: CASE in ORDER BY\n\n```sql\nSELECT name, priority\nFROM tasks\nORDER BY \n    CASE priority\n        WHEN 'High' THEN 1\n        WHEN 'Medium' THEN 2\n        ELSE 3\n    END;\n```\n\nThis sorts tasks by custom priority order.\n\n## üîé Notes\n\n* You must include END.\n* CASE can be nested.\n* There‚Äôs also a simple form:\n\n```sql\nCASE expression\n    WHEN value1 THEN result1\n    WHEN value2 THEN result2\n    ELSE resultN\nEND\n```\n\nIt compares a single expression against multiple values.\n\n## üß™ Practice: Classify Products by Price\n\n### ‚úÖ Table Setup\n\n::: {#cell-7 .cell execution_count=1}\n``` {.python .cell-code}\n%%capture\n%load_ext sql\n%sql sqlite:///dbs/w02/products.db\n%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n```\n:::\n\n\n::: {#cell-8 .cell execution_count=2}\n``` {.python .cell-code}\n%%sql\nCREATE TABLE products (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    price REAL\n);\n\nINSERT INTO products (name, price) VALUES\n('Pencil', 0.99),\n('Notebook', 2.49),\n('Backpack', 29.99),\n('Laptop', 999.99),\n('Water Bottle', 12.50);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/products.db\n(sqlite3.OperationalError) table products already exists\n[SQL: CREATE TABLE products (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    price REAL\n);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n```\n:::\n:::\n\n\n::: {#cell-9 .cell execution_count=3}\n``` {.python .cell-code}\n%%sql\nSELECT * FROM products;\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/products.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>id</th>\n            <th>name</th>\n            <th>price</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>Pencil</td>\n            <td>0.99</td>\n        </tr>\n        <tr>\n            <td>2</td>\n            <td>Notebook</td>\n            <td>2.49</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td>Backpack</td>\n            <td>29.99</td>\n        </tr>\n        <tr>\n            <td>4</td>\n            <td>Laptop</td>\n            <td>999.99</td>\n        </tr>\n        <tr>\n            <td>5</td>\n            <td>Water Bottle</td>\n            <td>12.5</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n---\n\n### ‚ùì Question:\n\nWrite an SQL query to return the name, price, and a new column called price_category that shows:\n\n* 'Cheap' if price is less than 5\n* 'Moderate' if price is between 5 and 100\n* 'Expensive' if price is greater than 100\n\n::: {#cell-11 .cell execution_count=4}\n``` {.python .cell-code}\n%%sql\nSELECT \n    name,\n    price,\n    CASE \n        WHEN price < 5 THEN 'Cheap'\n        WHEN price <= 100 THEN 'Moderate'\n        ELSE 'Expensive'\n    END AS price_category\nFROM products;\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/products.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>name</th>\n            <th>price</th>\n            <th>price_category</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Pencil</td>\n            <td>0.99</td>\n            <td>Cheap</td>\n        </tr>\n        <tr>\n            <td>Notebook</td>\n            <td>2.49</td>\n            <td>Cheap</td>\n        </tr>\n        <tr>\n            <td>Backpack</td>\n            <td>29.99</td>\n            <td>Moderate</td>\n        </tr>\n        <tr>\n            <td>Laptop</td>\n            <td>999.99</td>\n            <td>Expensive</td>\n        </tr>\n        <tr>\n            <td>Water Bottle</td>\n            <td>12.5</td>\n            <td>Moderate</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n\n",
    "supporting": [
      "week02-case_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}