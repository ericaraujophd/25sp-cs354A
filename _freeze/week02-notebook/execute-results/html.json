{
  "hash": "c2b8be9caaa75309f7ad89e38476186f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Week 02: SQL â€“ Intermediate Concepts Summary\"\nformat:\n  html:\n    code-fold: false\njupyter: python3\n---\n\n\n## SLOs for Week 02\n\nAt the end of this unit, students will be able to...\n\n1.  Perform data aggregation using GROUP BY and HAVING.\n2.  Write and execute INNER, LEFT-OUTER, RIGHT, and FULL JOINs.\n3.  Construct subqueries for complex queries.\n4.  Implement SQL functions and expressions.\n5.  Use SQL best practices for readable and efficient queries.\n6.  Optimize SQL queries for better performance.\n\n## 0. Our dataset for this tasks\n\nIn the US, the Institute of Museum and Library Services (IMLS) measures library activity as part of its annual Public Libraries Survey. The survey collects data from more than 9000 library administrative entities, defined by the survey as agencies that provide library services to a particular locality. Data includes the number of branches, staff, books, hours open per year, etc. To teach the concepts below, we will build three tables containing the data from the survey related to the years of 2016, 2017 and 2018. For doing so, we read from the CSV files downloaded from their website. More especifically, some columns will be selected in the process to reduce the amount of non used attributes.\n\nWe are running SQL queries in a Jupyter environment. \n\n::: {#d111e8d2 .cell execution_count=1}\n``` {.python .cell-code}\n%%capture\n%load_ext sql\n%sql sqlite:///dbs/w02/library.db\n%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n```\n:::\n\n\nThis will open our database `library.db` for us. Don't bother yourself with the config details. That is a trick to run the SQL queries in this environment.\n\nNow we turn to our tables. We have to create 3 tables. Let's start with the table for 2018.\n\n::: {#cell-create-2018 .cell execution_count=2}\n``` {.python .cell-code}\n%%sql\n-- Creating the 2018 Public Libraries Survey table\n\n-- We drop an old copy of the table, if it exists.\nDROP TABLE IF EXISTS libraries_2018;\n\nCREATE TABLE libraries_2018 (\n    stabr text NOT NULL,\n    fscskey text CONSTRAINT fscskey_2018_pkey PRIMARY KEY,\n    libid text NOT NULL,\n    libname text NOT NULL,\n    address text NOT NULL,\n    city text NOT NULL,\n    zip text NOT NULL,\n    county text NOT NULL,\n    phone text NOT NULL,\n    c_relatn text NOT NULL,\n    c_legbas text NOT NULL,\n    c_admin text NOT NULL,\n    c_fscs text NOT NULL,\n    geocode text NOT NULL,\n    lsabound text NOT NULL,\n    startdate text NOT NULL,\n    enddate text NOT NULL,\n    popu_lsa integer NOT NULL,\n    popu_und integer NOT NULL,\n    centlib integer NOT NULL,\n    branlib integer NOT NULL,\n    bkmob integer NOT NULL,\n    totstaff numeric(8,2) NOT NULL,\n    bkvol integer NOT NULL,\n    ebook integer NOT NULL,\n    audio_ph integer NOT NULL,\n    audio_dl integer NOT NULL,\n    video_ph integer NOT NULL,\n    video_dl integer NOT NULL,\n    ec_lo_ot integer NOT NULL,\n    subscrip integer NOT NULL,\n    hrs_open integer NOT NULL,\n    visits integer NOT NULL,\n    reference integer NOT NULL,\n    regbor integer NOT NULL,\n    totcir integer NOT NULL,\n    kidcircl integer NOT NULL,\n    totpro integer NOT NULL,\n    gpterms integer NOT NULL,\n    pitusr integer NOT NULL,\n    wifisess integer NOT NULL,\n    obereg text NOT NULL,\n    statstru text NOT NULL,\n    statname text NOT NULL,\n    stataddr text NOT NULL,\n    longitude numeric(10,7) NOT NULL,\n    latitude numeric(10,7) NOT NULL\n);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/library.db\nDone.\nDone.\n```\n:::\n\n::: {#create-2018 .cell-output .cell-output-display execution_count=2}\n```\n[]\n```\n:::\n:::\n\n\nThis is an empty table. To fill the table, we need to convert our CSV entries to entitites in our database.\n\nHere I came up with another trick. I created a subprocess that opens SQLite3 and calls the command to convert a CSV file into a table inside the database. The code is as follows:\n\n::: {#1c54c92d .cell execution_count=3}\n``` {.python .cell-code}\nimport subprocess\n\ndb = \"/dbs/w02/library.db\"\ncsv = \"/dbs/w02/pls_fy2018_libraries.csv\"\ntable = \"libraries_2018\"\n\nsqlite_command = f\"\"\"\n.mode csv\n.import '{csv}' {table}\n\"\"\"\n\nsubprocess.run([\"sqlite3\", db], input=sqlite_command, text=True)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nError: unable to open database \"/dbs/w02/library.db\": unable to open database file\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nCompletedProcess(args=['sqlite3', '/dbs/w02/library.db'], returncode=1)\n```\n:::\n:::\n\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n::: {#cell-fig-polar .cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![A line plot on a polar axis](week02-notebook_files/figure-html/fig-polar-output-1.png){#fig-polar}\n:::\n:::\n\n\n",
    "supporting": [
      "week02-notebook_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}