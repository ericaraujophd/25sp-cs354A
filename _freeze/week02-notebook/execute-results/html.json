{
  "hash": "1e858c9928e5b8244ef549ee590f8fed",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Week 02: SQL – Intermediate Concepts Summary\"\nformat:\n  html:\n    code-fold: false\njupyter: python3\n---\n\n\n## SLOs for Week 02\n\nAt the end of this unit, students will be able to...\n\n1.  Perform data aggregation using GROUP BY and HAVING.\n2.  Write and execute INNER, LEFT-OUTER, RIGHT, and FULL JOINs.\n3.  Construct subqueries for complex queries.\n4.  Implement SQL functions and expressions.\n5.  Use SQL best practices for readable and efficient queries.\n6.  Optimize SQL queries for better performance.\n\n## 0. Creating the Library Survey Tables\n\nIn the US, the Institute of Museum and Library Services (IMLS) measures library activity as part of its annual Public Libraries Survey. The survey collects data from more than 9000 library administrative entities, defined by the survey as agencies that provide library services to a particular locality. Data includes the number of branches, staff, books, hours open per year, etc. To teach the concepts below, we will build three tables containing the data from the survey related to the years of 2016, 2017 and 2018. For doing so, we read from the CSV files downloaded from their website. More especifically, some columns will be selected in the process to reduce the amount of non used attributes.\n\nWe are running SQL queries in a Jupyter environment. \n\n::: {#1cf169e5 .cell execution_count=1}\n``` {.python .cell-code}\n%%capture\n%load_ext sql\n%sql sqlite:///dbs/w02/library.db\n%config SqlMagic.style = '_DEPRECATED_DEFAULT'\n```\n:::\n\n\n---\n\n**This will** open our database `library.db` for us. Don't bother yourself with the config details. That is a trick to run the SQL queries in this environment.\n\nNow we turn to our tables. We have to create 3 tables. Let's start with the table for 2018.\n\n::: {#cell-create-2018 .cell execution_count=2}\n``` {.python .cell-code}\n%%sql\n-- Creating the 2018 Public Libraries Survey table\n\n-- We drop an old copy of the table, if it exists.\nDROP TABLE IF EXISTS libraries_2018;\n\nCREATE TABLE libraries_2018 (\n    stabr text NOT NULL,\n    fscskey text CONSTRAINT fscskey_2018_pkey PRIMARY KEY,\n    libid text NOT NULL,\n    libname text NOT NULL,\n    address text NOT NULL,\n    city text NOT NULL,\n    zip text NOT NULL,\n    county text NOT NULL,\n    phone text NOT NULL,\n    c_relatn text NOT NULL,\n    c_legbas text NOT NULL,\n    c_admin text NOT NULL,\n    c_fscs text NOT NULL,\n    geocode text NOT NULL,\n    lsabound text NOT NULL,\n    startdate text NOT NULL,\n    enddate text NOT NULL,\n    popu_lsa integer NOT NULL,\n    popu_und integer NOT NULL,\n    centlib integer NOT NULL,\n    branlib integer NOT NULL,\n    bkmob integer NOT NULL,\n    totstaff numeric(8,2) NOT NULL,\n    bkvol integer NOT NULL,\n    ebook integer NOT NULL,\n    audio_ph integer NOT NULL,\n    audio_dl integer NOT NULL,\n    video_ph integer NOT NULL,\n    video_dl integer NOT NULL,\n    ec_lo_ot integer NOT NULL,\n    subscrip integer NOT NULL,\n    hrs_open integer NOT NULL,\n    visits integer NOT NULL,\n    reference integer NOT NULL,\n    regbor integer NOT NULL,\n    totcir integer NOT NULL,\n    kidcircl integer NOT NULL,\n    totpro integer NOT NULL,\n    gpterms integer NOT NULL,\n    pitusr integer NOT NULL,\n    wifisess integer NOT NULL,\n    obereg text NOT NULL,\n    statstru text NOT NULL,\n    statname text NOT NULL,\n    stataddr text NOT NULL,\n    longitude numeric(10,7) NOT NULL,\n    latitude numeric(10,7) NOT NULL\n);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/library.db\nDone.\nDone.\n```\n:::\n\n::: {#create-2018 .cell-output .cell-output-display execution_count=2}\n```\n[]\n```\n:::\n:::\n\n\n---\n\n**This is** an empty table. To fill the table, we need to convert our CSV entries to entitites in our database.\n\nHere I came up with another trick. I created a subprocess that opens SQLite3 and calls the command to convert a CSV file into a table inside the database. The code is as follows:\n\n::: {#5771fb1d .cell execution_count=3}\n``` {.python .cell-code}\nimport subprocess\n\ndb = \"dbs/w02/library.db\"\ncsv = \"dbs/w02/pls_fy2018_libraries.csv\"\ntable = \"libraries_2018\"\n\nsqlite_command = f\"\"\"\n.mode csv\n.import '{csv}' {table}\n\"\"\"\n\nsubprocess.run([\"sqlite3\", db], input=sqlite_command, text=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nCompletedProcess(args=['sqlite3', 'dbs/w02/library.db'], returncode=0)\n```\n:::\n:::\n\n\n---\n\n**Let's see** if the data was loaded? Let's peak on the 10 first rows.\n\n::: {#ea59eb69 .cell execution_count=4}\n``` {.python .cell-code}\n%%sql\nSELECT * FROM libraries_2018\nLIMIT 10;\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/library.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>stabr</th>\n            <th>fscskey</th>\n            <th>libid</th>\n            <th>libname</th>\n            <th>address</th>\n            <th>city</th>\n            <th>zip</th>\n            <th>county</th>\n            <th>phone</th>\n            <th>c_relatn</th>\n            <th>c_legbas</th>\n            <th>c_admin</th>\n            <th>c_fscs</th>\n            <th>geocode</th>\n            <th>lsabound</th>\n            <th>startdate</th>\n            <th>enddate</th>\n            <th>popu_lsa</th>\n            <th>popu_und</th>\n            <th>centlib</th>\n            <th>branlib</th>\n            <th>bkmob</th>\n            <th>totstaff</th>\n            <th>bkvol</th>\n            <th>ebook</th>\n            <th>audio_ph</th>\n            <th>audio_dl</th>\n            <th>video_ph</th>\n            <th>video_dl</th>\n            <th>ec_lo_ot</th>\n            <th>subscrip</th>\n            <th>hrs_open</th>\n            <th>visits</th>\n            <th>reference</th>\n            <th>regbor</th>\n            <th>totcir</th>\n            <th>kidcircl</th>\n            <th>totpro</th>\n            <th>gpterms</th>\n            <th>pitusr</th>\n            <th>wifisess</th>\n            <th>obereg</th>\n            <th>statstru</th>\n            <th>statname</th>\n            <th>stataddr</th>\n            <th>longitude</th>\n            <th>latitude</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>STABR</td>\n            <td>FSCSKEY</td>\n            <td>LIBID</td>\n            <td>LIBNAME</td>\n            <td>ADDRESS</td>\n            <td>CITY</td>\n            <td>ZIP</td>\n            <td>CNTY</td>\n            <td>PHONE</td>\n            <td>C_RELATN</td>\n            <td>C_LEGBAS</td>\n            <td>C_ADMIN</td>\n            <td>C_FSCS</td>\n            <td>GEOCODE</td>\n            <td>LSABOUND</td>\n            <td>STARTDAT</td>\n            <td>ENDDATE</td>\n            <td>POPU_LSA</td>\n            <td>POPU_UND</td>\n            <td>CENTLIB</td>\n            <td>BRANLIB</td>\n            <td>BKMOB</td>\n            <td>TOTSTAFF</td>\n            <td>BKVOL</td>\n            <td>EBOOK</td>\n            <td>AUDIO_PH</td>\n            <td>AUDIO_DL</td>\n            <td>VIDEO_PH</td>\n            <td>VIDEO_DL</td>\n            <td>EC_LO_OT</td>\n            <td>SUBSCRIP</td>\n            <td>HRS_OPEN</td>\n            <td>VISITS</td>\n            <td>REFERENC</td>\n            <td>REGBOR</td>\n            <td>TOTCIR</td>\n            <td>KIDCIRCL</td>\n            <td>TOTPRO</td>\n            <td>GPTERMS</td>\n            <td>PITUSR</td>\n            <td>WIFISESS</td>\n            <td>OBEREG</td>\n            <td>STATSTRU</td>\n            <td>STATNAME</td>\n            <td>STATADDR</td>\n            <td>LONGITUD</td>\n            <td>LATITUDE</td>\n        </tr>\n        <tr>\n            <td>AK</td>\n            <td>AK0001</td>\n            <td>AK0001-002</td>\n            <td>ANCHOR POINT PUBLIC LIBRARY</td>\n            <td>34020 NORTH FORK ROAD</td>\n            <td>ANCHOR POINT</td>\n            <td>99556</td>\n            <td>KENAI PENINSULA</td>\n            <td>9072355692</td>\n            <td>NO</td>\n            <td>NP</td>\n            <td>SO</td>\n            <td>Y</td>\n            <td>CI1</td>\n            <td>N</td>\n            <td>7/1/17</td>\n            <td>6/30/18</td>\n            <td>2057</td>\n            <td>2040</td>\n            <td>1</td>\n            <td>0</td>\n            <td>0</td>\n            <td>0.67</td>\n            <td>18201</td>\n            <td>0</td>\n            <td>179</td>\n            <td>0</td>\n            <td>3320</td>\n            <td>0</td>\n            <td>0</td>\n            <td>9</td>\n            <td>1245</td>\n            <td>6032</td>\n            <td>4</td>\n            <td>1726</td>\n            <td>11316</td>\n            <td>2294</td>\n            <td>60</td>\n            <td>8</td>\n            <td>1495</td>\n            <td>1182</td>\n            <td>08</td>\n            <td>00</td>\n            <td>00</td>\n            <td>00</td>\n            <td>-151.825</td>\n            <td>59.77965</td>\n        </tr>\n        <tr>\n            <td>AK</td>\n            <td>AK0002</td>\n            <td>AK0002-011</td>\n            <td>ANCHORAGE PUBLIC LIBRARY</td>\n            <td>3600 DENALI STREET</td>\n            <td>ANCHORAGE</td>\n            <td>99503</td>\n            <td>ANCHORAGE</td>\n            <td>9073432892</td>\n            <td>NO</td>\n            <td>CO</td>\n            <td>MO</td>\n            <td>Y</td>\n            <td>MA1</td>\n            <td>N</td>\n            <td>1/1/17</td>\n            <td>12/31/17</td>\n            <td>295365</td>\n            <td>292940</td>\n            <td>1</td>\n            <td>4</td>\n            <td>0</td>\n            <td>76.65</td>\n            <td>370812</td>\n            <td>21587</td>\n            <td>30963</td>\n            <td>12992</td>\n            <td>76404</td>\n            <td>0</td>\n            <td>14</td>\n            <td>7311</td>\n            <td>11400</td>\n            <td>723272</td>\n            <td>54306</td>\n            <td>135828</td>\n            <td>1574942</td>\n            <td>553651</td>\n            <td>1924</td>\n            <td>165</td>\n            <td>126846</td>\n            <td>90135</td>\n            <td>08</td>\n            <td>00</td>\n            <td>00</td>\n            <td>00</td>\n            <td>-149.876</td>\n            <td>61.18744</td>\n        </tr>\n        <tr>\n            <td>AK</td>\n            <td>AK0003</td>\n            <td>AK0003-002</td>\n            <td>ANDERSON COMMUNITY LIBRARY</td>\n            <td>101 FIRST STREET</td>\n            <td>ANDERSON</td>\n            <td>99744</td>\n            <td>DENALI</td>\n            <td>9075822628</td>\n            <td>NO</td>\n            <td>CI</td>\n            <td>SO</td>\n            <td>Y</td>\n            <td>CI1</td>\n            <td>N</td>\n            <td>7/1/17</td>\n            <td>6/30/18</td>\n            <td>269</td>\n            <td>267</td>\n            <td>1</td>\n            <td>0</td>\n            <td>0</td>\n            <td>0.75</td>\n            <td>15314</td>\n            <td>0</td>\n            <td>201</td>\n            <td>0</td>\n            <td>1403</td>\n            <td>0</td>\n            <td>0</td>\n            <td>0</td>\n            <td>480</td>\n            <td>592</td>\n            <td>300</td>\n            <td>113</td>\n            <td>1137</td>\n            <td>264</td>\n            <td>4</td>\n            <td>5</td>\n            <td>225</td>\n            <td>0</td>\n            <td>08</td>\n            <td>00</td>\n            <td>00</td>\n            <td>00</td>\n            <td>-149.187</td>\n            <td>64.34363</td>\n        </tr>\n        <tr>\n            <td>AK</td>\n            <td>AK0006</td>\n            <td>AK0006-002</td>\n            <td>KUSKOKWIM CONSORTIUM LIBRARY</td>\n            <td>420 CHIEF EDDIE HOFFMAN HIGHWAY</td>\n            <td>BETHEL</td>\n            <td>99559</td>\n            <td>BETHEL</td>\n            <td>9075434516</td>\n            <td>NO</td>\n            <td>MJ</td>\n            <td>SO</td>\n            <td>Y</td>\n            <td>CI1</td>\n            <td>N</td>\n            <td>7/1/17</td>\n            <td>6/30/18</td>\n            <td>6135</td>\n            <td>6085</td>\n            <td>1</td>\n            <td>0</td>\n            <td>0</td>\n            <td>3</td>\n            <td>34860</td>\n            <td>21587</td>\n            <td>425</td>\n            <td>12992</td>\n            <td>3782</td>\n            <td>0</td>\n            <td>0</td>\n            <td>5</td>\n            <td>2040</td>\n            <td>51000</td>\n            <td>1530</td>\n            <td>1912</td>\n            <td>14067</td>\n            <td>3746</td>\n            <td>406</td>\n            <td>8</td>\n            <td>6600</td>\n            <td>5716</td>\n            <td>08</td>\n            <td>00</td>\n            <td>00</td>\n            <td>00</td>\n            <td>-161.771</td>\n            <td>60.79114</td>\n        </tr>\n        <tr>\n            <td>AK</td>\n            <td>AK0007</td>\n            <td>AK0007-002</td>\n            <td>BIG LAKE PUBLIC LIBRARY</td>\n            <td>3140 SOUTH BIG LAKE ROAD</td>\n            <td>BIG LAKE</td>\n            <td>99652</td>\n            <td>MATANUSKA-SUSITNA</td>\n            <td>9078617635</td>\n            <td>NO</td>\n            <td>CO</td>\n            <td>SO</td>\n            <td>Y</td>\n            <td>CO1</td>\n            <td>N</td>\n            <td>7/1/17</td>\n            <td>6/30/18</td>\n            <td>12847</td>\n            <td>12742</td>\n            <td>1</td>\n            <td>0</td>\n            <td>0</td>\n            <td>3</td>\n            <td>28698</td>\n            <td>21587</td>\n            <td>2140</td>\n            <td>12992</td>\n            <td>3805</td>\n            <td>0</td>\n            <td>0</td>\n            <td>47</td>\n            <td>2551</td>\n            <td>62249</td>\n            <td>887</td>\n            <td>2890</td>\n            <td>36670</td>\n            <td>15691</td>\n            <td>363</td>\n            <td>18</td>\n            <td>15022</td>\n            <td>8125</td>\n            <td>08</td>\n            <td>00</td>\n            <td>00</td>\n            <td>00</td>\n            <td>-149.819</td>\n            <td>61.5475</td>\n        </tr>\n        <tr>\n            <td>AK</td>\n            <td>AK0008</td>\n            <td>AK0008-002</td>\n            <td>CANTWELL COMMUNITY LIBRARY</td>\n            <td>1 SCHOOL ROAD</td>\n            <td>CANTWELL</td>\n            <td>99729</td>\n            <td>DENALI</td>\n            <td>9077682372</td>\n            <td>NO</td>\n            <td>NP</td>\n            <td>SO</td>\n            <td>Y</td>\n            <td>CI1</td>\n            <td>N</td>\n            <td>7/1/17</td>\n            <td>6/30/18</td>\n            <td>202</td>\n            <td>200</td>\n            <td>1</td>\n            <td>0</td>\n            <td>0</td>\n            <td>0.8</td>\n            <td>10376</td>\n            <td>21587</td>\n            <td>275</td>\n            <td>12992</td>\n            <td>562</td>\n            <td>0</td>\n            <td>0</td>\n            <td>15</td>\n            <td>720</td>\n            <td>2500</td>\n            <td>390</td>\n            <td>183</td>\n            <td>2828</td>\n            <td>1198</td>\n            <td>45</td>\n            <td>1</td>\n            <td>50</td>\n            <td>95</td>\n            <td>08</td>\n            <td>00</td>\n            <td>00</td>\n            <td>00</td>\n            <td>-148.9</td>\n            <td>63.3912</td>\n        </tr>\n        <tr>\n            <td>AK</td>\n            <td>AK0011</td>\n            <td>AK0011-002</td>\n            <td>CHINIAK PUBLIC LIBRARY</td>\n            <td>43318 SPRUCE WAY</td>\n            <td>CHINIAK</td>\n            <td>99615</td>\n            <td>KODIAK ISLAND</td>\n            <td>9075120880</td>\n            <td>NO</td>\n            <td>NP</td>\n            <td>SO</td>\n            <td>N</td>\n            <td>CI1</td>\n            <td>N</td>\n            <td>7/1/17</td>\n            <td>6/30/18</td>\n            <td>44</td>\n            <td>44</td>\n            <td>1</td>\n            <td>0</td>\n            <td>0</td>\n            <td>0</td>\n            <td>2300</td>\n            <td>21587</td>\n            <td>0</td>\n            <td>12992</td>\n            <td>257</td>\n            <td>0</td>\n            <td>0</td>\n            <td>18</td>\n            <td>132</td>\n            <td>302</td>\n            <td>0</td>\n            <td>39</td>\n            <td>465</td>\n            <td>301</td>\n            <td>27</td>\n            <td>2</td>\n            <td>75</td>\n            <td>220</td>\n            <td>08</td>\n            <td>00</td>\n            <td>00</td>\n            <td>00</td>\n            <td>-152.231</td>\n            <td>57.61245</td>\n        </tr>\n        <tr>\n            <td>AK</td>\n            <td>AK0014</td>\n            <td>AK0014-002</td>\n            <td>COLD BAY PUBLIC LIBRARY</td>\n            <td>10 BARANOV ROAD</td>\n            <td>COLD BAY</td>\n            <td>99571</td>\n            <td>ALEUTIANS EAST</td>\n            <td>9075322878</td>\n            <td>NO</td>\n            <td>NP</td>\n            <td>SO</td>\n            <td>Y</td>\n            <td>CI1</td>\n            <td>N</td>\n            <td>7/1/17</td>\n            <td>6/30/18</td>\n            <td>63</td>\n            <td>62</td>\n            <td>1</td>\n            <td>0</td>\n            <td>0</td>\n            <td>0.25</td>\n            <td>3226</td>\n            <td>0</td>\n            <td>445</td>\n            <td>0</td>\n            <td>2673</td>\n            <td>0</td>\n            <td>0</td>\n            <td>0</td>\n            <td>400</td>\n            <td>1080</td>\n            <td>31</td>\n            <td>36</td>\n            <td>121</td>\n            <td>11</td>\n            <td>5</td>\n            <td>4</td>\n            <td>235</td>\n            <td>893</td>\n            <td>08</td>\n            <td>00</td>\n            <td>00</td>\n            <td>00</td>\n            <td>-160.693</td>\n            <td>55.69687</td>\n        </tr>\n        <tr>\n            <td>AK</td>\n            <td>AK0015</td>\n            <td>AK0015-002</td>\n            <td>COOPER LANDING COMMUNITY LIBRARY</td>\n            <td>18511 BEAN CREEK ROAD</td>\n            <td>COOPER LANDING</td>\n            <td>99572</td>\n            <td>KENAI PENINSULA</td>\n            <td>9075951241</td>\n            <td>NO</td>\n            <td>NP</td>\n            <td>SO</td>\n            <td>N</td>\n            <td>CI1</td>\n            <td>N</td>\n            <td>7/1/17</td>\n            <td>6/30/18</td>\n            <td>265</td>\n            <td>263</td>\n            <td>1</td>\n            <td>0</td>\n            <td>0</td>\n            <td>0</td>\n            <td>4163</td>\n            <td>0</td>\n            <td>192</td>\n            <td>0</td>\n            <td>926</td>\n            <td>0</td>\n            <td>0</td>\n            <td>1</td>\n            <td>1092</td>\n            <td>2452</td>\n            <td>70</td>\n            <td>834</td>\n            <td>2232</td>\n            <td>772</td>\n            <td>11</td>\n            <td>4</td>\n            <td>395</td>\n            <td>357</td>\n            <td>08</td>\n            <td>00</td>\n            <td>00</td>\n            <td>00</td>\n            <td>-149.823</td>\n            <td>60.49404</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n---\n\n**Now, lets** count how many rows are in this table.\n\n::: {#20e96099 .cell execution_count=5}\n``` {.python .cell-code}\n%%sql\nSELECT count(*) FROM libraries_2018;\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/library.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>count(*)</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>9262</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n---\n\n**The same** should be done for the years 2016 and 2017. The code below is long, but identical to what we've done above.\n\n::: {#cell-create-2016 .cell execution_count=6}\n``` {.python .cell-code code-fold=\"true\"}\n%%sql\n-- Creating the 2016 Public Libraries Survey table\n\n-- We drop an old copy of the table, if it exists.\nDROP TABLE IF EXISTS libraries_2016;\nDROP TABLE IF EXISTS libraries_2017;\n\nCREATE TABLE libraries_2016 (\n    stabr text NOT NULL,\n    fscskey text CONSTRAINT fscskey_2018_pkey PRIMARY KEY,\n    libid text NOT NULL,\n    libname text NOT NULL,\n    address text NOT NULL,\n    city text NOT NULL,\n    zip text NOT NULL,\n    county text NOT NULL,\n    phone text NOT NULL,\n    c_relatn text NOT NULL,\n    c_legbas text NOT NULL,\n    c_admin text NOT NULL,\n    c_fscs text NOT NULL,\n    geocode text NOT NULL,\n    lsabound text NOT NULL,\n    startdate text NOT NULL,\n    enddate text NOT NULL,\n    popu_lsa integer NOT NULL,\n    popu_und integer NOT NULL,\n    centlib integer NOT NULL,\n    branlib integer NOT NULL,\n    bkmob integer NOT NULL,\n    totstaff numeric(8,2) NOT NULL,\n    bkvol integer NOT NULL,\n    ebook integer NOT NULL,\n    audio_ph integer NOT NULL,\n    audio_dl integer NOT NULL,\n    video_ph integer NOT NULL,\n    video_dl integer NOT NULL,\n    ec_lo_ot integer NOT NULL,\n    subscrip integer NOT NULL,\n    hrs_open integer NOT NULL,\n    visits integer NOT NULL,\n    reference integer NOT NULL,\n    regbor integer NOT NULL,\n    totcir integer NOT NULL,\n    kidcircl integer NOT NULL,\n    totpro integer NOT NULL,\n    gpterms integer NOT NULL,\n    pitusr integer NOT NULL,\n    wifisess integer NOT NULL,\n    obereg text NOT NULL,\n    statstru text NOT NULL,\n    statname text NOT NULL,\n    stataddr text NOT NULL,\n    longitude numeric(10,7) NOT NULL,\n    latitude numeric(10,7) NOT NULL\n);\n\nCREATE TABLE libraries_2017 (\n    stabr text NOT NULL,\n    fscskey text CONSTRAINT fscskey_2018_pkey PRIMARY KEY,\n    libid text NOT NULL,\n    libname text NOT NULL,\n    address text NOT NULL,\n    city text NOT NULL,\n    zip text NOT NULL,\n    county text NOT NULL,\n    phone text NOT NULL,\n    c_relatn text NOT NULL,\n    c_legbas text NOT NULL,\n    c_admin text NOT NULL,\n    c_fscs text NOT NULL,\n    geocode text NOT NULL,\n    lsabound text NOT NULL,\n    startdate text NOT NULL,\n    enddate text NOT NULL,\n    popu_lsa integer NOT NULL,\n    popu_und integer NOT NULL,\n    centlib integer NOT NULL,\n    branlib integer NOT NULL,\n    bkmob integer NOT NULL,\n    totstaff numeric(8,2) NOT NULL,\n    bkvol integer NOT NULL,\n    ebook integer NOT NULL,\n    audio_ph integer NOT NULL,\n    audio_dl integer NOT NULL,\n    video_ph integer NOT NULL,\n    video_dl integer NOT NULL,\n    ec_lo_ot integer NOT NULL,\n    subscrip integer NOT NULL,\n    hrs_open integer NOT NULL,\n    visits integer NOT NULL,\n    reference integer NOT NULL,\n    regbor integer NOT NULL,\n    totcir integer NOT NULL,\n    kidcircl integer NOT NULL,\n    totpro integer NOT NULL,\n    gpterms integer NOT NULL,\n    pitusr integer NOT NULL,\n    wifisess integer NOT NULL,\n    obereg text NOT NULL,\n    statstru text NOT NULL,\n    statname text NOT NULL,\n    stataddr text NOT NULL,\n    longitude numeric(10,7) NOT NULL,\n    latitude numeric(10,7) NOT NULL\n);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/library.db\nDone.\nDone.\nDone.\nDone.\n```\n:::\n\n::: {#create-2016 .cell-output .cell-output-display execution_count=6}\n```\n[]\n```\n:::\n:::\n\n\n---\n\n**And now**, let's fill the tables with data from our CSV files.\n\n::: {#a4e22ee6 .cell execution_count=7}\n``` {.python .cell-code code-fold=\"true\"}\n# 2016\n\ndb = \"dbs/w02/library.db\"\ncsv = \"dbs/w02/pls_fy2016_libraries.csv\"\ntable = \"libraries_2016\"\n\nsqlite_command = f\"\"\"\n.mode csv\n.import '{csv}' {table}\n\"\"\"\nsubprocess.run([\"sqlite3\", db], input=sqlite_command, text=True)\n\n# 2017\n\ndb = \"dbs/w02/library.db\"\ncsv = \"dbs/w02/pls_fy2017_libraries.csv\"\ntable = \"libraries_2017\"\n\nsqlite_command = f\"\"\"\n.mode csv\n.import '{csv}' {table}\n\"\"\"\nsubprocess.run([\"sqlite3\", db], input=sqlite_command, text=True)\n\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nCompletedProcess(args=['sqlite3', 'dbs/w02/library.db'], returncode=0)\n```\n:::\n:::\n\n\n---\n\n**Let's check** the rows count for each of the tables now.\n\n::: {#841756ad .cell execution_count=8}\n``` {.python .cell-code}\n%%sql\n    SELECT 2016 AS 'Year', count(*) AS NumRows FROM libraries_2016\nUNION ALL\n    SELECT 2017, count(*) AS NumRows FROM libraries_2017\nUNION ALL\n    SELECT 2018, count(*) AS NumRows FROM libraries_2018;\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/library.db\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>Year</th>\n            <th>NumRows</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>2016</td>\n            <td>9253</td>\n        </tr>\n        <tr>\n            <td>2017</td>\n            <td>9246</td>\n        </tr>\n        <tr>\n            <td>2018</td>\n            <td>9262</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n---\n\n## 🧮 1. SQL Aggregation & Grouping (with SQLite Notes)\n\nSQL lets you **summarize** data using **aggregate functions**, and **group** it with GROUP BY. This is especially helpful for statistics, reports, and dashboards.\n\n### 🎯 **Common Aggregate Functions**\n\n| Function    | Description          | Example              |\n|-------------|----------------------|----------------------|\n| `COUNT()`   | Number of rows       | `COUNT(*)`           |\n| `SUM()`     | Total of values      | `SUM(amount)`        |\n| `AVG()`     | Mean average         | `AVG(score)`         |\n| `MIN()`     | Smallest value       | `MIN(age)`           |\n| `MAX()`     | Largest value        | `MAX(salary)`        |\n\n:::{.callout-note}\n✅ **SQLite supports all these functions.**\n:::\n\n### 🧩 Basic Grouping Example\n\n**Q:** How many students are in each major?\n\n```sql\nSELECT major, COUNT(*) AS student_count\nFROM students\nGROUP BY major;\n```\n\n:::{.callout-note}\n✅ SQLite allows this even if you’re selecting columns not in the GROUP BY clause or not inside an aggregate function. It will return one arbitrary value from each group for such columns.\n:::\n\n**Example (SQLite accepts this):**\n\n```sql\nSELECT major, name\nFROM students\nGROUP BY major;\n```\n\n:::{.callout-note}\nThis works in SQLite — it will return one name for each major, but which name is returned is undefined.\n❌ PostgreSQL (and other standards-compliant SQL engines) will **reject** this query with an error unless name is also in the GROUP BY or wrapped in an aggregate like MIN(name).\n:::\n\n### 🔍 Filtering Groups with HAVING\n\nUse HAVING to filter after grouping.\n\n**Q:** Show only majors with more than 10 students:\n\n```sql\nSELECT major, COUNT(*) AS student_count\nFROM students\nGROUP BY major\nHAVING COUNT(*) > 10;\n```\n\n:::{.callout-note}\nℹ️ In SQLite, you can refer to the alias (student_count) in HAVING.\nIn PostgreSQL, you’d need to repeat the expression: HAVING COUNT(*) > 10.\n:::\n\n### 📊 Combining Aggregates\n\n**Q:** Show average GPA per department — only if it’s above 3.5:\n\n```sql\nSELECT department, AVG(gpa) AS avg_gpa\nFROM students\nGROUP BY department\nHAVING AVG(gpa) > 3.5;\n```\n\n### 🔗 Grouping by Expressions\n\nYou can group by computed values like substrings or date parts.\n\n**Q:** Count students by **admission year** (from text-based dates):\n\n```sql\nSELECT SUBSTR(admission_date, 1, 4) AS year, COUNT(*) AS num_students\nFROM students\nGROUP BY year;\n```\n\nThe SUBSTR() function extracts a **substring** from a given string.\n\n```sql\nSUBSTR(string, start, length)\n```\n* string: the text to extract from\n* start: the position to start (1-based index)\n* length (optional): how many characters to return\n\n```sql\n-- Get the first 4 characters of a date\nSELECT SUBSTR('2024-09-15', 1, 4);  -- Returns '2024'\n\n-- Get the first letter of a name\nSELECT SUBSTR(name, 1, 1) FROM students;\n```\n\n📌 If length is omitted, SQLite returns the rest of the string from start.\n\n:::{.callout-note}\n✅ Works well in SQLite (which stores dates as text: YYYY-MM-DD).\n❗ In PostgreSQL, use: EXTRACT(YEAR FROM admission_date).\n:::\n\n### 🧠 Tips for Grouping Queries\n\n* Use GROUP BY with aggregate functions.\n* Use HAVING to filter groups (not rows).\n* Use WHERE for filtering before grouping.\n* Prefer column names or expressions in GROUP BY, not just positions (e.g., avoid GROUP BY 1).\n* Be cautious using non-aggregated, non-grouped columns in SQLite — it’s allowed, but not portable or predictable.\n\n## 1.1 Counting Distinct Values in a Column\n\nWe can combine `DISTINCT` with combinations of values like `count()`. This will return a count of distinct values from a column.\n\n::: {#d9259455 .cell execution_count=9}\n``` {.python .cell-code}\n%%sql\nSELECT count(libname)\nFROM libraries_2017;\n\nSELECT count(DISTINCT libname)\nFROM libraries_2017;\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n * sqlite:///dbs/w02/library.db\nDone.\nDone.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<table>\n    <thead>\n        <tr>\n            <th>count(DISTINCT libname)</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>8456</td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n## 1.2 Finding Maximum and Minimum Values using max() and min()\n\n",
    "supporting": [
      "week02-notebook_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}