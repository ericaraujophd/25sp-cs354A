[
  {
    "objectID": "week02.html",
    "href": "week02.html",
    "title": "Week 02: SQL – Intermediate Concepts",
    "section": "",
    "text": "At the end of this unit, students will be able to…\n\nPerform data aggregation using GROUP BY and HAVING.\nWrite and execute INNER, LEFT-OUTER, RIGHT, and FULL JOINs.\nConstruct subqueries for complex queries.\nImplement SQL functions and expressions.\nUse SQL best practices for readable and efficient queries.\nOptimize SQL queries for better performance.",
    "crumbs": [
      "Content",
      "Week 02: SQL – Intermediate Concepts"
    ]
  },
  {
    "objectID": "week02.html#slos-for-week-02",
    "href": "week02.html#slos-for-week-02",
    "title": "Week 02: SQL – Intermediate Concepts",
    "section": "",
    "text": "At the end of this unit, students will be able to…\n\nPerform data aggregation using GROUP BY and HAVING.\nWrite and execute INNER, LEFT-OUTER, RIGHT, and FULL JOINs.\nConstruct subqueries for complex queries.\nImplement SQL functions and expressions.\nUse SQL best practices for readable and efficient queries.\nOptimize SQL queries for better performance.",
    "crumbs": [
      "Content",
      "Week 02: SQL – Intermediate Concepts"
    ]
  },
  {
    "objectID": "week02.html#slides-videos-and-application-exercises",
    "href": "week02.html#slides-videos-and-application-exercises",
    "title": "Week 02: SQL – Intermediate Concepts",
    "section": "Slides, videos, and application exercises",
    "text": "Slides, videos, and application exercises\n\nWeek 02: Slides\n\nSlides\n\n\nCode from Class\n\n\n\nChapters 6 and 7\n\n\n\n\n\n\nLab 02: File I/O, Control Structures, and the Debugger\n\nInstructions\n\n\nSource\n\n\nDad Joke + Reflection\n\n\n\n\nProject 02: Falling Sand Simulator\n\nInstructions\n\n\nStarter",
    "crumbs": [
      "Content",
      "Week 02: SQL – Intermediate Concepts"
    ]
  },
  {
    "objectID": "week01.html",
    "href": "week01.html",
    "title": "Week 01: Introduction to Databases & SQL Basics",
    "section": "",
    "text": "At the end of this unit, students will be able to…\n\nExplain the purpose and importance of relational databases.\nDifferentiate between relational databases and other types of data storage.\nWrite basic SQL queries to retrieve data.\nUse WHERE clauses and ORDER BY to filter and sort results.\nUnderstand SQL syntax and basic commands.\nAnalyze a dataset using simple queries.",
    "crumbs": [
      "Content",
      "Week 01: Introduction to Databases & SQL Basics"
    ]
  },
  {
    "objectID": "week01.html#slos-for-week-01",
    "href": "week01.html#slos-for-week-01",
    "title": "Week 01: Introduction to Databases & SQL Basics",
    "section": "",
    "text": "At the end of this unit, students will be able to…\n\nExplain the purpose and importance of relational databases.\nDifferentiate between relational databases and other types of data storage.\nWrite basic SQL queries to retrieve data.\nUse WHERE clauses and ORDER BY to filter and sort results.\nUnderstand SQL syntax and basic commands.\nAnalyze a dataset using simple queries.",
    "crumbs": [
      "Content",
      "Week 01: Introduction to Databases & SQL Basics"
    ]
  },
  {
    "objectID": "week01.html#slides-videos-and-application-exercises",
    "href": "week01.html#slides-videos-and-application-exercises",
    "title": "Week 01: Introduction to Databases & SQL Basics",
    "section": "Slides, videos, and application exercises",
    "text": "Slides, videos, and application exercises\n\nWeek 01: Slides\n\nSlides\n\n\n\nChapters 1\n\n\n\n\n\n\nLab 01: Control Structures\n\nInstructions\n\n\nStarter\n\n\nDad Joke + Reflection\n\n\n\n\nProject 01: More Control Structures\n\nInstructions\n\n\nStarter\n\n\n\n\nParameter Passing  ::: –&gt;",
    "crumbs": [
      "Content",
      "Week 01: Introduction to Databases & SQL Basics"
    ]
  },
  {
    "objectID": "week05.html",
    "href": "week05.html",
    "title": "Week 05: Advanced SQL & Integrity Constraints",
    "section": "",
    "text": "By the end of this unit, students will be able to…\n\nImplement integrity constraints (PRIMARY KEY, FOREIGN KEY, CHECK).\nWrite and execute triggers for database automation.\nOptimize SQL queries for improved performance.\nDemonstrate SQL injection and discuss prevention strategies.\nAssign user roles and permissions for database security.\nDebug and troubleshoot complex SQL queries.",
    "crumbs": [
      "Content",
      "Week 05: Advanced SQL & Integrity Constraints"
    ]
  },
  {
    "objectID": "week05.html#slos-for-week-05",
    "href": "week05.html#slos-for-week-05",
    "title": "Week 05: Advanced SQL & Integrity Constraints",
    "section": "",
    "text": "By the end of this unit, students will be able to…\n\nImplement integrity constraints (PRIMARY KEY, FOREIGN KEY, CHECK).\nWrite and execute triggers for database automation.\nOptimize SQL queries for improved performance.\nDemonstrate SQL injection and discuss prevention strategies.\nAssign user roles and permissions for database security.\nDebug and troubleshoot complex SQL queries.",
    "crumbs": [
      "Content",
      "Week 05: Advanced SQL & Integrity Constraints"
    ]
  },
  {
    "objectID": "week05.html#slides-videos-and-application-exercises",
    "href": "week05.html#slides-videos-and-application-exercises",
    "title": "Week 05: Advanced SQL & Integrity Constraints",
    "section": "Slides, videos, and application exercises",
    "text": "Slides, videos, and application exercises\n\nWeek 05: Slides\n\nSlides\n\n\nCode from Class\n\n\nNo readings for Week 05.\n\n\n\n\nLab 05: Generic Containers (Templates)\nGeneric Containers (Templates)\n\nInstructions\n\n\nStarter\n\n\nSlides\n\n\n\n\nProject 05:\nName of Proj 05\n\nInstructions\n\n\nStarter",
    "crumbs": [
      "Content",
      "Week 05: Advanced SQL & Integrity Constraints"
    ]
  },
  {
    "objectID": "week06.html",
    "href": "week06.html",
    "title": "Week 06: Database Management & Optimization",
    "section": "",
    "text": "At the end of this unit, the student will be able to…\n\nDevelop a backup and recovery plan for a database system.\nExplain different techniques for performance tuning.\nUnderstand database partitioning and indexing strategies.\nProfile SQL queries to detect inefficiencies.\nDiscuss database integration with software applications.\nApply database optimization techniques in real-world scenarios.",
    "crumbs": [
      "Content",
      "Week 06: Database Management & Optimization"
    ]
  },
  {
    "objectID": "week06.html#slos-for-week-06",
    "href": "week06.html#slos-for-week-06",
    "title": "Week 06: Database Management & Optimization",
    "section": "",
    "text": "At the end of this unit, the student will be able to…\n\nDevelop a backup and recovery plan for a database system.\nExplain different techniques for performance tuning.\nUnderstand database partitioning and indexing strategies.\nProfile SQL queries to detect inefficiencies.\nDiscuss database integration with software applications.\nApply database optimization techniques in real-world scenarios.",
    "crumbs": [
      "Content",
      "Week 06: Database Management & Optimization"
    ]
  },
  {
    "objectID": "week06.html#slides-videos-and-application-exercises",
    "href": "week06.html#slides-videos-and-application-exercises",
    "title": "Week 06: Database Management & Optimization",
    "section": "Slides, videos, and application exercises",
    "text": "Slides, videos, and application exercises\n\nWeek 06: Slides\n\nSlides - Linked Lists\n\n\nSlides - Dynamic Array or Linked List\n\n\nCode from Class\n\n\nNo readings for Week 6.\n\n\n\n\nLab 06: More List Operations\n\nInstructions\n\n\nSource\n\n\nSlides\n\n\n\n\nProject 06: No project on Week 06",
    "crumbs": [
      "Content",
      "Week 06: Database Management & Optimization"
    ]
  },
  {
    "objectID": "slides/lab06-slides.html#some-reflection-13",
    "href": "slides/lab06-slides.html#some-reflection-13",
    "title": "Lab 06 — Linked Lists",
    "section": "Some reflection (1/3)",
    "text": "Some reflection (1/3)\n\n\n\n\n\n\n\n\n\n\n\n“In a Christian community everything depends upon whether each individual is an indispensable link in a chain. Only when even the smallest link is securely interlocked is the chain unbreakable. (…)"
  },
  {
    "objectID": "slides/lab06-slides.html#some-reflection-23",
    "href": "slides/lab06-slides.html#some-reflection-23",
    "title": "Lab 06 — Linked Lists",
    "section": "Some reflection (2/3)",
    "text": "Some reflection (2/3)\n\n\n\n\n\n\n\n\n\n\n\n“(…) A community which allows unemployed members to exist within it will perish because of them. It may be well, therefore, if every member receives a definite task to perform for the community, that he may know in hours of doubt that he, too, is not useless and unusable. (…)"
  },
  {
    "objectID": "slides/lab06-slides.html#some-reflection-33",
    "href": "slides/lab06-slides.html#some-reflection-33",
    "title": "Lab 06 — Linked Lists",
    "section": "Some reflection (3/3)",
    "text": "Some reflection (3/3)\n\n\n\n\n\n\n\n\n\n\n\n(…) Every Christian community must realize that not only do the weak need the strong, but also that the strong cannot exist without the weak. The elimination of the weak is the death of fellowship.” -Bonhoeffer, Life Together, 94."
  },
  {
    "objectID": "slides/lab06-slides.html#lab-6",
    "href": "slides/lab06-slides.html#lab-6",
    "title": "Lab 06 — Linked Lists",
    "section": "Lab 6",
    "text": "Lab 6\n\ncreating methods for class list\npair programming"
  },
  {
    "objectID": "slides/lab06-slides.html#dad-joke-of-the-week",
    "href": "slides/lab06-slides.html#dad-joke-of-the-week",
    "title": "Lab 06 — Linked Lists",
    "section": "Dad joke of the week",
    "text": "Dad joke of the week\n\n\n\nQ: Why did the man fall down the deep hole?\nA: ’Cause he couldn’t see that well."
  },
  {
    "objectID": "slides/lab00-slides.html#dad-joke-of-the-week",
    "href": "slides/lab00-slides.html#dad-joke-of-the-week",
    "title": "Lab 00 — Intro do C++",
    "section": "Dad joke of the week",
    "text": "Dad joke of the week\n\n\n\n\n\n\n\n\n\n\nPete and Repete are on a boat. Pete falls off. Who’s left on the boat?"
  },
  {
    "objectID": "slides/lab00-slides.html#bible-reflection-for-a-data-structures-lab-session",
    "href": "slides/lab00-slides.html#bible-reflection-for-a-data-structures-lab-session",
    "title": "Lab 00 — Intro do C++",
    "section": "Bible Reflection for a Data Structures Lab Session",
    "text": "Bible Reflection for a Data Structures Lab Session\nVerse: “Let all things be done decently and in order.” — 1 Corinthians 14:40\nAs we dive into the intricacies of data structures, this verse reminds us of the importance of organization and structure, not just in our code but also in life. Data structures like arrays, trees, and graphs teach us that even the most complex systems can be understood and managed when approached with order and clarity.\nGod’s creation reflects His intentional design—everything has a purpose and place, from the smallest atom to the vastness of the universe. Similarly, in our programming, we use data structures to bring order to chaos, enabling efficiency and clarity in solving problems.\nAs we work on today’s lab, let us remember that the discipline and creativity we apply to our work reflect the order and purpose God calls us to embody. Let’s strive to build systems that not only function well but also mirror the excellence and intentionality of our Creator.\nPrayer:\nLord, thank You for the gift of logic and creativity. Help us to approach our work with diligence and clarity, bringing order to our ideas just as You bring order to all creation. May our efforts in this lab glorify You and serve as a reflection of Your wisdom. Amen."
  },
  {
    "objectID": "slides/lab00-slides.html#lab-9",
    "href": "slides/lab00-slides.html#lab-9",
    "title": "Lab 00 — Intro do C++",
    "section": "Lab 9",
    "text": "Lab 9\n\ncreating recursive functions using ChatGPT\ndiscussing efficiency by calculating the number of times a function is called"
  },
  {
    "objectID": "slides/lab05-slides.html#lab-5",
    "href": "slides/lab05-slides.html#lab-5",
    "title": "Lab 05 — Generic Containers",
    "section": "Lab 5",
    "text": "Lab 5\n\ncreating class template\npair programming"
  },
  {
    "objectID": "slides/lab05-slides.html#dad-joke-of-the-week",
    "href": "slides/lab05-slides.html#dad-joke-of-the-week",
    "title": "Lab 05 — Generic Containers",
    "section": "Dad joke of the week",
    "text": "Dad joke of the week"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to CS112 - Data Structures",
    "section": "",
    "text": "CS 112 uses the C++ programming language to introduce students to the elementary data structures (vectors, lists, stacks, queues, binary search trees, …), recursion, big-oh notation, and other intermediate-level programming topics.\nThis a permanently in construction website, so please let us know if you find any information missing or had some bad experience with the links and interface throughout the semester.\nHere you will find all information needed to do well during the course."
  },
  {
    "objectID": "index.html#student-learning-outcomes",
    "href": "index.html#student-learning-outcomes",
    "title": "Welcome to CS112 - Data Structures",
    "section": "Student Learning Outcomes",
    "text": "Student Learning Outcomes\nUpon successful completion of this course students will be able to:\n\nUse indirection (pointers) and run-time memory allocation to implement dynamic, generic container classes (e.g., vectors, lists, stacks, queues, trees, etc.).\n\nAnalyze, categorize, and compare the complexity of data structure operations using “big-oh” notation.\n\nDesign and implement recursive data structure operations.\n\nDesign, create, and use unit-tests to test the correctness of data structure operations.\n\nFor select algorithms, use simple parallel computing techniques to improve algorithm performance and measure the improvement."
  },
  {
    "objectID": "index.html#course-organization",
    "href": "index.html#course-organization",
    "title": "Welcome to CS112 - Data Structures",
    "section": "Course Organization",
    "text": "Course Organization\nThe course is organized around these components:\n\nThe lectures that will introduce data structures topics at the conceptual level;\nThe labs in which students will (in pairs) practice using and building data structures; and\nThe projects in which students will (individually) practice using and building data structures.\n\nEach week’s lectures, labs and projects will cover the same concepts, but will do so in different ways.\nThe first 4 weeks will be dedicated to learning C++. After that, we will begin studying data structures."
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Welcome to CS112 - Data Structures",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis website is built with Quarto, the lovely icons by icons8. The original code used to build this website can be found at DS Box. We are very grateful for their work!"
  },
  {
    "objectID": "projects/proj02.html",
    "href": "projects/proj02.html",
    "title": "Project 02: Falling Sand Simulator",
    "section": "",
    "text": "Falling AI Sand."
  },
  {
    "objectID": "projects/proj02.html#step-0.-prepare",
    "href": "projects/proj02.html#step-0.-prepare",
    "title": "Project 02: Falling Sand Simulator",
    "section": "Step 0. Prepare",
    "text": "Step 0. Prepare\n\nClick the link and then “Accept this assignment”.\nWait a few seconds and refresh the page. Refresh until the page says “You’re ready to go!”. The page has a link to a github repo.\nClick the link to see your new repo on github.com.\nClick the green Code button and copy the SSH link it shows.\nIn a terminal,\n\ncd to the directory where you are putting all your CS112 assignments.\ntype git clone &lt;paste-the-contents-of-the-link-you-copied&gt;\n\ncd to the new directory containing your repo.\ntype code . to start up Visual Studio Code in that directory.\nInspect the code you got in the assignment.\nIn the terminal, type make\nThe code should compile and give you an executable called FallingSand.\nRun the program: type\n\n./FallingSand &lt;YourBridgesName&gt; &lt;YourBridgesId&gt;"
  },
  {
    "objectID": "projects/proj02.html#step-0.1.-setting-up-your-bridges-account",
    "href": "projects/proj02.html#step-0.1.-setting-up-your-bridges-account",
    "title": "Project 02: Falling Sand Simulator",
    "section": "Step 0.1. Setting Up Your Bridges Account",
    "text": "Step 0.1. Setting Up Your Bridges Account\nYou will need to make yourself a Bridges Account here.\nPlease use your Calvin information, and do fill in the optional fields correctly. Use “CS 112” as the Course number.\n\n\n\n\n\n\nWarning\n\n\n\nNOTE NOTE NOTE: you will not be able to build your program on your own machine unless you download and install the Bridges libraries and include (header) files correctly. DO NOT ask Prof. Norman or Prof. Araújo to help you do that. Instead, just use the machines in the lab!\n\n\nTo get your username and id, login to the bridges project, and go to the Profile page where you will see your “User Name” and “API Sha1 Key”. That second thing is your unique id."
  },
  {
    "objectID": "projects/proj02.html#step-0.2.-instructions",
    "href": "projects/proj02.html#step-0.2.-instructions",
    "title": "Project 02: Falling Sand Simulator",
    "section": "Step 0.2. Instructions",
    "text": "Step 0.2. Instructions\nIn this simulation, you can move your cursor around a two-dimensional “board” and create or delete one of 3 different “elements” – a square of sand, a drop of water, or a block of metal. Here is what happens when each element is created:\n\nMetal: it sticks to the board where you place it.\nSand: it falls down the board, stacking up on Metal or other Sand, or on the bottom. If Sand encounters water below it, the two switch places, so that it seems the sand is falling through the water.\nWater: it falls down the board and fills in any “cups” created by Metal or Sand, or resting on the bottom. If it encounters Metal, Sand, or Water below it, and there is nothing to the left or right of it, it moves sideways left or right, randomly. This makes the water flow around obstacles.\n\n\nIn the image above you can see how Sand stacks on top of Sand and Metal. The Water will fill in any area that is a “cup”. If one were to move the Cursor (the 6-point star) over above the Water that is in the cup in the middle and drop a Sand, it would slide down the board, falling through the Water, leaving a Water up above the level of the Sand. The Water would then randomly move back and forth until falling down to the bottom.\nThe user interface for the “game” is a little strange, IMO. You use arrow keys to move the cursor around – this should all work. Then, you choose W, A, S, or D to choose whether you are in Water mode, Metal mode, Sand mode, or Delete mode. When you hit the space bar, a Water, Metal, or Sand is created, or whatever the cursor on is deleted, if in Delete mode.\nNote that if you move the Cursor on top of a Metal and go into Sand mode, you can replace a metal with a sand – a little strange, but don’t worry about that – it isn’t a bug."
  },
  {
    "objectID": "projects/proj02.html#step-1.-what-you-need-to-do",
    "href": "projects/proj02.html#step-1.-what-you-need-to-do",
    "title": "Project 02: Falling Sand Simulator",
    "section": "Step 1. What you need to do",
    "text": "Step 1. What you need to do\nLook at the code in the file FallingSand.cpp and search for the word TODO. You need to follow the instructions and implement code below each TODO comment. There are 5 places where you have to implement the code.\n\n\n\n\n\n\nSTRONG HINT\n\n\n\nImplement one TODO, and then see if you can compile, run, and connect to the online server. If you can and what you implemented seems correct, then repeat these steps. Do NOT implement too much before trying your code with the online server. If you do that and something is wrong, you don’t know where the problem is.\n\n\nIn each place, you’ll get practice with looping over a 2-dimensional grid, using the switch statement, using many if statements, and calling functions from the Bridges API. For those API calls, there are other examples in the code already which you should refer to."
  },
  {
    "objectID": "projects/proj02.html#submit",
    "href": "projects/proj02.html#submit",
    "title": "Project 02: Falling Sand Simulator",
    "section": "Submit",
    "text": "Submit\nIn VS Code, click on the Source Control icon on the upper left and type in a commit message, then click the checkmark icon to submit your code. Go through the various pop-up boxes to commit and sync your changes to your repo.\n\n\n\n\n\n\nWarning\n\n\n\nVerify you have synced your code to github by going to your online repo webpage and looking to see that the files are correct."
  },
  {
    "objectID": "projects/proj02.html#grading-rubric",
    "href": "projects/proj02.html#grading-rubric",
    "title": "Project 02: Falling Sand Simulator",
    "section": "Grading Rubric",
    "text": "Grading Rubric\nThis project is worth 20 pts:\n\n15 points for generating a correct Falling Sand Simulator.\n5 points for clean, neat, well-indented code, with good variable names, etc.\nThe project is due at midnight next Monday. You will receive a 10% per day penalty for lateness."
  },
  {
    "objectID": "projects/proj01.html",
    "href": "projects/proj01.html",
    "title": "Project 01: More Control Structures",
    "section": "",
    "text": "Prime Numbers."
  },
  {
    "objectID": "projects/proj01.html#objectives",
    "href": "projects/proj01.html#objectives",
    "title": "Project 01: More Control Structures",
    "section": "Objectives:",
    "text": "Objectives:\n\nPractice using for loops, while loops, and if statements.\nPractice creating functions and passing parameters.\nPractice writing unit tests."
  },
  {
    "objectID": "projects/proj01.html#step-0.-prepare",
    "href": "projects/proj01.html#step-0.-prepare",
    "title": "Project 01: More Control Structures",
    "section": "Step 0. Prepare",
    "text": "Step 0. Prepare\n\nClick this link and then “Accept this assignment”.\nWait a few seconds and refresh the page. Refresh until the page says “You’re ready to go!”. The page has a link to a github repo.\nClick the link to see your new repo on github.com.\nClick the green Code button and copy the SSH link it shows.\nIn a terminal,\n\ncd to the directory where you are putting all your CS112 assignments.\ntype git clone &lt;paste-the-contents-of-the-link-you-copied&gt;\n\ncd to the new directory containing your repo.\ntype code . to start up Visual Studio Code in that directory.\nInspect the code you got in the assignment."
  },
  {
    "objectID": "projects/proj01.html#step-1.-function-practice-1",
    "href": "projects/proj01.html#step-1.-function-practice-1",
    "title": "Project 01: More Control Structures",
    "section": "Step 1. function practice, 1",
    "text": "Step 1. function practice, 1\nIn utils.h, create a function prototype called constrain() that has 3 parameters:\n\nvalue, a double\nlow, a double\nhigh, a double\n\nconstrain() returns a double, which is the value constrained by low and high. I.e., if the value is greater than high then, return high. If it is less than low, return low. Else, return the value itself unchanged. Remember, in utils.h you are writing just the prototype.\nNow, in utils.cpp, implement the function.\nIn tests.cpp, in the TEST_CASE(\"step1\"), add more REQUIRES() function calls to test that your function is correct in all cases. We have provided one test there already.\nCompile using make. Then, run like this:\n./tester step1\nWhen you pass the test, Commit and Sync your code to github (use a Message like “step 1 done”) and check that the autograding test for step1 passes. (It should, as all it does is run ./tester step1.) (Tests for the other steps will pass, because the test cases are currently empty.)"
  },
  {
    "objectID": "projects/proj01.html#step-2.-function-practice-2",
    "href": "projects/proj01.html#step-2.-function-practice-2",
    "title": "Project 01: More Control Structures",
    "section": "Step 2. function practice, 2",
    "text": "Step 2. function practice, 2\nNow, make a second function in utils.h and utils.cpp, constrain2(), which is the same as constrain(), but has the default value of \\(0.0\\) for the low parameter, and the default of \\(100.0\\) for the high parameter. Uncomment the test case in step2 and then add more REQUIRE tests to make sure these default arguments work correctly.\nWhen you have your code completed (and perfectly indented!), compile and run:\n./tester step2\nCommit and Sync your code to github.\n\n\n\n\n\n\nNote\n\n\n\nThe autograding tests should now pass “step1” and “step2”. (Tests for the other steps will pass, because the test cases are currently empty.)"
  },
  {
    "objectID": "projects/proj01.html#step-3.-compute-prime-numbers",
    "href": "projects/proj01.html#step-3.-compute-prime-numbers",
    "title": "Project 01: More Control Structures",
    "section": "Step 3. Compute prime numbers",
    "text": "Step 3. Compute prime numbers\nWrite a function prototype isPrime() in the primes.h file. The function takes an unsigned integer and returns a boolean.\nFor the implementation in the .cpp file, isPrime() returns true if the value is a prime number (and false otherwise). Here is the pseudo-code:\nA prime number is a number that is evenly divisible by only itself and 1. That is,\n  for each integer \"divisor\" value from 2 through n / 2,\n    if you divide the number by that divisor, and the remainder is 0, \n          that number is not prime -- return false.\n  if you get through all possible divisors, the number is prime: return true.\nNote that 1 is not a prime (for some reason). 2 is the first prime. Your code may have to handle this case specially (my code does).\nAdd code to the “step3” TEST_CASE in the tests.cpp file to test isPrime().\nMake sure you test if 4 is a prime (it isn’t). Write other REQUIRE() calls to test other values.\nWhen you are satisfied that your code is complete, Commit and Sync it to github and check that the “step3” test succeeds."
  },
  {
    "objectID": "projects/proj01.html#step-4.-collecting-prime-numbers",
    "href": "projects/proj01.html#step-4.-collecting-prime-numbers",
    "title": "Project 01: More Control Structures",
    "section": "Step 4. Collecting prime numbers",
    "text": "Step 4. Collecting prime numbers\nIn your primes.h and primes.cpp files, create a function that:\n\nis called findNPrimes() that returns void\ntakes as a parameter an array of unsigned called primes\ntakes as a parameter an unsigned called size that is the size of the array\ncomputes the first size prime numbers, putting them into the array (of course, the code calls isPrime() to do the hard work)\n\n\n\n\n\n\n\nNote\n\n\n\nNote that this is a little tricky – if the size of the array is 100, do you loop up to 1000 to find the first 100 primes? Or 2000? You don’t know… So, use a while loop that keeps looping as long as the array is not full.\n\n\nIn tests.cpp in the “step4” TEST_CASE, write code to define an array of a certain size, call the function, and then REQUIRE that various correct values are in the array at the correct indices. You might find it useful to know that the 100th prime is 541.\nWhen you are satisfied that your code is complete, Commit and Sync it to github and check that the “step4” test succeeds.\nAt this point, all autograding tests should pass. You are done!\n\n\n\n\n\n\nOPTIONAL:\n\n\n\nFor fun, create an array of 100000 and fill it with primes. See how long it takes to compute and print out the last prime.\nYou can get the exact run time by running your project this way:\ntime ./tester \"step4\""
  },
  {
    "objectID": "projects/proj01.html#grading-rubric",
    "href": "projects/proj01.html#grading-rubric",
    "title": "Project 01: More Control Structures",
    "section": "Grading Rubric",
    "text": "Grading Rubric\nThis project is worth 20 pts:\n\n3 points for each of steps 1 and 2 (6 pts total)\n2 pts for correctness\n1 pt for thorough tests\n5 points for step 3\n6 points for step 4\n3 pts for code beauty and hospitality.\n\nHere are some ways students lost points in the past:\n\n-6: Missing step 4\n-1: poor indentation\n-1: low and high are supposed to be parameters\n-3: Missing step 2\n-1: tests in step1 are insufficient.\n-1: tests in step2 do not test all cases."
  },
  {
    "objectID": "instructors.html",
    "href": "instructors.html",
    "title": "Instructors",
    "section": "",
    "text": "This course has as instructors: Prof. Victor Norman and Prof. Eric Araújo."
  },
  {
    "objectID": "instructors.html#office-hours",
    "href": "instructors.html#office-hours",
    "title": "Instructors",
    "section": "Office Hours",
    "text": "Office Hours\n\n\nProf. Norman’s hours\nProf. Araújo’s hours"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Attribution-ShareAlike 4.0 International",
    "section": "",
    "text": "Creative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible."
  },
  {
    "objectID": "LICENSE.html#creative-commons-attribution-sharealike-4.0-international-public-license",
    "href": "LICENSE.html#creative-commons-attribution-sharealike-4.0-international-public-license",
    "title": "Attribution-ShareAlike 4.0 International",
    "section": "Creative Commons Attribution-ShareAlike 4.0 International Public License",
    "text": "Creative Commons Attribution-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nA. Offer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\n\n__Additional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\n\nC. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\n\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\n\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\n\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.t stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org"
  },
  {
    "objectID": "labs/lab09.html",
    "href": "labs/lab09.html",
    "title": "Lab 09: Stacks and Exceptions and Queues",
    "section": "",
    "text": "It compiles!"
  },
  {
    "objectID": "labs/lab09.html#objectives",
    "href": "labs/lab09.html#objectives",
    "title": "Lab 09: Stacks and Exceptions and Queues",
    "section": "Objectives:",
    "text": "Objectives:\nIn this exercise, you will:\n\nBuild a dynamically-allocated-array-based Stack class.\nBuild a simple Exception class hierarchy.\nThrow and catch exceptions.\nBuild a Queue class that uses a linked list."
  },
  {
    "objectID": "labs/lab09.html#introduction",
    "href": "labs/lab09.html#introduction",
    "title": "Lab 09: Stacks and Exceptions and Queues",
    "section": "Introduction",
    "text": "Introduction\nToday’s exercise has two parts:\n\nIn Part I, we will build a simple Stack class that stores its items in a fixed-size, dynamically-allocated array.\nIn Part II, we will see how to define, throw, catch, and handle exceptions.\nIn Part III, we will build a simple Queue class that stores its items in a linked list."
  },
  {
    "objectID": "labs/lab09.html#getting-started",
    "href": "labs/lab09.html#getting-started",
    "title": "Lab 09: Stacks and Exceptions and Queues",
    "section": "Getting Started",
    "text": "Getting Started\nAccept the invitation to the lab and do git clone to get the files, as usual. Make sure your partner is part of the same Team and edit the README.md file and share your repo on github.com"
  },
  {
    "objectID": "labs/lab09.html#part-i-the-stack-class",
    "href": "labs/lab09.html#part-i-the-stack-class",
    "title": "Lab 09: Stacks and Exceptions and Queues",
    "section": "Part I: The Stack Class",
    "text": "Part I: The Stack Class\nAs you can see, this Stack class contains three instance variables:\n   unsigned myCapacity;\n   unsigned mySize;\n   Item*    myArray;\nWe will be storing the address of a dynamically allocated array in myArray. We will be storing the length of that array in myCapacity, and in mySize, we will be storing the number of items in the array. As we shall see, this value will correspond to the index of the spot in that array where the next Item that we push() will be stored.\nAs we have seen in class, the primary Stack operations are:\n\nbool isEmpty(), that returns true if and only if the Stack contains no items;\nbool isFull(), that returns true if and only if the Stack has no room for more items;\nvoid push(Item it), that places it on top of the Stack;\nItem peekTop(), that returns the top item from the Stack (without modifying the Stack); and\nItem pop(), that removes and returns the top item from the Stack.\n\nTo let you focus on these Stack operations, the Stack class already contains prototypes and definitions for:\n\nan explicit-value constructor;\na copy constructor;\na destructor; and\nan assignment operator.\n\nTake a few minutes to look these over. Look carefully at the explicit-value constructor, and note the initial values each member is given. We might visualize the Stack objects it constructs as follows:\n\nTake a minute to look over tests.cpp to see the tests it contains. Note that part of the test is commented out. Leave this part commented out for now; we will be uncommenting it in Part II.\nBuild the project (make all) and run tester (./tester). Verify that everything works correctly at the outset.\n\nThe isEmpty() Method\nOur explicit constructor gives us the ability to define Stack objects with a given capacity. Since these Stack objects are initially empty (i.e., they contain no items), the first operation we will build is the isEmpty() method.\nIn tests.cpp, uncomment the TEST_CASE that tests isEmpty(). Compile and run the test. You should see an error message indicating that isEmpty() does not exist.\nIn Stack.h, add a prototype for isEmpty() to the class. Recompile and rerun. You should now see a linking error, since isEmpty() has been prototyped but not defined.\nIn Stack.cpp, add a definition for isEmpty() that will pass the tests. This definition should be as simple as possible (e.g., a single line). If you get stuck, here is a hint, but don’t use it unless you have to.\nRecompile and rerun your test. Continue when you pass the test.\n\n\nThe push(), peekTop(), and isFull() Methods\nThe other operations only work correctly on a non-empty Stack, so before we can test them, we need to be able to add items to a Stack. Since the push() method allows us to add items to a Stack, we will build that method; and since pushing items onto a stack can fill it, we will also build the isFull() and peekTop() methods.\nIn tests.cpp, uncomment the TEST_CASE that tests testPushPeekTopAndIsFull(). Take a moment to look over the tests it contains. The first test constructs a stack with capacity 1 and pushes an item onto it. We might visualize this stack as follows:\n\nThe second test constructs a stack with capacity 3 and pushes an item onto it. We might visualize this stack as follows:\n\nThe test then pushes a second item onto the stack:\n\nThe test then pushes a third item onto the stack, filling it:\n\nCompile and run the test. You should see error messages indicating that push(), peekTop(), and isFull() do not exist.\nIn Stack.h, add a prototype for isFull() to the class. Recompile. Next, add a prototype for peekTop() to the class. Recompile. You should now see just the error for push(). Add a prototype for push(); then recompile. You should now get only linking errors, since isFull(), peekTop(), and push() have been declared in Stack.h but not defined.\nIn Stack.cpp, add a definition for isFull(). This definition should be as simple as possible (e.g., a single line).\nSave/compile, and verify that the linking error for isFull() goes away. (The errors for peekTop() and push() should still be there.)\nDefine the peekTop() method. Save/recompile, and verify that what you have written compiles without errors. (You should still see a linking error for push().) Note that you do not have to handle the case (now) when you try to peekTop() on an empty Stack.\nDefine the push() method. Save/recompile, and verify that what you have written compiles and links without errors. (Again, do not worry about exceptional cases, yet.)\nRun the tests. If you pass the tests, congratulations! If not, use the diagrams above to go back and fix your push(), peekTop(), and/or isFull() methods. If you get stuck, here are hints for push(), peekTop(), and isFull(), but only use them if you have to.\nContinue when your methods pass all the tests.\n\n\nThe pop() Method\nOur sole remaining operation is the pop() method, that removes and returns the top value from the Stack.\nIn tests.cpp, uncomment the TEST_CASE for testPop(). Compile and run the test. You should see an error message indicating that pop() does not exist.\nIn Stack.h, add a prototype for pop() to the class. Recompile and rerun. You should now see a linking error, since pop() has a prototype but no definition.\nIn Stack.cpp, add a definition for pop() that will pass testPop(). For now, this definition should be as simple as possible (e.g., it can be as short as a single line). If you get stuck, here is a hint, but don’t use it unless you have to.\nRecompile and rerun your test. Continue when you pass the test."
  },
  {
    "objectID": "labs/lab09.html#part-ii-exceptions",
    "href": "labs/lab09.html#part-ii-exceptions",
    "title": "Lab 09: Stacks and Exceptions and Queues",
    "section": "Part II: Exceptions",
    "text": "Part II: Exceptions\nWe now have a working Stack class, but it is lacking any error-handling capability. For example, what happens if a person pops an empty stack, or pushes an item onto a full stack? In Part II of today’s exercise, we introduce C++’s programmer-defined exception mechanism, which provides a graceful way of handling such problems.\nAs we have seen with the C++ standard exceptions, an exception is an out-of-the-ordinary occurrence. The C++ standard exception classes in &lt;stdexcept&gt; are necessarily very general, describing broad categories of things that might go wrong. When you want to more precisely indicate what is going wrong, C++ lets us create our own exception classes.\nIn C++, a method that wants to indicate that something exceptional has occurred can throw an exception object back to the caller of the method. The pattern for the throw statement is:\nthrow ExceptionType(arguments);\nThis constructs an exception object of type ExceptionType and throws it to the caller – the subprogram that invoked the currently running method, terminating that method.\nBack in the caller, the call to that method can be “wrapped” in a try-catch block, whose form is as follows:\ntry {\n  // risky code -- might throw an exception\n} catch (const ExceptionType & exceptionParameter) {\n  // handler code -- to be executed if the exception occurs\n}\nThe try block tries to perform the “risky code”. If that code works without throwing the exception, control skips past the catch block to whatever follows it. But if the “risky code” throws the exception named in the catch, then control is transferred to the “handler” code in the catch block, which does whatever is appropriate.\nNote that since ExceptionType is pretty much always a class, it is preferable to define the catch block’s parameter as a const-reference parameter. This has two advantages over using a value parameter: (i) it avoids the copying associated with a value parameter, and (ii) it lets this catch block catch exceptions of this exception-class or any subclasses derived from that class. We make it a const reference (i.e., read-only reference) parameter because the catch block should not make any changes to that parameter.\n\nCatching Exceptions\nIn tests.cpp, uncomment the following line in TEST_CASE \"testPop()\":\n        REQUIRE_THROWS_AS(s1.peekTop(), StackException);\nThis block tries to send the peekTop() message to an empty stack, and then catches the exception that should be thrown.\nSave/recompile your project. You should get several errors, because StackException has not been defined. Verify that that is the cause of your errors, then continue.\n\n\nThe StackException Class\nOne way to provide exceptions for our Stack class is to define a separate StackException class that our Stack class can use when something goes wrong. Inspect the file StackException.h which contains such a class.\nThe class has two instance variables:\n\nmyLocation, to which a method can pass its name (to indicate the exact method in which something went wrong); and\nmyMessage, to which a method can pass a description of what is wrong.\n\nThe StackException constructor initializes these members using values it receives through its parameters. For example, if at the beginning of the pop() method, we find that the stack is empty, we can build an exception like this:\n   StackException(\"pop()\", \"stack is empty\")\n(don’t do this yet in your code)\nIf at the beginning of the the push() method, we find that the stack is full, we can build an exception like this:\n   StackException(\"push()\", \"stack is full\")\nThe asString() method generates a string representation of these values, accompanied by some descriptive labels.\nAt the bottom of StackException.h, there is a definition of operator&lt;&lt; that lets us output a StackException using the usual C++ stream-insertion operator.\nAt the beginning of Stack.h, uncomment the #include directive that includes StackException.h.\nAfter making these changes, save/recompile your project. If all is well, your project should compile correctly (but not run correctly yet). If not, find and correct the syntax error(s).\nWhen your project compiles correctly, run it. You should see an execution halt in the \"testPop()\" test case. The problem is that our testPop() method now expects a StackException to be thrown when we send the peekTop() message to an empty Stack. Continue, and we will see how to accomplish this.\n\n\nThrowing Exceptions\nNow that we have created a StackException class by which we can precisely describe unusual circumstances, we can use that class in our Stack methods. As mentioned previously, a method that detects a problematic circumstance can throw an exception. For example, if the stack is empty, there is no top item for the peekTop() method to return, in which case we might make it throw a StackException, as follows:\nItem Stack::peekTop() const {\n    if (isEmpty()) {\n        throw StackException(\"peekTop()\", \"stack is empty\");\n    } \n    return myArray[mySize - 1];\n  }\nMake the changes seen above. Recompile and rerun your project. With these changes, what you have written should pass all the tests. Continue when it does so.\n\n\nThe Explicit-Value Constructor\nUncomment the REQUIRES_THROWS_AS code in the “constructors” test case. Then save/compile your project. Run it, and verify that it fails.\nUsing what we did with peekTop() as a model, modify the Stack constructor so that if capacity is not a positive number, the constructor throws a StackException with the message Stack(capacity): capacity must be positive!.\nContinue when your project passes all tests.\n\n\nThe pop() Method\nUncomment all the rest of the REQUIRES_THROWS_AS tests in the “testPop()” test case. Then save/compile your project. Run it, and verify that it fails.\nUsing what we did with peekTop() as a model, modify pop() so that it throws a StackException with the message pop(): stack is empty!. In case you get stuck, here is a hint, but don’t use it unless you need to. Continue when your project passes all tests.\n\n\nThe push() Method\nOur final operation is the push() operation. Uncomment the REQUIRE_THROWS_AS tests “testPushPeekTopAndIsFull()”. Then save/recompile, and verify that your project no longer passes the test.\nUsing what we did previously as a model, modify push() so that it throws a StackException with the message push(): stack is full!. In case you get stuck, here is a hint, but don’t use it unless you need to.\nContinue when your project passes all tests.\n\n\nThe Other Operations\nNow that you have tested the stack operations, uncomment the remaining test cases and verify that the other Stack operations pass their tests. (I see 57 assertions in 6 test cases that pass.)\nCongratulations! You now have a full-featured (array-based) Stack class at your disposal!"
  },
  {
    "objectID": "labs/lab09.html#part-iii-queue-using-a-linked-list",
    "href": "labs/lab09.html#part-iii-queue-using-a-linked-list",
    "title": "Lab 09: Stacks and Exceptions and Queues",
    "section": "Part III: Queue, using a Linked List",
    "text": "Part III: Queue, using a Linked List\nWe have talked about the best way to implement a Queue using a linked list – insert at the tail of the queue and remove from the front of the queue. And, you have code from Lab 6 in which you implemented and tested a linked list – so you shouldn’t have to do too much to adapt that code to represent the Queue ADT.\nLook at the Queue.h and Queue.cpp files in the repository. The methods are there, but they are all empty. Now, go find your code from Lab 6, and fill in the methods, copying (and adapting) code from there. This shouldn’t take long. The only code you may have to implement is the remove() code – which removes the item from the front of the linked list.\nYou may wonder why we have a isFull() method that will always return false when we implement the queue using a linked list. Why even have it? The answer is that the user of the Queue does not know how the Queue is implemented, so they don’t know that the Queue can never be full.\nYou do NOT have to add any more methods (the linked list implementation has many more methods available, but the Queue has fewer, as it should).\n\n\n\n\n\n\nCaution\n\n\n\nTo compile the Queue .h and .cpp files, you have to edit the makefile:\nChange one line – line 4 – by adding Queue.cpp to the end so that the line now reads:\nSOURCES = Stack.cpp Queue.cpp\n\n\nNow try compiling. You will see many warnings because the methods have not been implemented yet.\nNOTE that you do NOT have to templatize the Queue code – unless you want to.\nThe biggest part of this assignment is to write a full set of TEST_CASES in tests.cpp. You should consult Lab 6’s tests and the tests already in tests.cpp for the Stack implementation.\n\n\n\n\n\n\nNote\n\n\n\nDo not create a test case for the destructor – it can fail randomly (as it did for me).\n\n\nWhen you have implemented and thoroughly tested your Queue implementation, you are done."
  },
  {
    "objectID": "labs/lab09.html#turn-in",
    "href": "labs/lab09.html#turn-in",
    "title": "Lab 09: Stacks and Exceptions and Queues",
    "section": "Turn In",
    "text": "Turn In\nDon’t forget to commit and push your changes."
  },
  {
    "objectID": "labs/lab09.html#grading-rubric",
    "href": "labs/lab09.html#grading-rubric",
    "title": "Lab 09: Stacks and Exceptions and Queues",
    "section": "Grading Rubric",
    "text": "Grading Rubric\n20 pts total:\n\n1: isEmpty() is correct\n1: isFull() is correct\n2: peekTop()\n2: push()\n2: pop()\n2: peekTop(), explicit-value constructor, pop(), and push() all throw an exception correctly.\n8: thorough tests for Queue class.\n2: code is hospitable (perfectly indented, etc.)\n\nWays students lost points in the past:\n\n-4: missing tests for Queue\n-4: missing implementation for Queue\n-2: Your Queue::remove deletes the whole Queue, and the test did not catch this\n-7: Queue does not compile and no tests for it.\n-3: Queue::peekBack, ::peekFront, ::add, ::remove, ::isEmpty, and ::Queue to a “myList” field, which does not exist. Missing implementation for destructor\n-1: Missing test for Queue::remove\n-1: Need to decrease size in Queue::remove\n-2: Queue::add does not properly keep list linked, and tests do not catch this (try an add followed by a remove followed by a check–it won’t work)"
  },
  {
    "objectID": "labs/lab09-hint-pop.html",
    "href": "labs/lab09-hint-pop.html",
    "title": "Lab 09: Hint pop()",
    "section": "",
    "text": "The stub of pop() should look like this:\nItem Stack::pop() {\n}\nBecause pop() is basically the complement of push(), and the index of the top item is 1 position “down” from mySize, the pop() method should behave as follows:\n\nSubtract 1 from mySize.\nReturn the entry of myArray whose index is mySize."
  },
  {
    "objectID": "labs/lab11-hint.html",
    "href": "labs/lab11-hint.html",
    "title": "Lab 11: Hint",
    "section": "",
    "text": "The stub of BST::insert() should look like this:\nvoid BST::insert(const Item& item) {\n\n }"
  },
  {
    "objectID": "labs/lab11-hint.html#declaring-bstinsert",
    "href": "labs/lab11-hint.html#declaring-bstinsert",
    "title": "Lab 11: Hint",
    "section": "",
    "text": "The stub of BST::insert() should look like this:\nvoid BST::insert(const Item& item) {\n\n }"
  },
  {
    "objectID": "labs/lab11-hint.html#defining-bstinsert",
    "href": "labs/lab11-hint.html#defining-bstinsert",
    "title": "Lab 11: Hint",
    "section": "Defining BST::insert()",
    "text": "Defining BST::insert()\nThe BST::insert(item) method needs to distinguish between the two cases (empty and non-empty):\n\nIf the BST is empty:\n\nCreate a new node containing item and store that node’s address in myRoot.\n\nOtherwise (there is at least one node):\n\n“Pass the buck” to the root node by invoking Node::insert(item) on the node whose address is in myRoot.\nAny exception it throws will be sent back to the calling insert() message.\n\nIn either case (when no exception was thrown), increment myNumItems."
  },
  {
    "objectID": "labs/lab11-hint.html#designing-nodeinsert",
    "href": "labs/lab11-hint.html#designing-nodeinsert",
    "title": "Lab 11: Hint",
    "section": "Designing Node::insert()",
    "text": "Designing Node::insert()\nSince a Node is recursively defined, we might define Node::insert(item) as a recursive method. One way to design a recursive algorithm for this method is as follows:\nBasis. There are three trivial cases:\n\nIf item belongs in my left subtree and my left subtree is empty:\n\nMake my left subtree a new node containing item.\n\nIf item belongs in my right subtree and my right subtree is empty:\n\nMake my right subtree a new node containing item.\n\nIf item does not belong in our left or right subtrees (i.e., its value is the same as myItem):\n\nWe will treat our BST like a mathematical set (which has no redundant elements) and throw an exception to alert the user that they have inserted the same Item more than once.\n\n\nInduction Step. Again, there are two cases:\n\nIf item belongs in my left subtree and my left subtree is not empty:\n\n“Pass the buck” to the node in my left subtree by asking it to insert item.\n\nIf item belongs in my right subtree and my right subtree is not empty:\n\n“Pass the buck” to the node in my right subtree by asking it to insert item."
  },
  {
    "objectID": "labs/lab11-hint.html#defining-nodeinsert",
    "href": "labs/lab11-hint.html#defining-nodeinsert",
    "title": "Lab 11: Hint",
    "section": "Defining Node::insert()",
    "text": "Defining Node::insert()\nThese observations can then be reorganized into the following algorithm for our Node::insert() method:\n\nIf item is less than myItem:\n\nIf myLeft is nullptr:\n\nSet myLeft to the address of a new node containing item.\n\nOtherwise:\n\n“Pass the buck” by recursively calling myLeft-&gt;insert(item).\n\n\nOtherwise, if item is greater than myItem:\n\nIf myRight is nullptr:\n\nSet myRight to the address of a new node containing item.\n\nOtherwise:\n\n“Pass the buck” by recursively calling myRight-&gt;insert(item).\n\n\nOtherwise (item must be equal to myItem):\n\nthrow an Exception indicating that item is already in the BST."
  },
  {
    "objectID": "labs/lab09-hint-pop2.html",
    "href": "labs/lab09-hint-pop2.html",
    "title": "Lab 09: Hint pop() 2",
    "section": "",
    "text": "To throw an exception when the stack is empty, the pop() method should behave as follows:\nIf I am empty {\n    throw a StackException whose method is \"pop()\" and whose message is \"stack is empty\".\n} \na. Subtract 1 from mySize.\nb. Return the entry of myArray whose index is mySize."
  },
  {
    "objectID": "labs/lab13.html",
    "href": "labs/lab13.html",
    "title": "Lab 13: The STL set and map Containers",
    "section": "",
    "text": "Independence Day (1996)."
  },
  {
    "objectID": "labs/lab13.html#objectives",
    "href": "labs/lab13.html#objectives",
    "title": "Lab 13: The STL set and map Containers",
    "section": "Objectives",
    "text": "Objectives\nIn this exercise, you will:\n\nUse the STL set container to store a set of values.\nUse the STL map container to create an associative array whose keys are string values, and whose values are sets of strings.\nUse iterators to access the items in these containers."
  },
  {
    "objectID": "labs/lab13.html#introduction",
    "href": "labs/lab13.html#introduction",
    "title": "Lab 13: The STL set and map Containers",
    "section": "Introduction",
    "text": "Introduction\nThis lab/project has you creating a simple database of movies and the actors in the movies. Then the user of the program can choose to:\n\nShow all movies\nShow all actors in a movie\nShow all movies an actor was in.\nThe main data structure you’ll create is an STL map that maps:\n\nmovie name → set of actors in the movie.\nThis is a complex data structure: each entry in the map contains a set (Thus, we’ll have a binary search tree of binary search trees).\nWe’ll use the Bridges database of movie information. When you get the information from the Bridges API, you get a vector of objects of type MovieActorWikidata. Each object contains a movie and an actor in the movie (among other things). If you printed out those two things from MovieActorWikidata objects, you might see these values.\nMovie: Young at Heart         Actor: Alan Hale, Jr.\nMovie: Wichita                Actor: Carl Benton Reid\nMovie: We're No Angels        Actor: Aldo Ray\nMovie: Young at Heart         Actor: Doris Day\nMovie: Wichita                Actor: Joel McCrea\netc...\nThus, you see that the objects are not in any order, and do not have all the actors in a movie in each object. To get all actors for a movie, you’ll have to iterate over all the elements of the vector and learn 1) all the movies, and 2) all the actors in the movies.\nNote that sometimes an actor is listed multiple times for a movie. But, because we are using an STL set, it automatically handles attempts to insert an element multiple times."
  },
  {
    "objectID": "labs/lab13.html#menu",
    "href": "labs/lab13.html#menu",
    "title": "Lab 13: The STL set and map Containers",
    "section": "Menu",
    "text": "Menu\nThe application presents a menu from which the user can select the operation s/he wishes to perform. To validate a user’s menu-choice, our project uses a tree-based data structure – the STL set. For example, if the valid menu choices are a, b, c, d, e, f, and q, and we store these choices in a set named myValidChoices, then we might (simplistically) visualize this set as follows:\n\nTo determine whether or not a character is present in this set, the STL find(value) method does a binary search down through this tree until it either locates value, or reaches the bottom of the tree. It should be evident that the maximum time to search is O(lg(n)), where n is the number of items in the set.\nThe exercise will provide you with a “skeleton” application, which you will then complete by adding additional functionality."
  },
  {
    "objectID": "labs/lab13.html#getting-started",
    "href": "labs/lab13.html#getting-started",
    "title": "Lab 13: The STL set and map Containers",
    "section": "Getting Started",
    "text": "Getting Started\nAccept the invitation from github classroom and use git clone, as usual. Make sure you and your partner are in the same Team.\nEdit the README.md file to add both your names and your partner’s."
  },
  {
    "objectID": "labs/lab13.html#part-i.-the-menu-class",
    "href": "labs/lab13.html#part-i.-the-menu-class",
    "title": "Lab 13: The STL set and map Containers",
    "section": "Part I. The Menu Class",
    "text": "Part I. The Menu Class\nWhen dealing with menu-driven systems, one thing that can go wrong is if the user enters an invalid choice – something that is not on the menu. When this happens, the program must detect it and take remedial action.\nOne way to detect such a problem is to build a Menu class that, besides “remembering” its menu, “remembers” its set of valid menu choices. Then when the user enters a choice, we can validate their choice by checking whether or not their choice is an element of that set.\nAs you can see, our Menu class contains two instance variables: a string storing the menu, and a set to store those menu choices that are valid:\nstring myValue;             // the menu that is displayed\nset&lt;char&gt; myValidChoices;   // the valid menu choices\nSave/compile your project, and verify that everything compiles without errors.\n\nThe Menu Constructor\nThe Menu constructor currently initializes our myValue member; it must also initialize myValidChoices so that it stores the valid menu choices. To do so, we can use the insert() method:\nsetVariable.insert(value);\nthat inserts a single value into a set.\nIn Menu.cpp, add insert() calls to make myValidChoices represent the set {‘a’, ‘b’, ‘c’, ‘q’}.\n\n\nThe Menu::containsChoice() Method\nTo let a program conveniently check whether or not a given character is a valid menu choice, the Menu class provides a boolean method containsChoice(choice) that returns true if and only if choice is a valid menu choice. Currently, this method is a stub-definition that returns false. Your next task is to revise this stub so that it returns true if and only if choice is in the set myValidChoices.\nWe can accomplish this using the find() method.\nSave/compile your project, and when it is free of compilation errors, run the program. When it is free of errors, go on.\nWhen you run your program, you will need to provide your Bridges UserName and Id on the command line: e.g.,\n./movies CS112StudentUsingBridges 123555666"
  },
  {
    "objectID": "labs/lab13.html#part-ii.-the-app-class",
    "href": "labs/lab13.html#part-ii.-the-app-class",
    "title": "Lab 13: The STL set and map Containers",
    "section": "Part II. The App Class",
    "text": "Part II. The App Class\nThe file App.h contains the declaration of class App. This class uses an STL map to store (movieName, set of actors) pairs:\nmap&lt;string, set&lt;string&gt;&gt; movies_by_name;   // key is movie name; value is set of actors' names.\nNote that the code actually reads like this:\ndb_type movies_by_name;\nIn order to not have to type map&lt;string, set&lt;string&gt;&gt; too often, I created two typedefs at the top of App.h:\ntypedef map&lt;string, set&lt;string&gt;&gt; db_type;\ntypedef map&lt;string, set&lt;string&gt;&gt;::iterator db_iter;\nNow, the code can use db_type and db_iter instead of map&lt;string, set&lt;string&gt;&gt; and map&lt;string, set&lt;string&gt;&gt;::iterator, respectively. So much easier to type!\n\nConstructor\nThe App constructor has been defined for you. It takes a vector of MovieActorWikidata entries as a parameter.\nThe constructor code contains the algorithm you should implement to process these entries, building up entries in the movies_by_name map.\nIf you use the hint I gave in class about how accessing a map with [ ] will either create a new entry or update it if it already exists, then the body of the for loop is one line. Otherwise, the body is about 9 lines, and is very tricky code.\nWrite the code now. This code will be difficult to test until you implement the next step.\n\n\nShow All Movies Option\nImplement code for showAllMovies(), to iterate through all entries in movies_by_name, and print out the movie name and then iterate through all actors for that movie, printing them out. I’ve indented the actor’s name, so the output is more readable.\nYou might find it very useful to make the inner loop a separate function. I called that function showActorsInAMovie(). It takes an iterator “pointing” to an object from the movies_by_name collection, and iterates over the “second” field (a set), printing each actor in the set. If you implement this function, you’ll find you can use it again below.\nWhen you think your code is correct (for this and the previous step), try loading all movies from 1955 and printing them all out. The first movie should be:\nMovie: 5 Against the House\n        Alvy Moore\n        Brian Keith\n        George Cisar\n        Guy Madison\n        Hugh Sanders\n        Jean Willes\n        John Larch\n        John Zaremba\n        Kathryn Crosby\n        Kerwin Mathews\n        Kim Novak\n        Mark Hanna\n        Robert Sampson\n        William Conrad\nThe last movie you should see should look like this:\nMovie: Young at Heart\n        Alan Hale, Jr.\n        Doris Day\n        Dorothy Malone\n        Elisabeth Fraser\n        Ethel Barrymore\n        Frank Ferguson\n        Frank Sinatra\n        Gig Young\n        Lonny Chapman\n        Robert Keith\n\n\nShow All Actors For a Single Movie Option\nComplete the code in the getMovienameAndShowActors() method. If you created a function to show all actors for a given movie, then you are half done already.\n\n\nShow All Movies For an Actor Option\nFinally, implement this option. Create a set of strings (I called my variable movies_by_actor.) And then go through all movies, looking for that actor. When you find him/her, add the movie to the movies_by_actor. Then, when you are done, print out the set.\nHere is a sample output:\nEnter an actor name to show all movies for that actor: Alfred Hitchcock\nRear Window\nThe Trouble with Harry\nTo Catch a Thief"
  },
  {
    "objectID": "labs/lab13.html#turn-in",
    "href": "labs/lab13.html#turn-in",
    "title": "Lab 13: The STL set and map Containers",
    "section": "Turn In",
    "text": "Turn In\nSubmit your project to github as usual. If you worked with your lab partner on the project, make sure you update README.md to include both of your names/login-ids."
  },
  {
    "objectID": "labs/lab13.html#grading-rubric",
    "href": "labs/lab13.html#grading-rubric",
    "title": "Lab 13: The STL set and map Containers",
    "section": "Grading Rubric",
    "text": "Grading Rubric\n21 points total:\n\nMenu class works: 2 pts.\nApp constructor: 5 pts.\nEach App menu item: 4 pts each: 12 pts.\nHospitable code: code is clean and neat, perfectly indented, with good variable names, etc.: 2 pts.\n\nWays students have lost points in the past:\n\n-2: showAllMovies needs to show the names of each movie’s actors\n-2: getMovieNameAndShowActors implementation is incorrect, the result of movies_by_name.find will return the iterator value you want to pass to showActorsInAMovie, the for loop is unnecessary\n-2: code is very poorly indented\n-2: parameter names are very poorly chosen"
  },
  {
    "objectID": "labs/lab05.html",
    "href": "labs/lab05.html",
    "title": "Lab 05: Generic Containers (Templates)",
    "section": "",
    "text": "In this exercise, you will:\n\nLearn about generic containers.\nConvert a container class into a class template.\n\n\n\n\n\nPrompt: A surreal scene of a data structure visually represented by the beach, specifically a vector. The vector is made of sand or driftwood, extending in a straight line across the beach, symbolizing a one-dimensional array. The nodes or elements of the vector are placed evenly along the shore, with the ocean waves gently lapping at the base of the structure. The sky is clear and bright, with sunlight reflecting off the water. The overall vibe is peaceful, blending the abstract logic of programming with the tranquility of a seaside environment."
  },
  {
    "objectID": "labs/lab05.html#objectives",
    "href": "labs/lab05.html#objectives",
    "title": "Lab 05: Generic Containers (Templates)",
    "section": "",
    "text": "In this exercise, you will:\n\nLearn about generic containers.\nConvert a container class into a class template.\n\n\n\n\n\nPrompt: A surreal scene of a data structure visually represented by the beach, specifically a vector. The vector is made of sand or driftwood, extending in a straight line across the beach, symbolizing a one-dimensional array. The nodes or elements of the vector are placed evenly along the shore, with the ocean waves gently lapping at the base of the structure. The sky is clear and bright, with sunlight reflecting off the water. The overall vibe is peaceful, blending the abstract logic of programming with the tranquility of a seaside environment."
  },
  {
    "objectID": "labs/lab05.html#set-up",
    "href": "labs/lab05.html#set-up",
    "title": "Lab 05: Generic Containers (Templates)",
    "section": "Set up",
    "text": "Set up\n\nClick this link and then “Accept this assignment”.\nWait a few seconds and refresh the page. Refresh until the page says “You’re ready to go!”. The page has a link to a github repo.\nClick the link to see your new repo on github.com.\nClick the green Code button and copy the SSH link it shows.\nIn a terminal,\n\ncd to the directory where you are putting all your CS112 assignments.\ntype git clone &lt;paste-the-contents-of-the-link-you-copied&gt;\n\ncd to the new directory containing your repo.\ntype code . to start up Visual Studio Code in that directory.\nInspect the code you got in the assignment.\nMake sure you and your partner are in the same Team. Edit README.md and put your name and your programming partner’s name in the file."
  },
  {
    "objectID": "labs/lab05.html#part-i",
    "href": "labs/lab05.html#part-i",
    "title": "Lab 05: Generic Containers (Templates)",
    "section": "Part I",
    "text": "Part I\nIn last week’s exercise, we built a simple but useful vector class named Vec, that stored real (i.e., double) values. To make it easy to change the type of items stored in our Vec, we used a typedef of the form:\ntypedef double Item;\nWe then meticulously used the name Item everywhere we would have used the type double. By doing so, a user wanting to use a vector of integers could just modify the typedef:\ntypedef int Item;\nrecompile, and our Vec would be a vector of integers!\nThis approach works fine for simple problems where all of the vectors store the same types of values. However suppose you need vectors of both integer and real items (or some other type of item) in the same program? In this situation, the typedef approach cannot help us – we need a different approach.\nPart I of today’s exercise is to convert our Vec class into a generic container – a container capable of storing any type of item. To do so in C++, we convert the Vec class into a class template. Because we have used the typedef-Item approach to define our Vec class, this conversion is fairly simple.\nThe tests in the provided tests.cpp have not been revised to use a Vec template. You will be changing Vec.h, Vec.cpp, and tests.cpp in today’s exercise.\nAs its name suggests, a class template is a plan or blueprint from which the compiler can build a class. Once we have converted our Vec class into a Vec&lt;Item&gt; template, a user of the class will be able to write:\nVec&lt;int&gt; v1;\nVec&lt;double&gt; v2;\nVec&lt;string&gt; v3;\nGiven these declarations, the C++ compiler will use the Vec&lt;Item&gt; template to build three classes:\n\nA class that is a vector for storing integer values.\nAnother class that is a vector for storing double values.\nAnother class that is a vector for storing string values.\n\nThe compiler will use these behind-the-scenes classes as the types of v1, v2, and v3. For every declaration in which we pass a new type into the template, the compiler will build a new class, and then use that class as the declaration’s type.\nWith that as our introduction, let’s get on with turning our Vec class into a Vec&lt;Item&gt; class template.\n\nStep 1. Converting the Class Declaration\nThe first step in converting a class into a class template is to delete the typedef declaration we used previously – so remove the line defining Item as a double. In its place, we place the phrase template&lt;class Item&gt; immediately before the class declaration:\ntemplate &lt;class Item&gt;\nclass Vec {\n       ...\n};\nDo this now.\nThis revised declaration tells the C++ compiler that\n\nWhat’s coming is a class template, not a class.\nThis template has a single parameter, whose name is Item.\nThe word class before Item indicates that Item represents a type, not a variable or object.\n\nIt is worth mentioning that the name Item is an identifier we have chosen, since it is what we used for our typedef. The words template and class are C++ keywords, they cannot be changed.\nOnce this declaration has been processed, the name of the template is Vec&lt;Item&gt;.\n\n\nStep 2. Eliminating the Implementation File\nBecause the C++ compiler uses a template as a blueprint from which it builds a class, the compiler needs to be able to see the entire class – class declaration plus method definitions – when a program using the template is compiled. This means that the entire class template – template declaration plus method definitions – must appear in the header file, in order for a program that #includes the header file to compile, or linking errors will occur. So our next step is to select the method definitions in the implementation file, cut them, and paste them into the header file, between the template declaration and the #endif.\nIn Vec.cpp, select all of the method definitions, cut them (Ctrl-X or Cmd-X) from the .cpp file. Switch to the Vec.h, move the cursor to a point between the end of the template declaration and the #endif, and paste them in (using Ctrl-v).\nIf there are #include directives in the Vec.cpp file that are not in Vec.h (except for Vec.h itself), they will also need to be cut-and-pasted into Vec.h. (It is often necessary to cut-and-paste #include &lt;iostream&gt;.)\nNow that the method definitions have been moved from Vec.cpp to Vec.h, you should delete Vec.cpp from your project.\n\n\n\n\n\n\nNote\n\n\n\nNote that you will need to update your Makefile! Find the Vec.cpp reference in the SOURCES line and remove it.\n\n\n\n\nStep 3. Converting the Class-Methods to method-templates\nWe now have a class template, but our methods are still class methods. Our next step is to convert each class method into a template method. Test-driven development gives us a systematic, method-by-method means of doing this conversion, without getting overwhelmed by a zillion compiler errors.\nYou should see the message indicating there are no tests if you comment out all of the Vec prototypes, and all of the method definitions you just pasted into the header file. If you want to, and compile (make tester) and run your project(./tester). Just remember that your code was drastically changed, and might not function anymore if you don’t comment certain parts. You should see the message indicating there are no tests.\nOur test-driven procedure will be to: (don’t do this yet – just read the steps below)\n\nIn tests.cpp, uncomment the TEST_CASE. Convert all uses of Vec to be Vec&lt;sometype&gt;. You may choose what type to put in between the &lt; and &gt;, but the type should be an integer type – int, unsigned, short, char, unsigned char, long, etc.\nIn Vec.h, uncomment the corresponding method (i.e., its prototype within the class and its definition outside the class.)\nConvert the method’s definition into a method-template.\nCompile and run the tester.\nIf any errors are reported, find and fix them;\nOtherwise, return to step 1.\n\nConverting a method definition (step 3) to a method-template is fairly simple:\n\nPlace template &lt;class Item&gt; before the beginning of the method’s definition.\nIn the method definition, find each place where the name of the class (e.g., Vec) is being used as a type – each use except when it is being used as the name of an operation like the name of a constructor or destructor – and replace it with the parameterized name of the template (e.g., Vec&lt;Item&gt;).\n\nSo the rest of Part I is to use these steps to convert each of the Vec methods to method-templates.\nTo illustrate this conversion process, let’s run through these steps using some of the Vec constructors.\n\nStep 3a. The Default Constructor.\nIn tests.cpp, uncomment the test that tests the default constructor and convert it to use Vec&lt;sometype&gt;. (Make sure to uncomment the matching curly brackets (}) at the end of the test case section.) Then switch to Vec.h and find the definition of the default constructor. We can perform step 1 by placing template&lt;class Item&gt; before the constructor definition:\ntemplate&lt;class Item&gt;\nVec::Vec() {\n  ...\n}\nThat completes step 1.\nFor step 2, we replace each use of the name of the class (Vec) that is not the name of an operation with the name of the template (Vec&lt;Item&gt;), as follows:\ntemplate&lt;class Item&gt;\nVec&lt;Item&gt;::Vec() {\n  ...\n}\nThat’s it! Save all changes, and compile and run your tests. If you find errors, find and fix them before continuing.\n\n\n\n\n\n\nHint\n\n\n\nYou may need to make some additional changes before things build. More than likely, compilation of the tester will not succeed until you have converted several other methods that are used in the default constructor tests, including the destructor.\n\n\nCongratulations! You have just converted your first class-method into a method-template!\n\n\nStep 3b. The Explicit-Value Constructor.\nUsing what we just did to the default constructor as a model, uncomment the explicit constructor’s test, fix the types, then convert the explicit constructor into a method-template. Compile and run your project. If errors occur, fix them. When it passes all tests continue.\nNote that within this constructor, the allocation of the dynamic array uses Item. Previously, this Item was determined by the typedef declaration; but now, Item refers to the name of our template’s parameter. If the user declares:\nVec&lt;double&gt; v1;\nVec&lt;int&gt; v2;\nthen in v1, all of the occurrences of Item will be replaced by double, while in v2, all the occurrences of Item will be replaced by int.\nCongratulations! You’ve just done another method-to-method-template conversion!\n\n\nStep 3c. The Copy Constructor.\nUncomment and fix the copy constructor’s test. In Vec.h, find the copy constructor’s definition. As before, we place template&lt;class Item&gt; before the definition, and replace each occurrence of the name of the class that is not the name of an operation with the name of the template:\ntemplate&lt;class Item&gt;\nVec&lt;Item&gt;::Vec(const Vec&lt;Item&gt;& original) {\n  ...\n}\nNote that the type of any Vec parameter or local variable must be replaced by Vec&lt;Item&gt;. This is consistent with our “conversion rule” – any use of the name of the class that is not the name of an operation (i.e., a constructor or destructor) must be replaced.\nCompile and run your project. Continue when it passes all tests.\n\n\nStep 3d. The Destructor.\nIf you have not already done so, convert the destructor to a method-template. Continue when your conversion passes all tests.\n\n\nStep 3e. The Remaining Operations.\nNow that you know how to do the conversion, we can speed up this mechanical process a bit.\nAt the destructor definition, comment out the line template&lt;class Item&gt;. Then copy the line //template&lt;class Item&gt;. With the remaining operations still commented out, use Ctrl-v to paste that line at the beginning of each of the remaining operations in the header file.\nReturn to the destructor’s definition and uncomment the line template&lt;class Item&gt; in the destructor. Then copy the “phrase” . With the remaining operations still commented out, paste this after each use of the name of the class that is not the name of an operation, throughout the rest of the header file.\nThen, one untested method at a time:\n\nUncomment the converted method.\nUncomment its corresponding test.\nUncomment the call to that test.\nCompile and run the test. When it passes the test, continue to the next untested method.\n\nBy using this methodical approach (Ha, ha! Get it?!?), any compilation errors that occur should be confined to the newly uncommented method-template. This will make it easier and faster for you to find and fix the errors.\nUse this approach to complete the conversion of class Vec to the template Vec&lt;Item&gt;.\nCongratulations! You have just built your first class template!\n\n\n\nDiscussion - Part I\nAs you can see, the C++ syntax to build class templates is a bit complicated, and it is quite easy to make syntax errors if you try to build a template container from the outset. For this reason, we recommend this 2-step approach to building containers:\n\nUse the typedef-Item mechanism to build a container class and thoroughly test its operations.\nConvert the Item container class into a template that receives its type via a parameter.\n\nBy doing so, you can build and test the container in step 1, and debug the logic of its operations. Then (as we have seen today), converting it to a template in step 2 is a mechanical process.\nBecause any type can be passed via the template’s parameter, a container built as a template can store any kind of value. Because they are defined to store “generic” items, container templates are often called generic containers. The template is the C++ mechanism for building generic containers; other languages (e.g., Ada, Java) provide other (simpler) mechanisms."
  },
  {
    "objectID": "labs/lab05.html#part-ii.-add-support-for-python-like-indexing-to-pylist",
    "href": "labs/lab05.html#part-ii.-add-support-for-python-like-indexing-to-pylist",
    "title": "Lab 05: Generic Containers (Templates)",
    "section": "Part II. Add support for Python-like indexing to PyList",
    "text": "Part II. Add support for Python-like indexing to PyList\nBefore proceeding, comment out all code in the tests.cpp file that runs the tests for Part I – including the #include “Vec.h” statement.\n\n\n\n\n\n\nNote\n\n\n\nMake sure that catch.hpp stays included! And uncomment PyList testing code (i.e., toggle the comments that are there).\n\n\nThe makefile is currently not compiling PyList.cpp, so you need to change it. Change the SOURCES line, adding PyList.cpp.\n\n\n\n\n\n\nImportant\n\n\n\nIf Vec.cpp is still there, it should be removed at this time.\n\n\nLook at the PyList.cpp and PyList.h files.\nBuild and run. The execution should succeed, testing the existing PyList functionality.\nIn Python, you can index a list using negative numbers. The last item in the list is at index -1, the second-to-last at -2, etc. The first item in the list, e.g., lst[0], is the same as lst[-10], if there are 10 items in the list. Here are some examples of how python behaves:\n&gt;&gt;&gt; lst = list(range(10))\n&gt;&gt;&gt; lst\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  # in this example, the values are the same as the indices\n&gt;&gt;&gt; lst[-1]                # last item\n9\n&gt;&gt;&gt; lst[-8]                # penultimate item\n2\n&gt;&gt;&gt; lst[-10]               # same as lst[0]\n0\n&gt;&gt;&gt; lst[-11]               # cannot index off the \"front\" of the array\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\n&gt;&gt;&gt; lst[10]                # cannot index off the end of the array\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\nIn the tests.cpp file, there are already tests for this feature, but they are still commented out. Uncomment them, and run the test. You’ll see failures. In fact, you might see a Segmentation Fault.\nNow, implement the feature. You’ll have to alter getValue(), setValue(), and operator[], so that the Python-like index is converted to a legal C++ index before accessing myArray. Because the code to check for a legal index is the same in those three methods, I put the common code into a new private method called validate_index(index), described in the table below. Then, my whole implementation of getValue() becomes very short: return myArray[validate_index(index)];\nHere is a summary of validate_index():\n\n\n\n\n\n\n\n\nMethod\nParameters\nNotes\n\n\n\n\nvalidate_index()\nint index\nThe purpose of this function is to convert what would be a legal python index into a legal C++ index.Make note, does this method change anything in our class? If it doesn’t, should we make this a const function?Algorithm: - If the index is &gt;= n, throw a range_error exception. - If the index is &lt; -n, throw a range_error exception. Convert the index to be between 0 and n-1 if necessary. Return the index back.\n\n\n\nFinally, implement a find() method as described below:\n\n\n\n\n\n\n\n\nMethod\nParameters\nNotes\n\n\n\n\nfind()\nan Item to search for\nIf the item is found in the array, return the index. Otherwise, return -1.\n\n\n\nFirst, add a SECTION(\"find\") to the “PyLists” TEST_CASE in tests.cpp to test the find command. You’ll want to make sure you try to find items that are in a PyList and items that are not in the list. You should also make sure that if an Item is in a list more than one time, the index of the first item is returned.\nAfter you are satisfied with your tests, and you prove that your tests fail, then implement the find() method.\nAfter you do this and have all your tests passing, then Uncomment all the Vec tests in tests.cpp, so that ALL tests are now available, both for Vec and for PyList. Then, of course, recompile and run ./tester to make sure it tests both Vec and PyList."
  },
  {
    "objectID": "labs/lab05.html#submit",
    "href": "labs/lab05.html#submit",
    "title": "Lab 05: Generic Containers (Templates)",
    "section": "Submit",
    "text": "Submit\nDon’t forget to commit AND sync your code to your repo for grading.\n\n\n\n\n\n\nImportant\n\n\n\nVerify you have synced your code to github by going to your online repo webpage and looking to see that the files are correct.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nVerify that the automated tests have passed in github.com."
  },
  {
    "objectID": "labs/lab05.html#grading-rubric-24-pts-total",
    "href": "labs/lab05.html#grading-rubric-24-pts-total",
    "title": "Lab 05: Generic Containers (Templates)",
    "section": "Grading Rubric: 24 pts total",
    "text": "Grading Rubric: 24 pts total\nThis lab will be graded the following way: 24 pts total\n\nPart I: 10 pts\n\nAll code has been converted to a class template correctly: 5 pts\nAll tests pass: 5 pts.\n\nPart II: 10 pts.\n\nNegative indexing works correctly, as indicated by thorough tests: 5pt\nfind() works correctly: 5 pts.\n\nCode is clean, perfectly indented, hospitable: 2pts\nCode builds correctly: 2 pts\n\nWays students lost points in the past:\n\n-2: Can’t make tester. Error occurs.\n-2: Late submission\n-4: Grader had to edit the makefile to build.\n-2: Tests fail"
  },
  {
    "objectID": "labs/lab10.html",
    "href": "labs/lab10.html",
    "title": "Lab 10: Recursion",
    "section": "",
    "text": "Students will be able to…\n\nuse an AI model to write code to implement recursive algorithms.\nanalyze the code from an AI model"
  },
  {
    "objectID": "labs/lab10.html#learning-objectives",
    "href": "labs/lab10.html#learning-objectives",
    "title": "Lab 10: Recursion",
    "section": "",
    "text": "Students will be able to…\n\nuse an AI model to write code to implement recursive algorithms.\nanalyze the code from an AI model"
  },
  {
    "objectID": "labs/lab10.html#introduction",
    "href": "labs/lab10.html#introduction",
    "title": "Lab 10: Recursion",
    "section": "Introduction",
    "text": "Introduction\nIn this lab, for most steps, you will use ChatGPT or another AI model to generate recursive solutions to some simple problems. You will then analyze the code to verify it is correct and/or improve it.\nTo log in to ChatGPT (as if you didn’t already know :-), go to https://chatgpt.com}.\nAfter the AI generates C++ code, copy and paste it into a file, and compile and run it. You will be submitting multiple files each containing a main() in it.\nAccept the assignment.\n\n\n\n\nThis is going to take forever…"
  },
  {
    "objectID": "labs/lab10.html#part-1-reverse-an-array-recursively",
    "href": "labs/lab10.html#part-1-reverse-an-array-recursively",
    "title": "Lab 10: Recursion",
    "section": "Part 1: Reverse an array, recursively",
    "text": "Part 1: Reverse an array, recursively\nAsk ChatGPT for C++ code to reverse an array of integers recursively. When you are happy with the code that has been generated for you, copy and paste it into file rev_array.cpp. Compile and run the file by doing make rev_array and ./rev_array.\nDescribe in a few complete English sentences how the solution works. Put your answers in comments in the file. (Do not use the AI to generate this answer.)\nWhat if the array has an odd number of values? How does the algorithm handle this? (Do not use the AI to generate this answer.)"
  },
  {
    "objectID": "labs/lab10.html#part-2-binary-search-recursively",
    "href": "labs/lab10.html#part-2-binary-search-recursively",
    "title": "Lab 10: Recursion",
    "section": "Part 2: Binary search, recursively",
    "text": "Part 2: Binary search, recursively\nAsk ChatGPT for C++ code to implement a recursive version of binary search over an array of integers. (doubles?)\nWhen you are happy with the resulting code, place it in bin_search.cpp, compile it, and run it (if you can’t figure out how to do these steps, inspect the makefile). Make sure the code works for arrays of different sizes, including size 0, size 1, size 10, etc.\nYour code probably contains this line:\nint mid = low + (high - low) / 2;\nDescribe in a comment above this line what this line does and why it works when the size of the array is odd (which means you cannot divide the array into two even parts). (Do not use the AI to generate this answer.)"
  },
  {
    "objectID": "labs/lab10.html#part-3-sum-of-values-in-an-array-recursively",
    "href": "labs/lab10.html#part-3-sum-of-values-in-an-array-recursively",
    "title": "Lab 10: Recursion",
    "section": "Part 3: Sum of values in an array, recursively",
    "text": "Part 3: Sum of values in an array, recursively\nPlace the code from slide 5 of the lecture slides into file sum_array.cpp. Add other code to initialize an array with 6 values. Compile and run the value and verify that the result is correct.\nNow, modify the code so that the base case is not when size == 0 but when size == 1.\nDescribe in a comment in the file why this solution is slightly more efficient."
  },
  {
    "objectID": "labs/lab10.html#part-4-fibonacci-sequence-recursively",
    "href": "labs/lab10.html#part-4-fibonacci-sequence-recursively",
    "title": "Lab 10: Recursion",
    "section": "Part 4: Fibonacci sequence, recursively",
    "text": "Part 4: Fibonacci sequence, recursively\nAsk the AI to generate C++ code to compute recursively the nth fibonacci number, where the user provides the value for \\(n\\). Copy and paste the code into file fib.cpp. Then, compile and run the code. Verify that the results are correct (you can ask the AI for the correct answer when \\(n\\) is 20).\nAsk the AI to modify the C++ code so that it counts how many times the recursive function is called and prints out the results at the end.\nPut the code into your file and compile and run it. Add the results for when \\(n\\) is 20 in a comment in the code at the bottom of the file.\nNow, ask the AI to modify the code to use memoization. The code should still count and display the number of times the function fibonacci() is called.\nAdd to your comment at the bottom of the file the results for when memoization is used. Also, write a sentence or two (in the comment) to describe how memoization works and how it improves the run time of the algorithm. (Do not use the AI to generate this answer.)"
  },
  {
    "objectID": "labs/lab10.html#submit",
    "href": "labs/lab10.html#submit",
    "title": "Lab 10: Recursion",
    "section": "Submit",
    "text": "Submit\nDon’t forget to submit all your code to github.\nGrading Rubric: 20 points total\n\n5 points for each of the 4 parts. Those 5 points consist of:\n\n2 points for code correctness\n3 points for your analysis of the code.\n\n\nWays students lost points in the past:\n\n-12: no analysis was given.\n-3: some of the questions were not answered properly."
  },
  {
    "objectID": "labs/lab11-hint2.html",
    "href": "labs/lab11-hint2.html",
    "title": "Lab 11: Hint 2",
    "section": "",
    "text": "The stub of BST::contains() should look like this:\nbool BST::contains(const Item& item) const {\n}\nThe BST::contains() method should distinguish between the two cases:\n\nIf the BST is empty: return false.\nOtherwise: “pass the buck” by returning whatever myRoot-&gt;contains(item) returns."
  },
  {
    "objectID": "labs/lab11-hint2.html#defining-bstcontains",
    "href": "labs/lab11-hint2.html#defining-bstcontains",
    "title": "Lab 11: Hint 2",
    "section": "",
    "text": "The stub of BST::contains() should look like this:\nbool BST::contains(const Item& item) const {\n}\nThe BST::contains() method should distinguish between the two cases:\n\nIf the BST is empty: return false.\nOtherwise: “pass the buck” by returning whatever myRoot-&gt;contains(item) returns."
  },
  {
    "objectID": "labs/lab11-hint2.html#designing-nodecontains",
    "href": "labs/lab11-hint2.html#designing-nodecontains",
    "title": "Lab 11: Hint 2",
    "section": "Designing Node::contains()",
    "text": "Designing Node::contains()\nSince a Node is recursively defined, we might define Node::contains(item) recursively. One way to design a recursive algorithm for this method is as follows:\nBasis. There are three trivial cases:\n\nIf item is equal to myItem:\n\nReturn true.\n\nIf item belongs in my left subtree and my left subtree is empty:\n\nReturn false.\n\nIf item belongs in my right subtree and my right subtree is empty:\n\nReturn false.\n\n\nInduction Step. There are two cases:\n\nIf item belongs in my left subtree and my left subtree is not empty:\n\n“Pass the buck” to the node in my left subtree and return whatever it returns.\n\nIf item belongs in my right subtree and my right subtree is not empty:\n\n“Pass the buck” to the node in my right subtree and return whatever it returns."
  },
  {
    "objectID": "labs/lab11-hint2.html#defining-nodecontains",
    "href": "labs/lab11-hint2.html#defining-nodecontains",
    "title": "Lab 11: Hint 2",
    "section": "Defining Node::contains()",
    "text": "Defining Node::contains()\nThese observations can be reorganized into the following algorithm for our Node::contains(item) method:\n\nIf item is less than myItem:\n\nIf myLeft is nullptr:\n\nReturn false.\n\nOtherwise:\n\n“Pass the buck” by returning whatever myLeft-&gt;contains(item) returns.\n\n\nOtherwise, if item is greater than myItem:\n\nIf myRight is nullptr:\n\nReturn false.\n\nOtherwise:\n\n“Pass the buck” by returning whatever myRight-&gt;contains(item) returns.\n\n\nOtherwise (item is equal to myItem):\n\nReturn true."
  },
  {
    "objectID": "labs/lab00.html",
    "href": "labs/lab00.html",
    "title": "Lab 00: Getting Started",
    "section": "",
    "text": "LOtR warm up."
  },
  {
    "objectID": "labs/lab00.html#objectives",
    "href": "labs/lab00.html#objectives",
    "title": "Lab 00: Getting Started",
    "section": "Objectives:",
    "text": "Objectives:\nIn this exercise, you will:\n\nLogin to a workstation in the Unix Lab.\nUse Linux commands to interact with files and folders.\nUse VS Code to edit, compile, and run a program."
  },
  {
    "objectID": "labs/lab00.html#introduction",
    "href": "labs/lab00.html#introduction",
    "title": "Lab 00: Getting Started",
    "section": "Introduction",
    "text": "Introduction\nWelcome to CS112! In this first lab exercise, we will introduce the Visual Studio Code editor, and see how we can use it to write a C++ program. The exercise assumes that a C++ compiler (e.g., GNU’s gcc/g++), the make utility, and VSCode have all been installed on your system. You should also be familiar with basic C++ principles – review 1.4. Let’s look at a C++ program — C++ for Python Programmers if you are coming into this class from CS10X and are used to Python.\nThis lab tells you how to use VS Code in the CS Dept’s Unix Lab (SB 354), which is currently using Ubuntu Linux. If you have not used Linux before, you may want to work through this Introductory Exercise."
  },
  {
    "objectID": "labs/lab00.html#using-linux",
    "href": "labs/lab00.html#using-linux",
    "title": "Lab 00: Getting Started",
    "section": "Using Linux",
    "text": "Using Linux\nI would recommend that you bookmark this Linux Quick Reference, so that you can locate it quickly in the future. Your instructor will conduct a quick introduction to using the Linux command-line. These are useful skills to practice, as they will allow you to login to a remote system (e.g., from home) and work with your files remotely."
  },
  {
    "objectID": "labs/lab00.html#where-to-store-your-cs112-work",
    "href": "labs/lab00.html#where-to-store-your-cs112-work",
    "title": "Lab 00: Getting Started",
    "section": "Where to Store your CS112 Work",
    "text": "Where to Store your CS112 Work\nYou will have many assignments in CS112, and it is useful to put them all under one directory (“folder”). I recommend you create a directory called cs112, in your home directory. You can do this from the Terminal Window you opened before. Just type this:\nmkdir cs112\nTo change your current working directory to cs112, do this:\ncd cs112\nTo verify what is your current directory, do this:\npwd\nYou should remember to do this before starting each lab and assignment."
  },
  {
    "objectID": "labs/lab00.html#launching-vs-code",
    "href": "labs/lab00.html#launching-vs-code",
    "title": "Lab 00: Getting Started",
    "section": "Launching VS Code",
    "text": "Launching VS Code\nThere are different ways to launch VS Code, but for now, just do this:\nOpen a terminal window; and\nIf you haven’t already (e.i., your terminal prompt doesn’t have a ~/cs112 in it),\ncd cs112\nEnter the following command:\ncode . \nThe VSCode window should pop up pretty quickly. (If you see something about a password not matching your keychain, just cancel it a few times. We’ll work on fixing that in the future.)"
  },
  {
    "objectID": "labs/lab00.html#create-your-github-account",
    "href": "labs/lab00.html#create-your-github-account",
    "title": "Lab 00: Getting Started",
    "section": "Create your GitHub Account",
    "text": "Create your GitHub Account\nGitHub is a web service where all your code for this course will be stored. Graders will be able to go to your code and see it and grade it. Additionally, you’ll be able to access your code from any machine – the lab machines or your personal machine – as long as you submit your code to your repository.\nIf you do not already have a GitHub account, you should go to https://github.com and create a new account. I would prefer it if you would use your Calvin email address here. After getting a verification code via email and verifying your account, the website asks you what kind of features you will be using. At the bottom of this page it says “Skip Personalization”. Just click that to skip all the personalization stuff. You will likely need to set up two factor authentication - 2FA - as part of this process. If you have good texting capabilities in the CS computer labs, you can use the SMS text option for 2FA authentication.\nKeep your github.com web page open in the browser for the next step."
  },
  {
    "objectID": "labs/lab00.html#creating-ssh-key-pair",
    "href": "labs/lab00.html#creating-ssh-key-pair",
    "title": "Lab 00: Getting Started",
    "section": "Creating SSH Key Pair",
    "text": "Creating SSH Key Pair\nGithub security now requires that you use an SSH Key Pair. An SSH key pair is two numbers – a public key and a private key – stored in two files. The public key can be shared publicly, but the private key should not be shared.\nThe manual process is below, but it can be skipped as we’ll use an automated tool to generate a key specifically for this lab. Run the following command in your terminal:\n/usr/local/scripts/gen-sshkey-github.sh\nYou will need to copy the bottom of the output you see into github. To copy that output, select it with your mouse, and either do Ctrl+Shift+c or choose Edit -&gt; Copy from the menu. Do that now.\nNow, go to your github.com account in the browser. You will need to go to this page https://github.com/settings/keys while in your account. (Try clicking on the link, but if that does not work, do the following: in your github.com account page, find the image in the upper-right corner of the page, click on it, then choose Settings from the dropdown menu, then choose SSH and GPG Keys on the left menu, and click that.)\nClick the New SSH Key button in the upper right. Choose a Title: CS112 works well. Then paste the key you copied earlier into the Key textbox. Click the Add SSH Key button.\n\n\n\n\n\n\nNote\n\n\n\nIf you plan to work on your own machine instead of a lab machine, you will have to repeat this step on your own laptop. But, the script at /usr/local/scripts/gen-sshkey-github.sh will not work on your machine. Use ssh-keygen instead. It is available on most operating systems already."
  },
  {
    "objectID": "labs/lab00.html#creating-a-project",
    "href": "labs/lab00.html#creating-a-project",
    "title": "Lab 00: Getting Started",
    "section": "Creating a Project",
    "text": "Creating a Project\nEach lab and homework will contain a link to a GitHub Classroom assignment invitation. The lab or homework will give you instructions on how to accept the invitation and then download the code for that assignment.\nWhen you click on the link, a repository for you will be created. The webpage will give you instructions on how to see that repository. The webpage for your repo will look something like this: https://github.com/24SP-CS112/lab00-yourgithubteam\nClick on the invitation for this lab.\n\n\n\n\n\n\nImportant\n\n\n\nAll labs are meant to be done in pairs using pair programming. That is: you must find a pair before accepting the invitation. For the labs, and only for the labs, the invitation will require you create or join a Team. The first to accept the invitation should create a Team name, so your partner can join in afterwards.\n\n\nGo to the webpage for your repository. You will need to get the ID of the repo. To get this, you click on the button &lt;&gt; Code, then click on the SSH tab. Then click on the two boxes to the right of where it says git@github.com:.... This copies your repo id to your clipboard.\n\n(Keep this tab open in your browser – you’ll need it later in the lab.)\nThe instructions in each assignment will remind you what to do:\n\nOpen a terminal (it could be the terminal from Linux or you can use the terminal from VS Code by typing Ctr + Shift + `).\ncd cs112\ngit clone &lt;your github repo here&gt; (replace everything between &lt; and &gt;)\n\nFor Lab 0, do this now replacing &lt;your github repo here&gt; with what you copied to your clipboard (i.e., paste it in).\nWhen you do this, git clone will download your repo to your cs112 directory, into a directory called lab0-yourgithubaccount (where yourgithubaccount is actually your github account name.\nIn the terminal do the following:\nls \nThis will show you the name of the directory containing the lab0 code.\ncd into that directory, replacing yourgithubaccount with your actual github account name:\ncd lab0-yourgithubaccount       \nls \nThis will show you what files have been installed for you for this lab.\nAlso, do the following, which you will never have to do again. In the terminal type (replacing John Doe, johndoe etc. with your information):\ngit config --global user.name \"John Doe\"\ngit config --global user.email johndoe@calvin.edu\nIf you want to check your credentials at any time, in the terminal type:\ngit config --global --list"
  },
  {
    "objectID": "labs/lab00.html#customizing-vscode",
    "href": "labs/lab00.html#customizing-vscode",
    "title": "Lab 00: Getting Started",
    "section": "Customizing VSCode",
    "text": "Customizing VSCode\nVS Code has tons of features. We will configure only a few of them at this point.\nFirst, let’s install the C++ extensions. In the menu bar of VS Code, select File -&gt; Open Folder. Choose the directory that you downloaded when you did git clone above. That directory will be under your cs112 directory. Next, open the main.cpp file. When you open that file VS Code is going to suggest (in the lower-right corner) that you install some extensions to help you work with C++ files. The extension that you want to install is called the C/C++ Extension Pack. Select that and install it.\n\nGo to your VS Code window. Hit the F1 key, which should open the Command Palette at the top of the window. Start typing Preferences:\nWhen you see Preferences: Open User Settings appear, select it. On the resulting page there is a search bar at the top. In the search bar, type Auto Save. You should see a control appear labeled Files: Auto Save. From the dropdown menu, select onFocusChange. This will make sure that your files are automatically saved any time you select another file or another window. No more remembering to save!!\n\nDon’t close the Settings page yet! Instead, erase where you typed Auto Save, and now search for Tab Size. You should see a control called Editor: Tab Size. Set this value to 4.\nNow, erase Tab Size so that you are not searching for anything.\nUnder Extensions, you should see a C/C++ section. Select that, and then Formatting as shown below.\nScroll down until you see C_Cpp: Clang_format_style. Replace whatever you find in the input box with this:\n{ BasedOnStyle: Google, IndentWidth: 4, AccessModifierOffset: -4, AllowShortFunctionsOnASingleLine: InlineOnly }\n\nYou can close the Settings window now."
  },
  {
    "objectID": "labs/lab00.html#compiling-your-program",
    "href": "labs/lab00.html#compiling-your-program",
    "title": "Lab 00: Getting Started",
    "section": "Compiling your Program",
    "text": "Compiling your Program\nTake a look at your main.cpp file. It should look like this:\n/* main.cpp\n * Author: Prof. Victor Norman\n * For: CS 112, Lab 0 at Calvin University.\n */\n\n#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main() {\n    cout &lt;&lt; \"Welcome to CS112!\" &lt;&lt; endl;\n    return 0;\n}\nGo back to your Terminal window. Make sure you are in the directory where your code is. You can confirm this by typing pwd and/or type ls to list the files in the current working directory. You should see that you are in cs112/lab0-yourgithubaccount, and that there is a file called makefile there.\nTo compile your program, type make. This command reads your makefile, which gives instructions on how to build your program. When the build succeeds, do ls again to see that now there is a file called lab0. This is your executable that you just built."
  },
  {
    "objectID": "labs/lab00.html#running-your-program",
    "href": "labs/lab00.html#running-your-program",
    "title": "Lab 00: Getting Started",
    "section": "Running Your Program",
    "text": "Running Your Program\nTo run the executable, in the terminal, type\n./lab0  \nThis is telling the terminal shell to run the lab0 executable that is in this directory."
  },
  {
    "objectID": "labs/lab00.html#practice-writing-code",
    "href": "labs/lab00.html#practice-writing-code",
    "title": "Lab 00: Getting Started",
    "section": "Practice Writing Code",
    "text": "Practice Writing Code\n\nIn main.cpp, select all the code and delete it. Then, rewrite the code so that it prints out Welcome to CS112 and C++!. Don’t cheat! Practice makes perfect. If you can’t figure out why you are seeing an error, collaborate with your neighbor. Remember you have to compile your program each time before you try to execute it.\nIn your main(), define a variable name of type string, and initialize it to your name by asking for an input from the keyboard (take a look at the cin command in C++). When you run your executable, it will be waiting for you to type your name and hit Enter!\n\n\n\n\n\n\n\nNote\n\n\n\nstrings are surrounded by double quotes in C++. But in the case of entering them by using cin, double quotes are unnecessary.\n\n\nChange main, so that it now prints out\nWelcome to CS112 and C++, your name here!\nusing the variable. To do this, use multiple &lt;&lt; operators, similar to this:\ncout &lt;&lt; \"Welcome\" &lt;&lt; aVariable &lt;&lt; endl;\nMake sure you put the exclamation point on the end. Now, try recompiling and running\n./lab0\n\nNow, create a second file called utils.cpp and in there, put this code:\n\n int courseNumber() {\n  return 112;\n}\nThen, create a file called utils.h and in there, put this code:\nint courseNumber();\n\nIn your main.cpp file, add\n\n#include \"utils.h\"\nto the area where you have #include &lt;iostream&gt;.\n\n\n\n\n\n\nNote\n\n\n\nUse \"utils.h\" not &lt;utils.h&gt;\n\n\nNow, in your code in main(), instead of hard-coding 112 in your output, call the function courseNumber() to get the course number.\nCompile your project, fix any problems the compiler finds, and run your project. When you have your code working (i.e., the output looks identical to what you had after step 2 above), go on."
  },
  {
    "objectID": "labs/lab00.html#submitting-your-code-for-grading",
    "href": "labs/lab00.html#submitting-your-code-for-grading",
    "title": "Lab 00: Getting Started",
    "section": "Submitting your Code for Grading",
    "text": "Submitting your Code for Grading\n\n\n\n\n\n\n❗❗❗NOTE NOTE NOTE\n\n\n\nIf you do not submit your code, the grader cannot see it and grade it! Do not forget to do this step!\n\n\nWhen you get your code working, submit your code to github:\n\nIn VS Code, click on the Source Control icon on the upper left and type in a commit message, then click the checkmark icon to submit your code. Go through the various pop-up boxes to commit and push your changes to your online repo.\n\nWhen you push your changes to your online repo, a set of automated tests may be run (for most labs and projects). To find out if your automated tests passed, look at your online repo. If you see a green checkmark, tests have passed! But, in mine, I see this:\n\nIf I click on the red X, I see this:\n\nTo see the steps to get your errors report, see video below.\n\nClick on Details to see information about what automated test failed. In this case, there is only 1 automated test, so if it fails your output is not what is expected.\nIf your code is not passing, make sure the output exactly matches those tests, including spaces – there is a space after \"C++, \". Also make sure the autograder can receive an input command to enter your name. In the autograding test, the name Amunzle is given as input to the program, so the test expects this as output:\nWelcome to CS112 and C++, Amunzle!\nIf you have problems, you should go back and fix them, and then resubmit until the automated test passes. When you are done, you are free to go. Be sure to logout from your workstation, so that no one plays any pranks with your account!\n\n\n\n\n\n\nImportant\n\n\n\nAdd the name of participants of the lab in the README.md file from the repo."
  },
  {
    "objectID": "labs/lab00.html#grading-rubric",
    "href": "labs/lab00.html#grading-rubric",
    "title": "Lab 00: Getting Started",
    "section": "Grading Rubric",
    "text": "Grading Rubric\n10 points total\n\ncode compiles and passes autograder tests: 5 pts.\ncode is clean and neat: 2 pts.\nmiscellaneous (see below for examples): 3 pts.\n\nWays students have lost points in the past:\n\n-1: No implementation for courseNumber()\n-1: No call to courseNumber() in main()\n-2: No variable to display your name\n-1: Implementation for courseNumber() should be in utils.cpp, not the header file utils.h.\n-1: Good, but please format your code!\n\n\n\n\n\n\n\nTip\n\n\n\nIf you have time and you have your laptop with you, this would be a good time to follow the instructions on the CS112 Moodle page to set up your laptop to access the CS lab machines remotely using VS Code Tunnels."
  },
  {
    "objectID": "labs/lab01.html",
    "href": "labs/lab01.html",
    "title": "Lab 01: Control Structures",
    "section": "",
    "text": "May the force be with you."
  },
  {
    "objectID": "labs/lab01.html#objectives",
    "href": "labs/lab01.html#objectives",
    "title": "Lab 01: Control Structures",
    "section": "Objectives:",
    "text": "Objectives:\n\nPractice using for loops, while loops, and if statements.\nPractice creating functions and passing parameters.\nPractice Committing and Syncing often to GitHub to run autograding tests."
  },
  {
    "objectID": "labs/lab01.html#step-0.-prepare",
    "href": "labs/lab01.html#step-0.-prepare",
    "title": "Lab 01: Control Structures",
    "section": "Step 0. Prepare",
    "text": "Step 0. Prepare\n\nClick this link and then “Accept this assignment”. \nWait a few seconds and refresh the page. Refresh until the page says “You’re ready to go!”. The page has a link to a github repo.\nClick the link to see your new repo on github.com.\nClick the green Code button and copy the SSH link it shows.\nIn a terminal,\n\ncd to the directory where you are putting all your CS112 assignments.\ntype git clone &lt;paste-the-contents-of-the-link-you-copied&gt;\n\ncd to the new directory containing your repo.\ntype code . to start up Visual Studio Code in that directory.\nMake sure yo and your partner are in the same Team when creating the repo.\nInspect the code you got in the assignment.\nIn the terminal, type make\nThe code should compile and give you an executable called tester.\nRun the program: type ./tester\nYou should get some basic output – or at least it should not crash."
  },
  {
    "objectID": "labs/lab01.html#step-1.-if-statement-practice-1",
    "href": "labs/lab01.html#step-1.-if-statement-practice-1",
    "title": "Lab 01: Control Structures",
    "section": "Step 1. if statement practice, 1",
    "text": "Step 1. if statement practice, 1\nIn functions.cpp in the grade() function, add code that 1. prints “Enter your grade:” 2. reads in an unsigned value from the user 3. computes whether the letter grade (a char) is an A, B, C, D, or F. An A is 90 or above, a B is 80 - 89, etc. 4. prints out the grade saying “Your grade is grade.”.\nCompile your program by typing make in a terminal. Run it by typing ./tester step1. Verify that your output looks exactly like this:\nYour grade is B.\nNow, Commit and Sync your code to github. Use “step 1 complete” as your Message. When you Commit and Sync, the automated tests will run on github. Only the “step1” test should pass at this time. If it doesn’t, fix your code, and then resubmit (use any Message you want). Repeat until the “step1” test passes.\n\n\n\nCommiting and Syncing"
  },
  {
    "objectID": "labs/lab01.html#step-2.-if-statement-practice-2",
    "href": "labs/lab01.html#step-2.-if-statement-practice-2",
    "title": "Lab 01: Control Structures",
    "section": "Step 2. if statement practice, 2",
    "text": "Step 2. if statement practice, 2\nAdd code in functions.cpp in insurance() to implement the insurance plan shown in the table below, computing the result in as few lines as possible – but still using readable/hospitable code. To review the syntax of if statements in C++, you might find this useful: https://www.w3schools.com/cpp/cpp_conditions_elseif.asp\n\n\n\n\n\nPlan Name\nMonths\n\n\n\n\n1\n2-6\n\n\nsilver\n\\$90\n\n\ngold\n\\$90\n\n\n\n\n\nThe program first asks the user for the Plan Name – a string. Then, the program asks for the number of months – an unsigned. Then, the code uses a series of if statements to compute the cost – an unsigned – printing it out at the end. My implementation uses 2 if statements, 1 else if, and 2 else statements, not in that order. Part of my solution has an if-else pair embedded in another if/else body.\nFinally, of course, your code prints out the results in nice English. Your output should match this output exactly. (Note the period at the end of the number at the end.)\nThe cost for your plan is $60.\nCompile your code and run:\n./tester step2and3 -c step2\nThe output should match the output above.\nNow, Commit and Sync your code to github. Use “step 2 complete” as your “message”. When you submit the automated tests will run. Only the “step1” and “step2” tests should pass at this time. If they don’t, fix your code, and then resubmit. Repeat until the “step1” and “step2” tests pass."
  },
  {
    "objectID": "labs/lab01.html#step-3.-while-loop-practice",
    "href": "labs/lab01.html#step-3.-while-loop-practice",
    "title": "Lab 01: Control Structures",
    "section": "Step 3. while loop practice",
    "text": "Step 3. while loop practice\nImprove your code from Step 2 by adding a while loop that checks if the user entered a legal plan name (“silver” or “gold”), and if not tells the user to try again. E.g.,\n    Enter a plan name: maroon\n    I'm sorry, \"maroon\" is not a known plan.\n    Enter a plan name: sliver\n    I'm sorry, \"sliver\" is not a known plan.\n    Enter a plan name: gold\n  ... code goes on now ...\nThe while loop repeats until the user enters either silver or gold.\nCompile your code and run:\n./tester step2and3 -c step3\nThe output should match the output above.\nNow, Commit and Sync your code to github. Make sure the first 3 tests pass."
  },
  {
    "objectID": "labs/lab01.html#step-4.-switch-statement",
    "href": "labs/lab01.html#step-4.-switch-statement",
    "title": "Lab 01: Control Structures",
    "section": "Step 4. switch statement",
    "text": "Step 4. switch statement\nNow, write in code in vowel() that asks the user to enter a single lowercase letter. Your code must use a switch statement to test if the letter is a vowel or consonant. Vowels are ‘a’, ‘e’, ‘i’, ‘o’, and ‘u’. We’ll call ‘y’ a consonant for this exercise.\nUse default in your switch statement for the “consonant” case.\nHave your code produce output like this:\nThe letter is a vowel.\nor\nThe letter is a consonant.\nCompile your code and run:\n./tester step4\nThe output should match the output above.\nNow, Commit and Sync your code to github. Make sure the first 4 tests pass."
  },
  {
    "objectID": "labs/lab01.html#step-5.-for-loop-1",
    "href": "labs/lab01.html#step-5.-for-loop-1",
    "title": "Lab 01: Control Structures",
    "section": "Step 5. for loop, 1",
    "text": "Step 5. for loop, 1\nNow, write code in sevens():\n\ncreate an array of unsigned of size 8 called values\na for loop to initialize the values array to 0, 7, 14, 21, …\na series of assert statements to check that the 0th value is 0, 3rd value is 21, and 7th value is 49.\nA line to print out “All tests passed!”\nYou may have to #include &lt;cassert&gt;\n\nTest with:\n./tester step5\nNow, Commit and Sync your code to github. Make sure the appropriate tests pass."
  },
  {
    "objectID": "labs/lab01.html#step-6.-for-loop-2",
    "href": "labs/lab01.html#step-6.-for-loop-2",
    "title": "Lab 01: Control Structures",
    "section": "Step 6. for loop, 2",
    "text": "Step 6. for loop, 2\nNow, write code in sum():\n\ncreate an array of doubles, of size 100.\nwrite a for loop to fill in the array with the values 0.0, 0.1, 0.2, 0.3, etc.\nwrite a for loop to sum up all the values in the array – but this loop has to iterate from the last item down to the first.\n\n\n\n\n\n\n\nNote\n\n\n\nMake the loop variable be of type int, not unsigned, as this variable will be decremented down to -1, which cannot be represented by an unsigned.\n\n\n\nprint out the resulting sum\n\nTest with:\n./tester step6\nNow, Commit and Sync your code to github. Make sure the appropriate tests pass."
  },
  {
    "objectID": "labs/lab01.html#step-7.-defining-a-function",
    "href": "labs/lab01.html#step-7.-defining-a-function",
    "title": "Lab 01: Control Structures",
    "section": "Step 7. defining a function",
    "text": "Step 7. defining a function\nNow, write code to:\n\nimplement a function called getPlan() and move your code from Step 3 above into it. The function returns the string (“silver” or “gold”) that the user enters. This function (and the ones in the next steps) is again in functions.cpp and functions.h.\nmove the code that gets the number of months from the user into a function called getMonths(). This function returns the number of months a user enters. Note that the prompt asking the user to enter the number of months should read something nice, like this:\n\nEnter the number of months: \n\nmove the code that computes the cost into a function called computeCost(). This function takes the plan name and the months as arguments and returns the cost.\nUncomment and study step7 of tests.cpp. The code just does 4 things: call getPlan(), call getMonths(), call computeCost(), and print out the cost. Anyone who looks at that code will understand it because the code is short and uses good function names.\n\nTest with:\n./tester step7\nRun the test multiple times with various inputs to make sure the computation is correct.\nNow, Commit and Sync your code to github. Make sure all tests pass."
  },
  {
    "objectID": "labs/lab01.html#grading-rubric",
    "href": "labs/lab01.html#grading-rubric",
    "title": "Lab 01: Control Structures",
    "section": "Grading Rubric",
    "text": "Grading Rubric\nThis lab is worth 16 pts:\n\n2 points for each of the 7 steps\n\n1 pt: output is correct and\n1 pt: you followed the directions\n\n2 pt for perfect indentation and good variable names, function names, and comments (i.e., hospitable code). You should write a comment in your code only when the following block of code is not obvious to the trained reader. You should not write a comment for each line of code.\n\nWays students have lost points in the past:\n\n-1: no output for step7\n-1: you didn’t init step 5 with a for loop\n-1: step6 should be 495\n-0.5: step1 you should use elseif not nested elses\n-0.5: part4 the inside of each case should be indented"
  },
  {
    "objectID": "labs/lab02.html",
    "href": "labs/lab02.html",
    "title": "Lab 02: File I/O, Control Structures, and the Debugger",
    "section": "",
    "text": "Beware of the bugs!"
  },
  {
    "objectID": "labs/lab02.html#objectives",
    "href": "labs/lab02.html#objectives",
    "title": "Lab 02: File I/O, Control Structures, and the Debugger",
    "section": "Objectives:",
    "text": "Objectives:\nIn this exercise, you will:\n\nRead in a file and process its contents.\nPractice creating functions\nPractice writing for loops and if statements.\nUse the debugger to execute a program statement by statement."
  },
  {
    "objectID": "labs/lab02.html#step-0.-prepare",
    "href": "labs/lab02.html#step-0.-prepare",
    "title": "Lab 02: File I/O, Control Structures, and the Debugger",
    "section": "Step 0. Prepare",
    "text": "Step 0. Prepare\n\nClick this link and then “Accept this assignment”.\nWait a few seconds and refresh the page. Refresh until the page says “You’re ready to go!”. The page has a link to a github repo.\nClick the link to see your new repo on github.com.\nClick the green Code button and copy the SSH link it shows.\nIn a terminal,\n\ncd to the directory where you are putting all your CS112 assignments.\ntype git clone &lt;paste-the-contents-of-the-link-you-copied&gt;\n\ncd to the new directory containing your repo.\ntype code . to start up Visual Studio Code in that directory.\nMake sure both you and your partner are in the same Team for this assignment.\nInspect the code you got in the assignment."
  },
  {
    "objectID": "labs/lab02.html#finding-duplicates-in-an-array-of-integers",
    "href": "labs/lab02.html#finding-duplicates-in-an-array-of-integers",
    "title": "Lab 02: File I/O, Control Structures, and the Debugger",
    "section": "Finding duplicates in an array of integers",
    "text": "Finding duplicates in an array of integers\nIn this assignment, you will write a short function, findDuplicate(), that searches an array of integers to find the first pair of duplicate values. If a duplicate value is found, the function returns true, and “returns” the duplicate value through an Out parameter. If no duplicate value is found, the function returns false.\nThink about the algorithm to find a duplicate value in an array. Consider the following array:\n\n\n\n\n\n\n\n\n\n\n\n\n11\n7\n31\n4\n7\n\n\n\n\nHow would you write code to detect that 7 is in the array twice? Talk to your partner about your algorithm. I highly recommend you write pseudo-code for your algorithm. If you want to finish the lab in an efficient way, you’ll take time to write the algorithm and test it on some inputs, revising it until you get it right.\nWhen you have an algorithm, consider this array:\n\n\n\n\n\n\n\n\n\n\n\n11\n7\n7\n4\n71\n\n\n\nAnd this array:\n\n\n\n\n\n\n\n\n\n\n\n7\n43\n31\n12\n71\n\n\n\nDoes your algorithm seem to work on these arrays? Will your algorithm work for arrays with 10,000 values? How about an array with 0 elements or 1 element? Does it work?"
  },
  {
    "objectID": "labs/lab02.html#step-1.-write-the-function",
    "href": "labs/lab02.html#step-1.-write-the-function",
    "title": "Lab 02: File I/O, Control Structures, and the Debugger",
    "section": "Step 1. Write the function",
    "text": "Step 1. Write the function\nIn functions.h, write the prototype for your function. The prototype is just the first line of the function, without the actual implementation. Study the table below to understand what parameters the function should take. Then try to write that first line of the function. If you can’t get it, I’ll give the answer just below the table.\nYour function is called findDuplicate(), has 3 parameters, and returns bool.\n\n\n\n\n\n\n\n\n\nParameter name\nParameter type\nDescription\n\n\n\n\narr\narray of int\narr of integers to search\n\n\nsize\nint\nsize of the array\n\n\ndup_value\nint &\nThe out parameter containing the first duplicate value, if one is found.\n\n\n\nThe function’s prototype should look like this:\nbool findDuplicate(int arr[], int size, int &dup_value);\nThat’s all that you should have in your .h file.\nIn functions.cpp, implement your function. To repeat from above: If a duplicate value is found, the function returns true, and “returns” the duplicate value through the out parameter, dup_value. If no duplicate value is found, the function returns false. Work from your algorithm. Do your best to implement the function correctly, but don’t take too much time on this, as the next steps will help you make sure your code is correct."
  },
  {
    "objectID": "labs/lab02.html#step-2.-unit-test-your-function",
    "href": "labs/lab02.html#step-2.-unit-test-your-function",
    "title": "Lab 02: File I/O, Control Structures, and the Debugger",
    "section": "Step 2. Unit test your function",
    "text": "Step 2. Unit test your function\nTake a look at the file tests.cpp. This file uses a unit testing framework called catch, implemented in catch.hpp.\nNotice that the file #includes \"functions.h\" and calls findDuplicate() one or more times in each test. The results of the call to findDuplicate() are tested by REQUIRE statements, which are basically identical to the assert() statements we’ve been using.\nWhen you compile your code using make tester, a tester executable is created. That executable runs the code in tests.cpp, but also allows you to do much more: you can just list the tests, run only some of the tests, configure how the output should look, etc.\nTry compiling your code by typing make tester. If it builds, try running ./tester -s to see output from all the tests that are executed.\nTo run only the first test, you can do:\n./tester \"findDuplicate size 0\"\nIf your code does not pass this test, try fixing it. Take 5 minutes maximum to try to fix your code. Whether you succeed or not, go on."
  },
  {
    "objectID": "labs/lab02.html#step-3.-using-the-debugger",
    "href": "labs/lab02.html#step-3.-using-the-debugger",
    "title": "Lab 02: File I/O, Control Structures, and the Debugger",
    "section": "Step 3. Using the Debugger",
    "text": "Step 3. Using the Debugger\nA debugger is a program that allows you to set breakpoints in your code, and then run your code. When a breakpoint is encountered, the debugger stops, and allows you to view variables’ values, the call stack, etc.\nThis video shows you how to use the debugger with VS Code. You probably won’t be able to watch this video on a lab machine, but if you have a laptop and/or phone and have earbuds or headphones, you should watch the video. Then, go down to Step 3.5 below.\nIf you cannot watch the video, I’ll describe how to use the debugger here:\nOpen your file that you want to debug. E.g., your functions.cpp file. Here is mine:\n\nYou can see that I have a good start on the function, but it isn’t complete. But, I want to make sure I’m passing in my parameters correctly, and a good way to do that is to use the debugger.\nThe first thing I have to do is build the project:\nmake tester\nIf you look at tests.cpp, you can see a bunch of calls to findDuplicate(), from line 10, line 21, etc.\nTo check if our parameters are being passed in correctly, let’s set a breakpoint on line 2. To do that, put your pointer to the left of the 2 on line 2, and click. You should see a red dot.\n\nYou can set multiple breakpoints at the same time. You could, for example, set a breakpoint on line 3 and line 5, so that you can see in what circumstances your code returns true or false.\nNow, we can start the debugger. The easiest way is to hit F5. Or you can go to Run -&gt; Start Debugging.\n(If you get a weird error, just go on here. You might be trying to debug the wrong executable.)\nWhen you start debugging (successfully), your screen changes quite a bit.\nYou’ll see a menu bar appear at the top of the screen. You’ll also see the debugging icon on the left side become bright:\n\nYou’ll see a debugging window on the left side. And, you’ll see your code run and the debugger will stop at the first breakpoint:\n\n\n\n\n\n\n\nCaution\n\n\n\nIf you saw an error when you started debugging, you might be trying to debug the wrong executable. Look at the image just above. Notice that next to the green arrow is a small menu, with a dropdown arrow. You might be trying to debug the “lab2” program instead of the tester program. If you don’t see “tester”, click on the dropdown arrow and choose “Launch tester”, then click the green right-arrow and try again.\n\n\nYou know where your code has stopped because you see the yellow “arrow” overlaying the red dot. This means your code has run to this point and is stopped.\nOn the lower-left corner you see the call stack. The top frame in the call stack is findDuplicate(). Below that you see that findDuplicate() was called from C_A_T_C_H_T_E_S_T_0() in tests.cpp at line 10. Click on that to see tests.cpp and where it called findDuplicate().\n\nNow, to continue from the breakpoint, we can use the menu bar at the top. If you hover your mouse over the items in the menu bar, you’ll see: Continue (F5), Step Over (F10), Step Into (F11), Step Out (Shift F11), and Stop (Shift-F5). Step Over really means “go to the next line”.\n\nClick on Step Over now. You should see your pointer go to line 3, which returns false. Step Over a few more times, and you’ll get back to tests.cpp, line 11. Now, click Continue. That will make the debugger run the code again until it encounters the next breakpoint – which is back at line 2 of functions.cpp. You can again inspect the parameter values.\nClick Continue again. Notice that you are still at line 2, but look closely to see where findDuplicates() was called from. Which line of tests.cpp called findDuplicates()?\nClick on C_A_T_C_H_T_E_S_T_6() on the lower-left corner of the screen, and look at the values of the Local variables in the upper-right corner. What values are in the numbers array?\nThis really concludes our introduction to using the debugger."
  },
  {
    "objectID": "labs/lab02.html#step-3.5-caveats",
    "href": "labs/lab02.html#step-3.5-caveats",
    "title": "Lab 02: File I/O, Control Structures, and the Debugger",
    "section": " Step 3.5 Caveats",
    "text": "Step 3.5 Caveats\n📌 Please note these caveats:\n\nIf you make changes to your code, you have to recompile before using the debugger again. Starting or restarting the debugger will not first recompile your code! (To recompile, use make tester .)\nRunning the debugger on MacOS (gdb) has problems. I’ve never gotten it to work on my Mac. Prof. Araújo has been working on that and is comming up with a solution “soon”.\nI haven’t tested running the debugger on Windows. If you want to try that, you will probably have to change the .vscode/launch.json file. When you open that file in VSCode, you get a menu that allows you to insert new configurations – so it might be super easy to get this working – or not easy at all. 🙂"
  },
  {
    "objectID": "labs/lab02.html#step-4.-get-your-code-working-against-all-tests",
    "href": "labs/lab02.html#step-4.-get-your-code-working-against-all-tests",
    "title": "Lab 02: File I/O, Control Structures, and the Debugger",
    "section": "Step 4. Get your code working against all tests",
    "text": "Step 4. Get your code working against all tests\nUsing the debugger and your brain 🧠, fix your code such that it passes all the tests when you run\n./tester"
  },
  {
    "objectID": "labs/lab02.html#step-5.-implement-your-application",
    "href": "labs/lab02.html#step-5.-implement-your-application",
    "title": "Lab 02: File I/O, Control Structures, and the Debugger",
    "section": "Step 5. Implement your application",
    "text": "Step 5. Implement your application\nNow that you have a good function that finds duplicates, use it to implement a simple application.\nLook in main.cpp, where you will find the steps to implement, as comments.\nCompile your code with\nmake lab2\nImplement steps 1 - 6 of the algorithm. Step 4 is implemented for you already (assuming you read in the number of lines in the file into a variable named size).\nI HIGHLY RECOMMEND YOU IMPLEMENT your code in small iterations: just write the code for Step 1., compile it and make sure it is correct. Then go on to Step 2. Repeat…\nStep 7. says to “print appropriate output”. This means your application should either print out that there are no duplicates, or should print out that a duplicate was found, and should print what that duplicate value is. E.g., here are a few runs of my solution:\n% ./lab2\nEnter a filename: input_files/in3.txt\nEnter the number of lines in the file: 0\nNo duplicate number was found.\nand another run:\n% ./lab2\nEnter a filename: input_files/in5.txt\nEnter the number of lines in the file: 5\nA duplicate number, 91, has been found.\n\n\n\n\n\n\nNote\n\n\n\nYour output must match the output above EXACTLY. You should try your solution against all the files in the input_files/ directory. These files will be used in the autograding tests run when you submit."
  },
  {
    "objectID": "labs/lab03.html",
    "href": "labs/lab03.html",
    "title": "Lab 03: Classes",
    "section": "",
    "text": "A student created by AI."
  },
  {
    "objectID": "labs/lab03.html#step-0.-prepare",
    "href": "labs/lab03.html#step-0.-prepare",
    "title": "Lab 03: Classes",
    "section": "Step 0. Prepare",
    "text": "Step 0. Prepare\n\nClick this link and then “Accept this assignment”. Make sure you and your partner are in the same Team.\nWait a few seconds and refresh the page. Refresh until the page says “You’re ready to go!”. The page has a link to a github repo.\nClick the link to see your new repo on github.com.\nClick the green Code button and copy the SSH link it shows.\nIn a terminal,\n\ncd to the directory where you are putting all your CS112 assignments.\ntype git clone &lt;paste-the-contents-of-the-link-you-copied&gt;\n\ncd to the new directory containing your repo.\ntype code . to start up Visual Studio Code in that directory.\nInspect the code you got in the assignment."
  },
  {
    "objectID": "labs/lab03.html#part-1-a-student-class",
    "href": "labs/lab03.html#part-1-a-student-class",
    "title": "Lab 03: Classes",
    "section": "Part 1: A Student Class",
    "text": "Part 1: A Student Class\n\nStep 1. Create the class\nWe will create a class to represent a Student. You probably have not created a class in C++ before, so here are the Pair.h and Pair.cpp classes I created as an example in class. Use this code as an example/template.\nThe instance variables for a Student will be:\n\n\n\n\n\n\nInstance Variable Name\n\n\nType\n\n\nDefault value\n\n\nNotes\n\n\n\n\n\n\nmyName\n\n\nstring\n\n\n“”\n\n\nImmutable (NOTE: this is not a const in our class, but we will not be making setter functions for these immutable values.)\n\n\n\n\nmyId\n\n\nunsigned int\n\n\n0\n\n\nImmutable (NOTE: this is not a const in our class, but we will not be making setter functions for these immutable values.)\n\n\n\n\nmyGpa\n\n\nfloat\n\n\n0.0\n\n\n\n\n\n\nmyMajor\n\n\nstring\n\n\n“Undecided”\n\n\n\n\n\n\n\nIn Student.h, you should see the definition of the Student class. In that class, create the private: section, and in there define the 4 instance variables, shown in the table above. You’ll have to #include &lt;string&gt; and do the using namespace business…\nCompile (type: make tester) and fix any errors. (You may see warnings – you can ignore those for now.)\nIn Student.h define the default constructor (in the public: section). In Student.cpp, create the default constructor implementation, initializing the instance variables to their default values, as shown in the table above.\n\n\n\n\n\n\nCompile and fix any errors.\n\n\n\n\n\n\n\n\nStep 2. Create getters\nIn your tests.cpp, you’ll find the first SECTION of unit tests called “student getters”, within the TEST_CASE “Student class”. Uncomment the first SECTION, so that the code to construct a Student object and then test getMajor() runs.\n\n\n\n\n\n\nCompile\n\n\n\nThe compilation should fail because we haven’t defined getMajor() yet. There should be no other problems.\n\n\nSo, create a getter function (in both the Student.h and Student.cpp files) called getMajor().\nCompile and run (in a terminal, run ./tester \"Student class\") – this should work now.\nNow, repeat the above steps for the other tests and instance variables (maybe make this part more clear in the future). Start with a test in tests.cpp first, then implement the prototype and code.\n\n\n\n\n\n\nNOTE\n\n\n\nDon’t delete any old tests – just keep adding more. Put each test in its own SECTION within the “Student class” TEST_CASE.\n\n\n\n\nStep 3. Create setters\nFor the instance variables that are mutable (see the table above), create setter methods. But first, for each, create a test. Put all of these tests in a new SECTION within the “Student class” TEST_CASE.\n\n\n\n\n\n\nTip\n\n\n\nExample: for the setGpa test, set the student’s gpa to 3.25, then in a REQUIRE statement, call getGpa() and make sure the value is 3.25.\n\n\n\n\nStep 4. Create an explicit-value constructor\nNow, create a second constructor – the explicit-value constructor. This constructor should take the two immutable fields as parameters, and store their values in the instance variables. Initialize all the other variables to their default values. BUT FIRST, create tests. I called my SECTION “student explicit-value constructor”, and in it I create a Student with the explicit-value constructor and then use the getters on all instance variables to make sure the object has the correct values in it.\n\n\n\n\n\n\nCompile and test the result. Fix any errors.\n\n\n\n\n\n\nYou are now done with this simple class. We could add tons of other functionality to it, but not now…\nBefore you go on, Commit and Sync your changes to your github repo. You can easily do this from VSCode. After you do this, you should be able to see that the automated tests fail – but the one test that tests the “Student class” passes. If it does not pass, fix your code (or your tests), and resubmit until it does pass."
  },
  {
    "objectID": "labs/lab03.html#part-2-fraction-class",
    "href": "labs/lab03.html#part-2-fraction-class",
    "title": "Lab 03: Classes",
    "section": "Part 2: Fraction class",
    "text": "Part 2: Fraction class\nA Fraction class is a useful class to create. It stores a numerator and denominator and can do things like represent itself nicely (e.g., “3/4”), simplify itself, multiply itself with another fraction, etc.\n\nStep 1. Test the Fraction class\nWe’ll continue to use tests.cpp – don’t remove any code from there. But, now we’ll also use it to create and test Fraction class instances. However, our makefile does not compile the Fraction stuff yet.\nEdit the makefile, adding Fraction.cpp to the SOURCES line.\n\n\n\n\n\n\nTip\n\n\n\nSpace separated! Do not remove Students.cpp.\n\n\nIn tests.cpp, below all your tests for the Student class, add the tests shown below:\nTEST_CASE(\"Fraction class\") {\n    SECTION(\"fraction constructors\") {\n        SECTION(\"default\") {\n            Fraction fr;\n            REQUIRE(fr.getNumerator() == 0);\n            REQUIRE(fr.getDenominator() == 1);\n        }\n        SECTION(\"explicit value\") {\n            Fraction fr(2, 4);\n            REQUIRE(fr.getNumerator() == 2);\n            REQUIRE(fr.getDenominator() == 4);\n        }\n    }\n}\n\n\n\n\n\n\nImportant\n\n\n\nYou’ll have to #include \"Fraction.h\" at the top of the file.\n\n\n\n\nStep 2. Add the instance variables and constructors\nAdd the two instance variables – myNumerator and myDenominator (both integers) – to the class definition in the .h file.\nUpdate the default constructor, to initialize myNumerator to 0 and myDenominator to 1.\nNow, implement the explicit-value constructor, which takes both the numerator and denominator as parameters, and stores them in myNumerator and myDenominator. Don’t forget to put the declaration in the .h file and implementation in the .cpp file.\n\n\n\n\n\n\nNote\n\n\n\nWe will compile our tester after the next section.\n\n\n\n\nStep 3. getters\nAdd a new SECTION (within the “Fraction class” TEST_CASE) called “fraction getters” and SECTIONs to call the getter functions and test their results. Compilation should fail, as expected.\n\n\n\n\n\n\nWarning\n\n\n\nYes, this is repetitive as we already used them for the default constructors. Just to make sure we cover all our bases, and this can easily be seen in our tests, make another SECTION to quickly check the getter functions again.\n\n\nNow, create getter functions for each.\nNow the compilation and execution should succeed with all tests passing.\n\n\n\n\n\n\nNote\n\n\n\nYou can run only some tests by putting the name of the test on the command line. E.g., you can run only the Fraction tests by running:\n./tester \"Fraction class\"\n\n\n\n\nStep 4. setters\nCreate tests to test setters.\nThen, create the methods and the code so it will compile and run successfully.\n\n\nStep 5. Fanciness\nNow, in setDenominator(), check if the parameter is 0 – an illegal value. If so, throw an invalid_argument exception (remember to #include &lt;stdexcept&gt; first). You can do this by using the line:\nthrow invalid_argument(\"Your error message here!\"); // (Change the error message please!)\nHere is a test for that, assuming you have a fraction called f1:\nSECTION(\"setDenominator\") {\n    REQUIRE_THROWS_AS(f1.setDenominator(0), invalid_argument);\n}\n\n\nStep 6. Display as a string\nCreate a test to call asString() on a Fraction object: If you create a new Fraction object newFrac and call newFrac.asString(), you can REQUIRE that the result should be “0/1”. Initially, this test will fail, so create the method, which returns a string.\n\n\n\n\n\n\nNote\n\n\n\nIn asString() you can use to_string(anInt) to convert an integer into a string. And, you can concatenate strings with +. to_string() is defined in &lt;string&gt; so you’ll have to #include that.\n\n\nWhen that works, use the setters to change the numerator and denominator for a fraction, and then write a test to ensure that asString() still produces the correct results."
  },
  {
    "objectID": "labs/lab03.html#submission",
    "href": "labs/lab03.html#submission",
    "title": "Lab 03: Classes",
    "section": "Submission",
    "text": "Submission\nCommit your changes to your github repo. After you do this, verify that the automated tests pass. The automated tests just run the tests.cpp file you have been editing.\nDon’t forget to look at the Grading Rubric at the top to make sure you get as many points as possible."
  },
  {
    "objectID": "labs/lab03.html#grading-rubric",
    "href": "labs/lab03.html#grading-rubric",
    "title": "Lab 03: Classes",
    "section": "Grading Rubric",
    "text": "Grading Rubric\nThis lab is worth 20 pts:\n\n10 points for each of Part 1 and Part the Second: 20 pts\n\n6 pts for correctness\n1 pt for perfect indentation and good variable names, function names, and comments (i.e., hospitable code). You should write a comment in your code only when the following block of code is not obvious to the trained reader. You should not write a comment for each line of code.\n3 pts for sufficient test cases to prove that the code is correct.\n\n\nWays students have lost points in the past:\n\n-2: Test doesn’t pass.\n-1: Missing name and id.\n-3: Missing steps. Next time speak to professor."
  },
  {
    "objectID": "labs/lab14.html",
    "href": "labs/lab14.html",
    "title": "Lab 14: Hash Tables Project",
    "section": "",
    "text": "Definition of Grinch."
  },
  {
    "objectID": "labs/lab14.html#learning-objectives",
    "href": "labs/lab14.html#learning-objectives",
    "title": "Lab 14: Hash Tables Project",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nIn this exercise, you will:\n\nbuild a hash table data structure\nexperiment with hashing algorithms to distribute data across all buckets, as much as possible."
  },
  {
    "objectID": "labs/lab14.html#step-0",
    "href": "labs/lab14.html#step-0",
    "title": "Lab 14: Hash Tables Project",
    "section": "Step 0",
    "text": "Step 0\nAccept the Assignment.\nOur hash table will be a STL vector of STL sets (in class we used a vector of linked lists). Your code will read a file, dictionary.txt, that contains “all” the words in the English language, and insert each word into the hash table. There are about ~127,000 words in the file, but we will use a fairly small number of buckets, so there will be many collisions.\nThe goal of this exercise is to experiment with hashing algorithms to see if you can find one that distributes items well."
  },
  {
    "objectID": "labs/lab14.html#step-1-build-the-hashtable-data-structure-and-constructor",
    "href": "labs/lab14.html#step-1-build-the-hashtable-data-structure-and-constructor",
    "title": "Lab 14: Hash Tables Project",
    "section": "Step 1: Build the HashTable data structure and constructor",
    "text": "Step 1: Build the HashTable data structure and constructor\nInspect the code in HashTable.h and HashTable.cpp. There is not much there, but it is a start. Do notice that there is a static constant integer called TABLE_SIZE, initialized to the value 200.\nCreate the hash table data structure in the private: section, calling it myTable. For this project, the table must be a vector of sets of strings (in class we used a vector of lists).\nIn the constructor, initialize myTable to have TABLE_SIZE buckets by calling\nmyTable.resize(TABLE_SIZE);\nAlso, in the constructor initialize mySize to 0.\nCompile your code to make sure what you have written compiles."
  },
  {
    "objectID": "labs/lab14.html#step-2-insert-and-hash",
    "href": "labs/lab14.html#step-2-insert-and-hash",
    "title": "Lab 14: Hash Tables Project",
    "section": "Step 2: insert() and hash()",
    "text": "Step 2: insert() and hash()\nThe prototypes for insert() and hash() are defined in the .h file. Now, you must implement them in the .cpp file. Use the code we saw in the slides in class for the hash function. The function should add up the first and last characters of the string, modding the result by TABLE_SIZE.\nTry to compile the code using make. It should compile. Fix any issues if your compilation fails."
  },
  {
    "objectID": "labs/lab14.html#step-3-main",
    "href": "labs/lab14.html#step-3-main",
    "title": "Lab 14: Hash Tables Project",
    "section": "Step 3: main()",
    "text": "Step 3: main()\nNow, create code in main(). Your code should define a HashTable object first.\nThen, open the file dictionary.txt for reading, and read each word from the file, one at a time, inserting each word into the hash table.\nNext, have the code close the file.\nCompile your code."
  },
  {
    "objectID": "labs/lab14.html#step-4-testing",
    "href": "labs/lab14.html#step-4-testing",
    "title": "Lab 14: Hash Tables Project",
    "section": "Step 4: Testing",
    "text": "Step 4: Testing\nOf course, at this point, we have no idea if the items have been distributed well in the hash table, because we have no way to inspect the hash table contents.\nNotice that there is a method called dumpInfo() defined, but currently the code does nothing. Fill in the code to do the following:\n\nFor each bucket, print how many items are in it.\nCount and print the number of empty buckets.\nCalculate and print the average number of items in non-empty buckets.\n\nHere is a snippet of my output. Make your output look similar:\nnumber of items in bucket 0: 415\nnumber of items in bucket 1: 351\nnumber of items in bucket 2: 307\nnumber of items in bucket 3: 414\nnumber of items in bucket 4: 293\n...\nnumber of items in bucket 197: 560\nnumber of items in bucket 198: 484\nnumber of items in bucket 199: 341\n--------------------------\nTotal number of elements in the hash table: 127141\nNumber of empty buckets: 0\nAverage number of items in non-empty buckets: 635\n\n\n\n\n\n\nNote\n\n\n\nNote: the output above is from after I changed the number of buckets in my data structure, and tweaked the hash algorithm, which you’ll do below.\n\n\nAfter you implement your dumpInfo() method, call it from your main() code."
  },
  {
    "objectID": "labs/lab14.html#step-5-tweak-your-hashing-algorithm-and-table-size",
    "href": "labs/lab14.html#step-5-tweak-your-hashing-algorithm-and-table-size",
    "title": "Lab 14: Hash Tables Project",
    "section": "Step 5: Tweak Your Hashing Algorithm and Table Size",
    "text": "Step 5: Tweak Your Hashing Algorithm and Table Size\nYou will notice that the basic hashing algorithm (adding up the first and last characters of each string) does a very poor job of distributing strings across all buckets in the hash table. Your goal now is to improve the hashing algorithm to improve the distribution.\nExperiment with different algorithms, but make sure they follow the criteria laid out in class:\n\nO(1)\ndistribute values across all buckets.\ndeterministic.\n\nYou MAY increase the number of buckets, but it must remain at or below 250 total. Do not change how buckets are implemented – they should remain sets.\nDo not spend more than 1 hour tweaking your algorithm. Make sure your final code implements your best algorithm.\n\n\n\n\n\n\nImportant\n\n\n\nWrite a comment in your hash() function that describes your algorithm, explaining why you think it works as well as it does."
  },
  {
    "objectID": "labs/lab14.html#step-6-submit",
    "href": "labs/lab14.html#step-6-submit",
    "title": "Lab 14: Hash Tables Project",
    "section": "Step 6: Submit",
    "text": "Step 6: Submit\nSubmit your code via github, as normal.\n\n\n\n\n\n\nWarning\n\n\n\nIF YOU WORKED WITH A PARTNER, ONLY ONE OF YOU HAS TO SUBMIT, but UPDATE THE README.md to INCLUDE BOTH NAMES."
  },
  {
    "objectID": "labs/lab14.html#grading-rubric",
    "href": "labs/lab14.html#grading-rubric",
    "title": "Lab 14: Hash Tables Project",
    "section": "Grading Rubric",
    "text": "Grading Rubric\n20 points total:\n\n10 pts: hash table code (not including the hash function) is correct\n5 pts: hash function obeys the criteria laid out in class.\n3 pts: hash function works well (not obviously leaving many buckets empty and have some be very full).\n2 pts: code is clean and hospitable.\n\nWays students lost points in the past:\n\n-2: Hash function does not appear to be evenly distributed but fills lower-numbered buckets way more (~2000 vs ~50)\n-4: Main function does not load words from file or call dumpInfo\n-1: Missing call to dumpInfo in main\n-3: Buckets are not evenly distributed (with many below 50 or above 2000) and some are empty. The smallest buckets are odd-numbered, which indicates a quirk in the algorithm which disfavors that half of the buckets\n-4: Most of the buckets are empty; a hashing algorithm should seek to evenly distribute words into buckets\n-1: Please output all bucket counts per instructions so the distribution can be seen."
  },
  {
    "objectID": "labs/lab09-hint-peektop.html",
    "href": "labs/lab09-hint-peektop.html",
    "title": "Lab 09: Hint peekTop()",
    "section": "",
    "text": "The stub of peekTop() should look like this:\nItem Stack::peekTop() const {\n}\nThe variable mySize always contains the number of items in the Stack:\n\nwhen the stack is empty, mySize == 0;\nwhen the stack contains 1 item, mySize == 1 and the top item is at index 0;\nwhen the stack contains two items, mySize == 2 and the top item is at index 1;\nwhen the stack contains three items, mySize == 3 and the top item is at index 2;\netc.\n\nMore generally, when the stack is not empty, the top item is 1 position “down” from the value of mySize.\nSo when the stack is not empty, peekTop() should return the item from myArray that is 1 less than the current value of mySize."
  },
  {
    "objectID": "labs/lab04.html",
    "href": "labs/lab04.html",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "",
    "text": "In this exercise, you will:\n\nBuild a class that uses dynamic allocation/deallocation.\nUse pointer variables to access items in a dynamically-allocated array.\n\n\n\n\n\n\nAn array for a data structures assignment created by AI."
  },
  {
    "objectID": "labs/lab04.html#objectives",
    "href": "labs/lab04.html#objectives",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "",
    "text": "In this exercise, you will:\n\nBuild a class that uses dynamic allocation/deallocation.\nUse pointer variables to access items in a dynamically-allocated array.\n\n\n\n\n\n\nAn array for a data structures assignment created by AI."
  },
  {
    "objectID": "labs/lab04.html#introduction",
    "href": "labs/lab04.html#introduction",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Introduction",
    "text": "Introduction\nYou should know how to get the assignment. So, do it.\n\n\n\n\n\n\nImportant\n\n\n\nDon’t forget to make sure you and your partner are in the same Team! Also edit the README.md file and put both of your names and emails in the file.\n\n\nThe Vec class is a simpler version of the vector&lt;T&gt; class template available in the C++ standard template library (STL). It will provide the basic functionality, without some of the more advanced “bells and whistles” of the STL version.\nThe class in Vec.h is a mere shell at this point. Filling in this shell is our task this week."
  },
  {
    "objectID": "labs/lab04.html#step-1.-getting-started",
    "href": "labs/lab04.html#step-1.-getting-started",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 1. Getting Started",
    "text": "Step 1. Getting Started\nOpen each file and take a moment to browse through them, to get a sense of what each one contains. Note that test.cpp contains tests for a variety of Vec operations.\nOur approach today will be to use the following steps to build each operation:\n\nThis exercise will provide you with a description of what the operation should do, and a stub for the method that provides that operation;\nYou will uncomment the call to the test for that operation in tests.cpp\nYou will complete the method by adding statements to the stub; and\nYou will compile and run the project. (do make tester && ./tester)\n\n\n\n\n\n\n\nCompile. debug and fix any errors.\n\n\n\nIf all is well, you can then proceed to the next operation; otherwise you will need to debug your operation to figure out why it is failing the test, recompile, and rerun the test, until it is passed."
  },
  {
    "objectID": "labs/lab04.html#step-2.-instance-variables",
    "href": "labs/lab04.html#step-2.-instance-variables",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 2. Instance Variables",
    "text": "Step 2. Instance Variables\nIf you look in Vec.h, you’ll see that we are (for now) using a typedef to define the identifier Item as a synonym for the type double.\nYou’ll also see that the private: section of class Vec is currently empty. As a minimalist dynamic array, our Vec will need to “remember” two things:\n\nHow many Items it is currently storing; and\nThe Items it is currently storing.\n\nTo let a Vec “remember” the first of these, add an instance variable named mySize of type unsigned:\nprivate:\n    unsigned mySize;\nTo let a Vec “remember” the second of these, add an instance variable named myArray capable of storing the address of an Item:\nprivate:\n    unsigned mySize;\n    Item   *myArray;\nWith these two variables, a Vec object can “remember” (i) how many items it is storing, and (ii) the address of a dynamically allocated array in which its items are stored."
  },
  {
    "objectID": "labs/lab04.html#step-3.-the-default-constructor",
    "href": "labs/lab04.html#step-3.-the-default-constructor",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 3. The Default Constructor",
    "text": "Step 3. The Default Constructor\nThe role of the default constructor is to provide the instance variables with default values. In a data structure, these are usually values that are appropriate for an “empty” structure. In Vec.cpp, complete the default constructor for the class, so that it sets mySize to zero, and sets myArray to nullptr. Compile and run the project (make tester && ./tester).\nThe test should pass, but notice that it isn’t actually doing anything… To make a useful test, we need to see if mySize is 0 and myArray is nullptr. However, myArray and mySize are private, so the test cannot “reach into” the innards of the Vec object to check the values. To resolve this, we will create a getter for mySize. In the .h file, in the public: section, add the prototypes:\nunsigned getSize() const;\nIn the Vec.cpp file, add this code:\nunsigned Vec::getSize() const {\n}\nand finish the code which returns mySize.\n\n\n\n\n\n\nNote\n\n\n\nNotice that we are NOT going to add a getter method for myArray, which would allow a user of the Vec class to get the address where the values are being stored. We do not want to expose this internal detail to the user, as the user could abuse it and start putting values directly into memory. So, because we won’t make a getter for myArray, we won’t be able to make tests to check the value of myArray.\n\n\nUncomment the lines in the first (“default”) SECTION and compile and run (make tester && ./tester).\n\n\n\n\n\n\nBefore you go the next step!\n\n\n\nWhen your definition passes the test, continue; otherwise fix and retest your constructor."
  },
  {
    "objectID": "labs/lab04.html#step-4.-the-explicit-value-constructor",
    "href": "labs/lab04.html#step-4.-the-explicit-value-constructor",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 4. The Explicit-Value Constructor",
    "text": "Step 4. The Explicit-Value Constructor\nThe explicit-value constructor’s role is to initialize an object using values provided by the user. In a data structure, the user often wants to specify a non-zero starting size for the structure. (e.g., Vec v(5); should construct v as a vector capable of storing 5 items.) To store the value the user specifies, our constructor will need a parameter, so we might start by writing this stub for the constructor:\nVec::Vec(unsigned size) {\n}\nPut the above code in your .cpp file, and add a prototype for this constructor to the Vec class in Vec.h. Then in tests.cpp, uncomment the first 2 lines of code in the “explicit-value” SECTION that tests this constructor. Save/compile/run the tests. The test should fail. To make it pass, add code to your explicit-value constructor. Here is the algorithm to follow:\n\nSet mySize to size\nIf size is positive (greater than zero):\n\nDynamically allocate an array of size values of type Item, and store the address of the array in myArray; and\nSet each of the Items in that array to zero.\n\nOtherwise:\n\nSet myArray to nullptr.\n\n\nContinue when your class passes all tests."
  },
  {
    "objectID": "labs/lab04.html#step-5.-getting-the-value-of-an-item",
    "href": "labs/lab04.html#step-5.-getting-the-value-of-an-item",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 5. Getting the Value of an Item",
    "text": "Step 5. Getting the Value of an Item\nThe rest of the test for the “explicit-value constructor” looks to see if myArray was initialized correctly. In order to do this, we need to be able to retrieve the value in each location in myArray. To do that, we’ll implement a getItem() method that lets us retrieve the value of an item at a given index (e.g., Item it = v.getItem(i);). Since this method (i) needs the index of the value it is to retrieve, and (ii) does not change its receiver’s instance variables, we will start by defining this stub:\nItem Vec::getItem(unsigned index) const {\n}\nPlace a prototype for this method in the Vec class, and in tests.cpp, uncomment the rest of the test code in the “explicit-value” constructor SECTION. For the sake of time, here is the code for .cpp file:\nItem Vec::getItem(unsigned index) const {\n    if (index &lt; 0 || index &gt;= mySize) {\n        throw range_error(\"Bad index\");\n    }\n    return myArray[index];\n}\nWhen all tests pass, continue.\n\n\n\n\n\n\nNote\n\n\n\nThere is a TEST_CASE in tests.cpp to fully test getItem(), but it relies on setItem(), which we have not implemented yet. So, don’t uncomment that test case yet."
  },
  {
    "objectID": "labs/lab04.html#step-6.-setting-the-value-of-an-item",
    "href": "labs/lab04.html#step-6.-setting-the-value-of-an-item",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 6. Setting the Value of an Item",
    "text": "Step 6. Setting the Value of an Item\nOur next operation is to set the value of a particular item in a Vec (e.g., v.setItem(i, val);). Since the method needs both the index of the item to change, and the new value for the item, we will start with this stub:\nvoid Vec::setItem(unsigned index, const Item& it) {\n}\nPlace a prototype for this method in the Vec class, and in tests.cpp, uncomment the code to test “setItem”.\nTry to build and run the test to see what errors you get; then complete the stub so that it passes the test. Again, for the sake of time, here is the code for Vec.cpp.\nvoid Vec::setItem(unsigned index, const Item& it) {\n    if (index &lt; 0 || index &gt;= mySize) {\n      throw range_error(\"Bad index\");\n    }\n    myArray[index] = it;\n}\nWhen all tests pass for testing setItem, also uncomment the getItem TEST_CASE. If you have everything working, you should be passing 29 assertions in 9 test cases."
  },
  {
    "objectID": "labs/lab04.html#step-7.-the-copy-constructor",
    "href": "labs/lab04.html#step-7.-the-copy-constructor",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 7. The Copy Constructor",
    "text": "Step 7. The Copy Constructor\nThe compiler invokes a special copy constructor any time it needs a copy of an object, for example:\n\nWhen a function returns an object; OR\nWhen an object is passed as an argument to a call-by-value parameter.\n\nThe C++ compiler supplies a default copy constructor, but it merely does a bit-by-bit copy of the instance variables of the object being copied. This bit-copy is inadequate for classes with pointer instance variables, because it just copies the address within such variables, rather than making a distinct copy of the dynamically allocated memory to which that address points. Because of this, every class that contains a pointer instance variable should define its own copy constructor that makes a distinct copy of the object, including its dynamically allocated memory.\nThe stub for a Vec copy constructor looks like this:\nVec::Vec(const Vec& original) {\n}\n\n\n\n\n\n\nImportant\n\n\n\nIf we were to mistakenly make the copy constructor’s parameter a call-by-value parameter instead of a call-by-const-reference parameter, an infinite recursion will occur when the copy constructor is invoked. The reason is that passing a Vec to a call-by-value parameter will invoke the copy constructor, which will take the thing to be copied as a parameter, which will invoke the copy constructor, which will take the thing to be copied as a parameter, which will invoke the copy constructor, which… To avoid this, the parameter of a copy constructor should always be a const-reference parameter, as shown above.\n\n\nAdd the code above to the .cpp file. Then, add a prototype to the Vec class, and in tests.cpp uncomment the code in the “copy” constructor SECTION to test it. Then add statements to your stub to construct a Vec that is a distinct copy of original, and check to see if the tests pass. Here is the algorithm to follow:\n\nSet mySize to the size of original\nIf original.mySize is greater than zero:\n\nDynamically allocate an array of mySize values of type Item, and store the address of the array in myArray.\nSet each itemi in the new array to itemi from original.\n\nOtherwise, set myArray to nullptr.\n\nContinue when your constructor passes all tests. (I am now seeing 35 assertions in 9 test cases passing.)"
  },
  {
    "objectID": "labs/lab04.html#step-8.-the-destructor",
    "href": "labs/lab04.html#step-8.-the-destructor",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 8. The Destructor",
    "text": "Step 8. The Destructor\nThe C++ compiler invokes an object’s destructor when the object ceases to exist. The role of the destructor is thus to perform any “clean up” actions that are needed to return the system to the same state it was in before the object existed. In a data structure that uses dynamic memory allocation, the main task is usually to return dynamically allocated memory to the system using the delete operation.\nA destructor cannot have any parameters, and its name is the name of the class preceded by the tilde character (~), so we can begin with the stub:\nVec::~Vec() {\n}\nSkeleton code is already in the .h and .cpp files. Uncomment the code to test the destructor in tests.cpp. Then add the statements to the destructor to reclaim the dynamic array whose address is in myArray, set myArray to nullptr, and set mySize to zero. Compile and see if your statements pass the test. Here is the algorithm to follow:\n\nUse delete [] to deallocate the array whose address is stored in myArray delete [] myArray;\nSet myArray to nullptr\nSet mySize to zero.\n\nTechnically, only the first step is strictly necessary. The reason is that the destructor is only invoked at the end of an object’s lifetime. Since the object will no longer exist, resetting its instance variables is not necessary (except to pass the test).\nContinue when your destructor passes all tests."
  },
  {
    "objectID": "labs/lab04.html#step-9.-setting-a-vecs-size",
    "href": "labs/lab04.html#step-9.-setting-a-vecs-size",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 9. Setting a Vec’s Size",
    "text": "Step 9. Setting a Vec’s Size\nOur next operation is to set a Vec’s size via a method (e.g., v.setSize(8);). The role of this method is to allow us to change the size of an existing Vec to some new size. Since the user must specify this new size, we need a parameter to store it. We might start by defining this stub:\nvoid Vec::setSize(unsigned newSize) {\n}\nPlace a prototype for this method in the Vec class, and in tests.cpp, uncomment all the code in the TEST_CASE to test “setSize”. Then complete the stub so that it passes the test. Think carefully! This one is deceptively tricky to get right! Algorithm:\n\nIf mySize and newSize are different:\n\nIf newSize is zero:\n\nDeallocate myArray\nSet myArray to nullptr\nSet mySize to zero.\n\nOtherwise:\n\nDeclare a local variable newArray of type Item *\nAllocate a new dynamic array of newSize Items, storing its address in newArray.\nIf mySize is less than newSize:\n\nCopy mySize values from myArray into newArray.\nSet the remaining (newSize - mySize) values to zero.\n\nOtherwise, just copy newSize values from myArray into newArray.\nSet mySize to newSize.\nDeallocate myArray.\nSet myArray to newArray.\n\n\n\nWhen your method passes all tests, continue."
  },
  {
    "objectID": "labs/lab04.html#step-10.-equality",
    "href": "labs/lab04.html#step-10.-equality",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 10. Equality",
    "text": "Step 10. Equality\nThe purpose of the equality operation is to let us compare two objects (e.g., if (v1 == v2) { ... }), returning true if they are equal, and returning false if they are not. Since the equality operation returns a bool value, a call:\nv1 == v2\nwill be treated by the compiler as:\nv1.operator==(v2)\nThis equality operator should not change either of its operands. We start by defining this stub:\nbool Vec::operator==(const Vec& v2) const {\n}\nPlace a prototype for this method in the Vec class, and in tests.cpp, uncomment the code to test “equality”. Then add statements to the stub so that it passes the test. Algorithm:\n\nCheck to see if mySize is NOT the same as the size of v2. If the two vectors are not the same size, return false.\nCompare each itemi in myArray to each itemi from v2’s array: If any are not equal, return false.\nThe two arrays are equal in size, and all their values are the same, so return true.\n\nContinue when your method passes all tests."
  },
  {
    "objectID": "labs/lab04.html#step-11.-ostream-output",
    "href": "labs/lab04.html#step-11.-ostream-output",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 11. ostream Output",
    "text": "Step 11. ostream Output\nIt is useful to be able to write a vector to an ostream, as this allows us to display it on the screen (or write it to a file via an ofstream). This method should output the values of the items in the Vec, but not its size; if the user wants that size information displayed, they can do that separately using getSize().\nWhereas (i) our method returns nothing to its caller, (ii) it needs to “know” the ostream to which it is to write, (iii) it modifies that ostream by inserting items, and (iv) it should not modify any Vec instance variables, we might begin with this stub:\nvoid Vec::writeTo(ostream& out) const {\n}\nPlace a prototype for this method in the Vec class, and in tests.cpp, uncomment the test “writeToStream”. Then add statements to this stub so that it passes the test. Algorithm:\n\nSend each value in myArray to the out stream, followed by a single space.\n\nContinue when your method passes all the tests."
  },
  {
    "objectID": "labs/lab04.html#step-12.-istream-input",
    "href": "labs/lab04.html#step-12.-istream-input",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 12. istream Input",
    "text": "Step 12. istream Input\nIt is also useful to be able to read a vector from an istream, as this lets us enter a vector’s values interactively, from a keyboard (or read them from a file via an ifstream). This method complements writeTo(), and should assume that the user has already constructed the Vec with the appropriate size.\nSince (i) our method returns nothing to its caller, (ii) it needs to “know” the istream from which it is to read, (iii) it modifies that istream by extracting items, and (iv) it might modify its instance variables, we might begin with this stub:\nvoid Vec::readFrom(istream& in) {\n}\nPlace a prototype for this method in the Vec class, and in tests.cpp, uncomment the test “readFromStream”. Then add statements to this stub so that it passes the test.\nAssuming that mySize equals the number of values in in, the Vec readFrom(istream& in) method should:\n\nExtract each value from in, storing each in “the next” item of myArray.\n\nContinue when your method passes all the tests. (My solution passes ~82 assertions!)\n\n\n\n\n\n\nCongratulations!\n\n\n\nYou have just built a class that offers the basic functionality one would expect from a vector!"
  },
  {
    "objectID": "labs/lab04.html#submit",
    "href": "labs/lab04.html#submit",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Submit",
    "text": "Submit\nUse VSCode (or the command line) to commit and push your changes to your repo.\nTo verify your submission to github.com, go to a browser and go to the location of your repo in github.com.\nAlso, verify that your submission passes all the automated tests in github. The automated tests are the same as those in tests.cpp."
  },
  {
    "objectID": "labs/lab04.html#grading-rubric-24-pts-total",
    "href": "labs/lab04.html#grading-rubric-24-pts-total",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Grading Rubric: 24 pts total",
    "text": "Grading Rubric: 24 pts total\n\n16 pts for correct code that passes all the tests\n2 pts for clean, neat code, well-indented, and readable\n6 pts for correctness (see common mistakes below).\n\nWays students lost points in the past:\n\n-1: Be careful about brace indentation  \n-1: Memory leak in setSize() when mySize &lt; newSize. You need to delete[] myArray in both cases; move it outside the else statement.\n-2: Make sure you are using delete[] and not delete, which leaks memory\n-24: No submission, or partner forgot to include you in README."
  },
  {
    "objectID": "labs/lab11.html",
    "href": "labs/lab11.html",
    "title": "Lab 11: Binary Search Trees",
    "section": "",
    "text": "In this exercise, you will:\n\nComplete a linked-node-based binary search tree class.\nPractice building recursive operations.\nPractice thinking recursively."
  },
  {
    "objectID": "labs/lab11.html#objectives",
    "href": "labs/lab11.html#objectives",
    "title": "Lab 11: Binary Search Trees",
    "section": "",
    "text": "In this exercise, you will:\n\nComplete a linked-node-based binary search tree class.\nPractice building recursive operations.\nPractice thinking recursively."
  },
  {
    "objectID": "labs/lab11.html#introduction",
    "href": "labs/lab11.html#introduction",
    "title": "Lab 11: Binary Search Trees",
    "section": "Introduction",
    "text": "Introduction\nToday’s exercise is to complete a class template named BST from which binary search tree classes and objects can be created. The exercise provides you with a test-class and a partially-built BST class template; your task is to complete the BST class template.\n\n\n\n\nSource: https://www.youtube.com/watch?v=WLvU5EQVZqY"
  },
  {
    "objectID": "labs/lab11.html#getting-started",
    "href": "labs/lab11.html#getting-started",
    "title": "Lab 11: Binary Search Trees",
    "section": "Getting Started",
    "text": "Getting Started\nAccept the invitation from github classroom and use git clone, as usual.\nEdit the README.md file to add both your names and your partner’s, and make sure you are in the same Team."
  },
  {
    "objectID": "labs/lab11.html#the-bst-constructor",
    "href": "labs/lab11.html#the-bst-constructor",
    "title": "Lab 11: Binary Search Trees",
    "section": "The BST Constructor",
    "text": "The BST Constructor\nAs you can see, our BST class contains just two instance variables:\nNode*    myRoot;       // pointer to the first item we insert\nunsigned myNumItems;   // number of items I contain\nIn the default constructor, our BST is empty, so myRoot should have the value nullptr and myNumItems should equal zero.\nCompile the project and run the tester. The tests should pass."
  },
  {
    "objectID": "labs/lab11.html#the-insert-method",
    "href": "labs/lab11.html#the-insert-method",
    "title": "Lab 11: Binary Search Trees",
    "section": "The insert() Method",
    "text": "The insert() Method\nLooking at the code, your BST class provides methods to:\n\nCreate an empty BST;\nDetermine whether a BST is empty or not;\nDetermine the number of items in a BST;\nReclaim the dynamic memory of a BST; and\nTraverse the tree using preorder.\n\nOur next task is to be able to insert items into a BST. The insert(it) method adds an item it to the tree by storing it in a node such that:\n\nall nodes to the “left” of the node containing it contain items that are less than it; and\nall nodes to the “right” of the node containing it contain items that are greater than it.\n\nNote that if we use a simple approach to insert() in which the first item is stored in the root node, the second item is stored in a child node of the root node, and so on, then the order in which we add items can make a big difference in the shape of the tree. For example, if we insert items in a “carefully chosen random” order: 44, 66, 22, 55, 11, 77, 33, then our tree will be balanced:\n\nA tree’s shape can be characterized in different ways. One way is by comparing its height, diameter, and maximum width:\n\nA tree’s height is the number of nodes on the longest path from the root node to any of the leaf nodes.\nA tree’s diameter is the number of nodes on the longest path between any two leaves in the tree. This path often includes the root node, but not necessarily.\nA tree’s maximum width is the largest number of nodes on any given level of the tree.\n\nThe preceding tree’s height is 3, its diameter is 5, and its maximum width is 4. If a binary search tree is balanced, then its height should be about \\(log_2(n)\\), where \\(n\\) is the number of items in the tree.\nBy contrast, if we insert items in ascending order: 11, 22, 33, 44, 55, 66, 77, then our tree will be imbalanced one way:\n\nThis tree’s height is 7, its diameter is 7, and its maximum width is 1.\nLikewise, if we insert the items in descending order : 77, 66, 55, 44, 33, 22, 11, then our tree will be imbalanced the other way:\n\nAs before, this tree’s height is 7, its diameter is 7, and its maximum width is 1.\nIn tests.cpp, uncomment the TEST_CASE for “insert()”. Save/compile, and verify that you get a compilation error indicating that insert() is undeclared.\nAdd a prototype of insert() to our BST class; then recompile and verify that only a linking error remains.\nIn BST.h, below the class declaration, create a stub for BST::insert() (a “stub” is code that does nothing – it just returns). Recompile, and when all errors have been eliminated, run the test. Then define BST::insert() so that it passes the test. Here is a hint, in case you get stuck, but do your best to build this method without looking at the hint. Run the project, and verify that everything works correctly at the outset."
  },
  {
    "objectID": "labs/lab11.html#the-contains-method",
    "href": "labs/lab11.html#the-contains-method",
    "title": "Lab 11: Binary Search Trees",
    "section": "The contains() Method",
    "text": "The contains() Method\nIn tests.cpp, uncomment the TEST_CASE for contains(). Take a few minutes to look over the tests it contains, specifically how contains() is used. As can be seen, the contains(it) method returns true if it is in its BST; otherwise it returns false. Save/compile your project. You should see an error indicating that there is no method matching the calls in our test-method.\nModify BST.h as necessary to fix any compilation/linking errors, using an approach similar to the approach used in insert(). Recompile and run the tests. If you get stuck, here is a hint, but don’t use it unless you have to.\nContinue when your method passes the test."
  },
  {
    "objectID": "labs/lab11.html#three-traversal-methods",
    "href": "labs/lab11.html#three-traversal-methods",
    "title": "Lab 11: Binary Search Trees",
    "section": "Three Traversal Methods",
    "text": "Three Traversal Methods\nTo traverse a data structure is to pass through each of its items, processing each item in turn. For example, outputting the values in an array, vector, or list usually involves traversing the structure and outputting each item in turn.\nWhen it comes to binary search trees, there are a variety of ways to traverse a BST:\n\nA preorder traversal “processes” the item in a node before the items in the left and right subtrees are (recursively) processed.\nA postorder traversal “processes” the item in a node after the items in the left and right subtrees are (recursively) processed.\nAn inorder traversal “processes” the item in a node after the items in the left subtree have been processed, but before the items in the right subtree have been (recursively) processed.\n\nTo illustrate, the BST class template contains a traversePreorder() method, defined as follows:\nvoid BST::traversePreorder(ostream &out) const {\n    if (!isEmpty()) {\n    myRoot-&gt;traversePreorder(ostream &out);\n    }\n  }\nIf the BST is not empty, this method “passes the buck” by sending the traversePreorder() message to the node whose address is in myRoot. The Node struct defines that (recursive) method as follows:\nvoid BST::Node::traversePreorder(ostream &out) const {\n    // 1. process myItem first (preorder)\n    processItem(out);\n    // 2. then recursively process the items in the left subtree\n    if (myLeft != nullptr) {\n        myLeft-&gt;traversePreorder(out);\n    }\n    // 3. then recursively process the items in the right subtree\n    if (myRight != nullptr) {\n        myRight-&gt;traversePreorder(out);\n    }\n  }\nThe processItem() method can be defined to do any kind of processing of a node’s item. To illustrate, our Node struct defines processItem() to insert a space and then myItem into cout:\nvoid BST::Node::processItem(ostream &out) {\n    out &lt;&lt; myItem &lt;&lt; ' ';\n  }\nNote that all of these functions take an ostream as a parameter and pass it on in their method calls. The processItem() method writes its output to the ostream. By passing in an output stream this way, the caller can have processItem write to standard out (cout) or a file (fout) or even a string, which is what test.cpp does.\nUncomment the TEST_CASE for traversal, and take a moment to look over its tests. Your final task is to define traversePostorder() and traverseInorder() methods that will produce the output expected by the test-method. Use the provided traversePreorder() methods as a model; the other two sets of traversal methods are quite similar.\nWhen your code passes all the tests, congratulations! You now have a basic binary search tree class!"
  },
  {
    "objectID": "labs/lab11.html#submit",
    "href": "labs/lab11.html#submit",
    "title": "Lab 11: Binary Search Trees",
    "section": "Submit",
    "text": "Submit\nDon’t forget to commit your changes.\nGrading Rubric: 25 points total\n\n5 pts: insert() correct\n5 pts: contains() correct\n4 pts x 3 = 12 pts: traversals are correct\n3 pts: code is neat and clean (hospitable)\n\nWays students lost points in the past:\n\n-1: Node::contains has to RETURN the value gotten from recursive calls of contains\n-2: insert() should be recursive;\n-1: insert() should throw an exception when item is already in tree\n-2: very poor indentation\n-2: traversePostorder and traverseInorder should call themselves, not traversePreorder\n-2: Node::traverseInOrder needs to process item in the middle (and use processItem method) insert"
  },
  {
    "objectID": "labs/lab09-hint-push.html",
    "href": "labs/lab09-hint-push.html",
    "title": "Lab 09: Hint push()",
    "section": "",
    "text": "The stub of push() should look like this:\nvoid Stack::push(const Item& it) {\n}\nNote that when the stack is empty, mySize is 0: when the stack contains 1 item, mySize is 1; when the stack contains 2 items, mySize is 2; and so on. Put differently, mySize always contains the index of myArray where we want push() to store its item!\nThe push(it) method should thus behave as follows:\n\nStore it in the entry of myArray whose index is mySize.\nAdd 1 to mySize."
  },
  {
    "objectID": "labs/lab06.html",
    "href": "labs/lab06.html",
    "title": "Lab 06: More List Operations",
    "section": "",
    "text": "Equality."
  },
  {
    "objectID": "labs/lab06.html#objectives",
    "href": "labs/lab06.html#objectives",
    "title": "Lab 06: More List Operations",
    "section": "Objectives:",
    "text": "Objectives:\nIn this exercise, you will:\n\nBuild more List operations.\nPractice using pointers."
  },
  {
    "objectID": "labs/lab06.html#introduction",
    "href": "labs/lab06.html#introduction",
    "title": "Lab 06: More List Operations",
    "section": "Introduction",
    "text": "Introduction\nIn this week’s lab you will add more functionality to the List class we built in class.\nHere is the invite.\nUse git clone to get your copy of the assignment, as we have been doing. You should have these files: List.cpp, List.h, tests.cpp, plus a makefile, etc.\nIf you are working with a partner, so make sure you join the same Team when creating your repos. Also, put both your names in the README.md file now."
  },
  {
    "objectID": "labs/lab06.html#step-1.-append",
    "href": "labs/lab06.html#step-1.-append",
    "title": "Lab 06: More List Operations",
    "section": "Step 1. Append",
    "text": "Step 1. Append\nThe append() method is easy to understand: given a new Item, add it to the end of the linked list. The tests.cpp file contains tests already for append().\nNow, implement the code for append(). You might find looking at the implementation of prepend() to be helpful – although append() is a bit more complicated. DRAW PICTURES! (Or, don’t draw pictures, if you want to make this step of the lab take much longer…)"
  },
  {
    "objectID": "labs/lab06.html#step-2.-searching",
    "href": "labs/lab06.html#step-2.-searching",
    "title": "Lab 06: More List Operations",
    "section": "Step 2. Searching",
    "text": "Step 2. Searching\nLet’s implement a method that searches the linked list for a given Item, and returns the index of where the item is found, or -1 if it is not found. Name the method getIndexOf(). Here is the prototype:\nint getIndexOf(const Item &it) const;\nFirst implement tests of getIndexOf() in tests.cpp, and then implement the method. You must call the TEST_CASE “lookfor”. I.e., put this in the tests.cpp file:\nTEST_CASE(\"lookfor\") {\n     // add your tests here -- either inside SECTION()s or not.\n}"
  },
  {
    "objectID": "labs/lab06.html#step-3.-copy-constructor",
    "href": "labs/lab06.html#step-3.-copy-constructor",
    "title": "Lab 06: More List Operations",
    "section": "Step 3. Copy constructor",
    "text": "Step 3. Copy constructor\nYou knew it was coming…\ntests.cpp does not contain any test cases for this, so you’ll have to implement them yourself. My solution has 1 TEST_CASE with 3 SECTIONS: copying a 0-element List, copying a 1-element List, and copying a \\(&gt;1\\)-element list. The name of the TEST_CASE must be copy constructor:\nTEST_CASE(\"copy\") {\n     // add your tests here -- either inside SECTION()s or not.\n}\nThe prototype of the copy constructor will be:\nList(const List & original);\nHere is the algorithm to implement the copy constructor:\n\nSet all the instance variables (myFirst, myLast, mySize) to default values.\nWalk the list of nodes in original, calling append() on the value in each node. (You are calling append() on “this” node, thus adding a new node each time to the List being constructed.)"
  },
  {
    "objectID": "labs/lab06.html#step-4.-equality",
    "href": "labs/lab06.html#step-4.-equality",
    "title": "Lab 06: More List Operations",
    "section": "Step 4. Equality",
    "text": "Step 4. Equality\nImplement the equality method, so that you can test if two List objects have the same number of nodes and the items in the nodes are the same. The equality operator returns true or false.\nE.g.,\nif list1 contains 3 values: 11, 22, 33 and list2 contains four values: 11, 22, 33, 44, then list1 == list2 should return false.\nTo test this you have to use == (not !=), so your test might look like this:\nREQUIRE(! (list1 == list2) );\nCreate your tests first in a test case called “equality”:\nTEST_CASE(\"equality\") {\n     // add your tests here -- either inside SECTION()s or not.\n}\n\n\n\n\n\n\nTip\n\n\n\nUse a “curr” pointer to each list’s myFirst node, then in a loop, check if the items are the same for the two nodes, then move each curr pointer to its next node."
  },
  {
    "objectID": "labs/lab06.html#step-5.-templatize",
    "href": "labs/lab06.html#step-5.-templatize",
    "title": "Lab 06: More List Operations",
    "section": "Step 5. Templatize",
    "text": "Step 5. Templatize\nNow, convert your List class to a List&lt;Item&gt; template and modify the tests in tests.cpp to test your new template. Remember to edit the makefile to remove List.cpp from the SOURCES line near the top of the file. You should also delete the List.cpp file completely from your tree."
  },
  {
    "objectID": "labs/lab06.html#submit",
    "href": "labs/lab06.html#submit",
    "title": "Lab 06: More List Operations",
    "section": "Submit",
    "text": "Submit\nA part of your grade will be based on the thoroughness of your tests; you may want to model your tests after those provided for you in previous projects.\nDon’t forget to Commit and Push your changes to your repo.\nVerify you have synced your code to github by going to your online repo webpage and looking to see that the files are correct.\nVerify that the autograding tests have passed in github.com."
  },
  {
    "objectID": "labs/lab06.html#grading-rubric",
    "href": "labs/lab06.html#grading-rubric",
    "title": "Lab 06: More List Operations",
    "section": "Grading Rubric:",
    "text": "Grading Rubric:\nYou will be graded this way: 19 pts total\n\n4 pts each for append(), getIndexOf(), copy constructor, and equality operator (16 pts)\n3 pts for correctness,\n1 pt for thorough tests (you get this point free for append() for which I’ve provided tests).\n3 pts for correctly converting to a class template.\n\nWays students lost points in the past:\n\n-3: Incorrect class template conversion, code does not compile;\n-3: Missing tests for getIndexOf(), copy constructor, and equality operator\n-1: Incomplete equality tests, no tests for when equality is true\n-1: Append implementation needs to adjust the myNext of the current last element\n-1: Copy constructor: myFirst is not initialized to nullptr, causing tests to fail;\n-1: Missing test for equality operator;\n-1: Incomplete test for copy constructor;"
  },
  {
    "objectID": "labs/lab09-hint.html",
    "href": "labs/lab09-hint.html",
    "title": "Lab 09: Hint",
    "section": "",
    "text": "The stub of isEmpty() should look like this:\nbool Stack::isEmpty() const {\n}\nThe isEmpty() method should return true when mySize equals zero, and should return false otherwise."
  },
  {
    "objectID": "labs/lab09-hint-push2.html",
    "href": "labs/lab09-hint-push2.html",
    "title": "Lab 09: Hint push() 2",
    "section": "",
    "text": "To throw an exception when the stack is full, the push(const Item& it) method should behave as follows:\nIf I am full {\n    throw a StackException whose method is \"push()\" and whose message is \"stack is full\".\n}\na. Store it into the entry of myArray whose index is mySize.\nb. Add 1 to mySize."
  },
  {
    "objectID": "labs/lab08.html",
    "href": "labs/lab08.html",
    "title": "Lab 08: Timing List and Vector Operations",
    "section": "",
    "text": "Road Runner."
  },
  {
    "objectID": "labs/lab08.html#objectives",
    "href": "labs/lab08.html#objectives",
    "title": "Lab 08: Timing List and Vector Operations",
    "section": "Objectives:",
    "text": "Objectives:\nIn this exercise, you will:\n\nCompare performance of list&lt;T&gt; and vector&lt;T&gt; operations.\nIntroduce iterators.\nIntroduce empirical analysis."
  },
  {
    "objectID": "labs/lab08.html#introduction",
    "href": "labs/lab08.html#introduction",
    "title": "Lab 08: Timing List and Vector Operations",
    "section": "Introduction",
    "text": "Introduction\nToday, we want to time a few list and vector operations, using the STL list and vector templates. While we have talked in class about “Big Oh” notation, today’s lab should give you some hands-on experience with the difference between an \\(O(1)\\) operation and an \\(O(n)\\) operation.\nFor a given operation and several values of \\(n\\), our basic methodology will be to build a vector of length \\(n\\), measure how long that operation takes for the vector, build a list of length \\(n\\), and measure how long that operation takes for the list. By choosing five different values for n (10, 100, 1000, 10000, and 100000), we can then plot our measurements and see empirically how fast or slow a given operation is."
  },
  {
    "objectID": "labs/lab08.html#getting-started",
    "href": "labs/lab08.html#getting-started",
    "title": "Lab 08: Timing List and Vector Operations",
    "section": "Getting Started",
    "text": "Getting Started\nAccept the invitation to the lab and do git clone to get the files, as usual. Make sure your partner is part of the same Team and edit the README.md file and share your repo on github.com"
  },
  {
    "objectID": "labs/lab08.html#experiment-0-vector-subscript",
    "href": "labs/lab08.html#experiment-0-vector-subscript",
    "title": "Lab 08: Timing List and Vector Operations",
    "section": "Experiment 0: Vector Subscript",
    "text": "Experiment 0: Vector Subscript\nThe purpose of this experiment is to get a feel for how to use the Timer class to time the vector subscript operation. This experiment contains a method named timeAccessAtIndex() that uses Timer to measure how long it takes to access the item at a given index in a vector. The run() method calls timeAccessesForVectorOfSize() for various vector sizes. This method calls the timeAccessesAtIndex() method three times, to see how long it takes to access the first, middle and last value in the vector.\nCompile (make all) and run ./lab7.\nTo report your results, create an online spreadsheet – either Google Sheets or online Excel. On the worksheet, write Lab 7: Experiment 0 in the first row; on the next row create column-headings labeled size, first, middle, and last. Then add rows for each vector size (i.e., 10, 100, 1000, 10000, 100000). For each row size, enter the times your program displayed for accessing the first, middle, and last value in the vector of size size.\nWhen you have entered all of your data, create a well-labeled line chart from your timing results. Your chart should look something like this:\n\nNote these properties of the graph:\n\nThe horizontal scale is logarithmic.\nThe vertical lab gives the units.\nI have chosen to show the values with little circles – you can choose any shape (circle, square, etc.)\n\nAnalysis. On the chart shown above, the data are “noisy” (thanks to our imprecise clock), ranging from a low of 30.7667 nsec to a high of 33.6957 nsec. However the lines are basically flat – there is no significant change to the access time as the vector size increases by orders of magnitudes. If I use the spreadsheet to compute the averages for the first, middle, and last columns, they are all approximately the same. Your chart should be similar. (Note that I ran my tests on my MacBookPro. The values you get on the lab machines may be quite different.)\nThe relative flatness of these lines and their close proximity to one another indicate that the time to perform this operation remains constant as the size of the vector increases. These results thus indicate empirically that the vector subscript operation is an \\(O(1)\\) (i.e., constant time) operation."
  },
  {
    "objectID": "labs/lab08.html#experiment-1-vector-list-appending",
    "href": "labs/lab08.html#experiment-1-vector-list-appending",
    "title": "Lab 08: Timing List and Vector Operations",
    "section": "Experiment 1: Vector & List Appending",
    "text": "Experiment 1: Vector & List Appending\nIn our next experiment, we will use a similar procedure to measure how long it takes to append an item to a vector and compare that with how long it takes to append an item to a list.\nIn main.cpp, comment out the lines referring to Experiment0 and uncomment the lines referring to Experiment1.\nIn your makefile, replace Experiment0.cpp with Experiment1.cpp on the 4th line.\nRecompile your project (make all) and run ./lab7. As you can see, Experiment1 contains code to time how long it takes to append a value to a vector. It does this two ways:\n\nIt first invokes timeAppendToVectorOfSize(n) for varying values of n.\nIt then uses timeRepeatedAppendUntilVectorIsSize(n) to measure the average time an append operation takes as a vector grows very large.\n\nOur timeAppendToVectorOfSize(n) method uses an approach similar to that of Experiment0, but timing how long it takes the vector push_back(item) method to append a single value. By contrast, our timeRepeatedAppendUntilVectorIsSize(n) starts with an empty vector and then times the average length of time to append a value, as push_back() is called repeatedly.\nYour task is to write two methods that do the same things for lists:\n\ntimeAppendToListOfSize(n) that can be used to measure the average time to append an item to a list of size n; and\ntimeRepeatedAppendUntilListIsSize(n) that measures the average time an append operation takes as a list grows very large.\n\nUsing the existing vector methods in Experiment 1 as a model, write these two methods; then compile and run the executable to display the append times for both vectors and lists.\nWhen you have good data, return to your spreadsheet. Create a new worksheet, and label the first row Lab 7: Experiment 1. On the next row, place column headings for size, vector, and list. Then add a separate row for each size (10, 100, 1000, 10000, and 100000). Add your data to your worksheet; then create a chart similar to that of Experiment0.\nStudy your chart. Using it and the data in your spreadsheet, answer the following questions on your spreadsheet, below your chart:\n\nWhat does your data indicate about the time required to append an item to a vector as the vector grows larger? Is the timing behavior produced by timeAppendToVectorOfSize(n) consistent with that of timeRepeatedAppendToVectorOfSize(n)? Explain why or why not. What is the “Big Oh” notation for each? (Remember that our vector’s size is increasing exponentially.)\nWhat does your data indicate about the time required to append an item to a list as the list grows larger? Is the timing behavior produced by timeAppendToListOfSize(n) consistent with that of timeRepeatedAppendUntilListIsSize(n)? Explain why or why not. What is the “Big Oh” notation for each?\nWhat can you conclude about the time required to append an item to a vector compared to a list, as each gets large?"
  },
  {
    "objectID": "labs/lab08.html#experiment-2-vector-list-prepending",
    "href": "labs/lab08.html#experiment-2-vector-list-prepending",
    "title": "Lab 08: Timing List and Vector Operations",
    "section": "Experiment 2: Vector & List Prepending",
    "text": "Experiment 2: Vector & List Prepending\nOur final experiment is to compare how long it takes to prepend an item to a vector, compared to a list.\nIn main.cpp, comment out the lines referring to Experiment1 and uncomment the lines referring to Experiment2. In the makefile, change SOURCES to Experiment2.cpp.\nRecompile your project and run Experiment2 as it is written. As you can see, Experiment2 contains code to time how long it takes to prepend a value to a vector. It does this two ways:\n\nIt first invokes timePrependToVectorOfSize(n) for varying values of n.\nIt then uses timeRepeatedPrependUntilVectorIsSize(n) to measure the average time a prepend operation takes as a vector grows very large.\n\nOur timePrependToVectorOfSize(n) method uses an approach similar to that of Experiment1, but the STL vector template does not provide a push_front() method by which we can prepend a value. However, STL does provide a generic insert() algorithm that we can use for this task. More precisely, the statement:\ninsert(iterator, value);\nwill insert value at the position indicated by iterator.\nAn iterator is an abstract pointer. Every STL container provides at least two methods that return iterators:\n\nbegin(), that returns an iterator to the first item in the container; and\nend(), that returns an iterator to the first location beyond the last item in the container.\n\nThus, we can use the statement:\ninsert(v.begin(), i);\nto prepend the value of our loop-control variable i to our vector.\nOur timeRepeatedPrependUntilVectorIsSize(n) method also uses the STL insert() method.\nYour task is to write two methods that do the same things for lists:\n\ntimePrependToListOfSize(n) that can be used to measure the average time to prepend an item to a list of size n; and\n\n\ntimeRepeatedPrependUntilListIsSize(n) that measures the average time a prepend operation takes as a list grows very large.\n\nUsing the existing Experiment 2 vector methods as a model, write these two methods; then invoke them so that Experiment2 displays the append times for both vectors and lists.\nWhen you have good data, return to your spreadsheet. Create a new worksheet, and label the first row Lab 7: Experiment 2. On the next row, place column headings for size, vector, and list. Then add a separate row for each size (10, 100, 1000, 10000, and 100000). Add your data to your worksheet; then create a chart similar to that of Experiment1.\nStudy your chart. Using it and the data in your spreadsheet, answer the following questions on your spreadsheet, below your chart:\n\nWhat does your data indicate about the time required to prepend an item to a vector as the vector grows larger? Is the timing behavior produced by timePrependToVectorOfSize(n) consistent with that of timeRepeatedPrependToVectorOfSize(n)? Explain why or why not. What is the “Big Oh” notation for each?\nWhat does your data indicate about the time required to prepend an item to a list as the list grows larger? Is the timing behavior produced by timePrependToListOfSize(n) consistent with that of timeRepeatedPrependUntilListIsSize(n)? What is the “Big Oh” notation for each?\nWhat can you say about the time required to prepend an item to a vector, compared to a list, as each gets large?"
  },
  {
    "objectID": "labs/lab08.html#finally",
    "href": "labs/lab08.html#finally",
    "title": "Lab 08: Timing List and Vector Operations",
    "section": "Finally",
    "text": "Finally\nUnlike vector, the STL list does provide a push_front() method that works just like push_back() only on the other end of the list. In your timePrependToListOfSize(n) method, comment out your call to insert() and replace it with a call to push_front(). Then rerun your experiment. Add a new column named list (push_front) to your Experiment2 spreadsheet. Under it, add the timing results for this revised version to your spreadsheet and its chart. Then answer the following question below your other answers on your Experiment2 spreadsheet:\n\nHow does the timing for prepending using push_front() compare to the timing of prepending using insert()? Is the “Big Oh” the same or different for these two different ways of prepending?\n\nWhew! Congratulations, you’re done (after doing the submission below)."
  },
  {
    "objectID": "labs/lab08.html#submission",
    "href": "labs/lab08.html#submission",
    "title": "Lab 08: Timing List and Vector Operations",
    "section": "Submission",
    "text": "Submission\n👉 Download a PDF version of your spreadsheet and put it in your directory, named Lab7Results.pdf. Make sure your PDF contains all 3 worksheets!\nMake sure you commit all your files and changes to github for grading."
  },
  {
    "objectID": "labs/lab08.html#grading-rubric",
    "href": "labs/lab08.html#grading-rubric",
    "title": "Lab 08: Timing List and Vector Operations",
    "section": "Grading Rubric",
    "text": "Grading Rubric\nTotal score: 20 pts\n\n9 pts: 3 pts each for proper implementation of Experiment 0, 1, and 2.\n5 pts for correct graphs.\n6 pts for answering the questions.\n\nWays students have lost points in the past:\n\n-2: Can’t make project, There are persisting errors.\n-5: No PDF analyzing the results\n-2: late submission"
  },
  {
    "objectID": "labs/lab09-hint-isfull.html",
    "href": "labs/lab09-hint-isfull.html",
    "title": "Lab 09: Hint isFull()",
    "section": "",
    "text": "The stub of isFull() should look like this:\nbool Stack::isFull() const {\n}\nThe isFull() method should return true when mySize equals myCapacity, and return false otherwise. How can you write this in a single line?"
  },
  {
    "objectID": "content.html",
    "href": "content.html",
    "title": "Course content",
    "section": "",
    "text": "CS 354 – Database Management Systems – is organized by week, with each week structured as follows:\n\nClassroom sessions are Monday-Wednesday-Friday 2.45PM - 3.50PM at SB 382.\nHomeworks are due Friday 23:59. They will be released every Monday.\nProject submission is due Wednesday at 23:59. They will be released every Wednesday.\nTutoring Assistants are available in SB337 on Mondays and Thursdays, from 7 - 9 pm.\n\nThe SLOs (Student Learning Objectives), labs, and projects for each week are given in the links below. The readings are from Ramez Elmasri, S. B. N. (2016). Fundamentals of Database Systems 7th ed.\n\n\n\nWeek\nTopics\nLaboratories\nProjects\nTests, Video Links, etc.\n\n\n\n\n1  —  3/17\nIntroduction to Databases & SQL Basics  Week’s page\nHW 1\nProj 1\n\n\n\n2  —  3/24\nSQL – Intermediate Concepts  Advising days – no class 26-27 Week’s page\nHW 2\nProj 2\n\n\n\n3  —  3/31\nSQL – Data Modification & Advanced Queries Week’s page\nHW 3\nProj 3\n\n\n\n4  —  4/7\nDatabase Design – ER Modeling & Schema Refinement Week’s page\nHW 4\nProj 4\nTest 1: Weeks 1 - 3, Friday\n\n\n5  —  4/14\nAdvanced SQL & Integrity Constraints  Good Friday & Easter Monday – no class 18-21  Week’s page\nNo lab\nNo project\n\n\n\n6  —  4/22\nDatabase Management & Optimization Week’s page\nHW 6\nNo project\n\n\n\n7  —  4/28\nFinal Project and Course Wrap-Up Week’s page\nLab 7\nFinal Project\n\n\n\nFinal  —  May 3-8\nSearch calvin.edu for “Exam Schedule” to find the time of the exam (and all exams you have, this semester, and all future semesters).\n\n\nFinal Test Cumulative, during exam time (You may take it in either class’s exam time. Classes met at 2.45pm MWF.)",
    "crumbs": [
      "Content",
      "Course content"
    ]
  },
  {
    "objectID": "projects/proj04.html",
    "href": "projects/proj04.html",
    "title": "Project 04: More Vec Operations",
    "section": "",
    "text": "Created by AI Prompt: a C++ array fading away"
  },
  {
    "objectID": "projects/proj04.html#project-4-more-vec-operations",
    "href": "projects/proj04.html#project-4-more-vec-operations",
    "title": "Project 04: More Vec Operations",
    "section": "Project 4: More Vec Operations",
    "text": "Project 4: More Vec Operations"
  },
  {
    "objectID": "projects/proj04.html#objectives",
    "href": "projects/proj04.html#objectives",
    "title": "Project 04: More Vec Operations",
    "section": "Objectives",
    "text": "Objectives\n\nBuild more vector operations.\nPractice using the debugger (if necessary)."
  },
  {
    "objectID": "projects/proj04.html#step-0.-prepare",
    "href": "projects/proj04.html#step-0.-prepare",
    "title": "Project 04: More Vec Operations",
    "section": "Step 0. Prepare",
    "text": "Step 0. Prepare\n\n\n\n\n\n\nREAD THIS: IT IS DIFFERENT THAN NORMAL!\n\n\n\n\n\n\n\nClick the link and then “Accept this assignment”.\nWait a few seconds and refresh the page. Refresh until the page says “You’re ready to go!”. The page has a link to a github repo.\nClick the link to see your new repo on github.com.\nClick the green Code button and copy the link it shows.\nIn a terminal,\n\ncd to the directory where you are putting all your CS112 assignments.\ntype git clone &lt;paste-the-contents-of-the-link-you-copied&gt;\n\ncd to the new directory containing your repo.\n\n\n\n\n\n\n\nBECAUSE your project depends on your lab code, you need to copy your lab code over to this repo. In a terminal:\n\n\n\n\ncd to your lab04 directory\ncp Vec.h Vec.cpp &lt;your project directory&gt;\ncd to your project directory\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIf, at this moment in the course, you are still not able to handle directories and files using the terminal, spend some time searching more about it and learning. This is an essential skill for anyone who handles computational systems nowadays. This might be a good place to start.\n\n\n\nOpen your project in VS Code, and open Vec.h\nAdd this prototype for the assignment operator to Vec.h, in the public area:\n\nVec& operator=(const Vec& original);\n\nAdd this code to Vec.cpp:\n\nVec& Vec::operator=(const Vec& original) {\n    if (this != &original) {\n        if (mySize != original.mySize) {\n            if (mySize &gt; 0) {\n                delete[] myArray;\n                myArray = nullptr;\n            }\n            if (original.mySize &gt; 0) {\n                myArray = new Item[original.mySize];\n            }\n            mySize = original.mySize;\n        }\n        for (int i = 0; i &lt; mySize; ++i) {\n            myArray[i] = original.myArray[i];\n        }\n    }\n    return *this;\n}\n\nIn the terminal, type make tester\nThe code should compile and give you an executable called “tester”\nRun the tester file: ./tester\nYour tests should all pass."
  },
  {
    "objectID": "projects/proj04.html#step-1.-introduction",
    "href": "projects/proj04.html#step-1.-introduction",
    "title": "Project 04: More Vec Operations",
    "section": "Step 1. Introduction",
    "text": "Step 1. Introduction\nThis week’s project adds more functionality to the Vec class we built in the lab. To illustrate, suppose that v1, v2, and v3 are Vec objects containing the following values:\nv1 == {1, 2, 3}\nv2 == {2, 4, 6}\nv3 == {1, 2, 3}\n\n1 - Subscript\nThe subscript operator ([i]) can be implemented such that using subscripting on the left-hand-side of an assignment (i.e., setting a value in the array) and using subscripting on the right-hand-side (i.e., getting a value in the array) both work. Thus, the method will be similar to both setItem(i) and getItem(i).\n\nNormally, the subscript operation on an array does not perform bounds checking on the index value i, but yours should perform bounds checking. More precisely, your subscript operator should throw a range_error if it is passed a “bad” index value.\nThe method should return a reference to the item in the array.\n\nHere is the algorithm:\nItem &operator[](unsigned index)\n    check if index is legal. If not, throw a range_error\n    return myArray[index];\nBecause the method is returning a reference to the item in the array, subscripting works for both sides of an assignment.\n\n\n2 - Const subscript\nIf a Vec object is defined as constant then indexing the array in the Vec must also be constant – i.e., it cannot allow code to change the array. In tests.cpp, see a function called testConstSubscript(). This function takes a const-ref parameter. The subscripting of that Vec parameter will require us to implement the const subscripting method. The code in the method is identical to the code you wrote in the previous step above, but it returns const Item &, and is a const method – i.e., has const on the end of the line. Implement that method now so that all subscripting tests pass.\n\n\n3 - Vector Addition\nThe expression:\nv3 = v1 + v2;\nshould set v3 == {3, 6, 9}, without leaking memory.\nWhen C++ compiles v1 + v2, it looks at the types of the values that surround the +. It sees that v1 is a Vec object, so it actually will call operator+() on the v1 object, passing v2 as the parameter. Thus, the prototype is Vec Vec::operator+(const Vec &rhs) const. v1 is the “this” object that operator+ is being called on. v2 is being passed in as the rhs (right-hand-side) parameter.\nThe implementation is quite simple: make sure the sizes of the two Vecs are the same. If not, throw an error of type invalid_argument. If they are the same, create a new Vec object (of the correct size) and loop, repeated adding the values from myArray[i] and rhs[i] together and putting the result into the new Vec object.\n\n\n4 - Vector Subtraction\nThe expression:\nv3 = v1 - v2;\nshould set v3 == {-1, -2, -3}, without leaking memory.\nTo make life easier for you, tests.cpp contains tests for each of these operations. Use these tests and test-driven development to build your operations. If you get your program to compile, but it fails a test and you cannot figure out what is wrong, use the debugger! If necessary, draw a memory diagram and trace through the execution of the problematic function one statement at a time, until you identify the logic error."
  },
  {
    "objectID": "projects/proj04.html#step-2.-application",
    "href": "projects/proj04.html#step-2.-application",
    "title": "Project 04: More Vec Operations",
    "section": "Step 2. Application",
    "text": "Step 2. Application\nCongratulations! You have been named the navigation officer on the starship U.S.S. Boobyprize, whose hyper-spatial engines allow the ship and its crew to explore the universe. Current theories suggest that reality consists of 11 or more dimensions, so you need a program to help you navigate through an N-dimensional space.\nVectors can be used to store positions (and/or directional forces) in a coordinate system. Vectors of length 2 can be used to store 2-dimensional (x, y) information; vectors of length 3 can be used to store 3-dimensional (x, y, z) information; and so on. Your task is to write a program that:\n\nPrompts for and has the user enter the number of dimensions in their space, storing this number in a variable N, which it can then use to define vector objects.\nPrompts for and has the user enter a starting position in that space, and stores that position in a vector object sum.\nUses a loop that:\n\nprompts for and has the user enter a position (relative to their current position), and stores that position in a vector,\nadds that vector to the sum vector.\n\nThis loop should let the user enter an arbitrary number of positions.\nOutputs the starting position plus the final position (i.e., the sum of the positions from the accumulator-vector).\n\nFor example, if the user is in a 3-dimensional system, enters the starting point {0, 0, 0}, and then enters the following four 3-dimensional relative-positions:\n{0, 1, 0}\n{0, 0, 1}\n{1, 2, 3}\nthe program should then display the starting position ({0,0,0}) and the sum from the accumulator ({2, 3, 4}), which is the user’s final position within the 3-dimensional system.\nAs another example, if the user is navigating through a 5-dimensional space, enters {1, 0, 1, 0, 1} as the starting point, and enters three 5-dimensional relative-positions:\n{2, 2, 2, 2, 2}\n{-3, -3, -3, -3, -3}\nthe program should then display the starting position and the final position ({0, 0, 0, 0, 0}).\n\n\n\n\n\n\nNote\n\n\n\nYou may (if you wish) have your program display the starship’s new position each time it is updated, rather than just displaying the final position at the end.\n\n\nYour application should have the user enter the vectors in the format expected by your readFrom(istream&) method: numbers separated by whitespace. (It does not have to parse through curly-brace and comma characters.) Likewise, your application can display the starship’s position using the format provided by your writeTo(ostream&) method – numbers separated by spaces.\nTo get you well on your way, your repo contains App.cpp and App.h. These files provide most of what you have to implement to finish this project. Just implement the missing TODO parts.\nNow that you have addition implemented, you’ll need to uncomment the line in App.cpp that reads\nres = res + v;\nYou will have to edit main() in main.cpp to:\n\ncall the App() constructor, and then\non the resulting object, call run().\n\nCompile the program with make proj4 and execute the program by doing ./proj4."
  },
  {
    "objectID": "projects/proj04.html#submit",
    "href": "projects/proj04.html#submit",
    "title": "Project 04: More Vec Operations",
    "section": "Submit",
    "text": "Submit\nSubmit your changes using git, either from the command line or using VSCode. Push your changes up to github.\nVerify you have synced your code to github by going to your online repo webpage and looking to see that the files are correct.\nVerify that the autograding tests have successfully passed in github."
  },
  {
    "objectID": "projects/proj04.html#grading-rubric",
    "href": "projects/proj04.html#grading-rubric",
    "title": "Project 04: More Vec Operations",
    "section": "Grading Rubric",
    "text": "Grading Rubric\n30 pts Total:\n\nPasses all tests: 8 pts.\noperator[]: 3 pts\noperator+: 3 pts\noperator-: 3 pts\nUSS Boobyprize application: 10 pts\nCode is clean and neat. Comments where appropriate, good spacing, etc: 3 pts.\n\nWays students lost points in the past:\n\n-1: Const-qualified subscript operator [] should return const Item&, not Item&;\n-3: Your readFrom() implementation never stops reading from input, so the app doesn’t work\n-2: Missing call into App::run() from main(). \n-2: Dynamically allocate the new vectors in addition and subtraction causes memory to leak\n-2: Did not uncomment the line that adds each vector to the result in App.cpp, so it doesn’t work\n-2: Needs two versions of the subscript operator for const and non-const\n-2: setSize() was not fixed from the lab, tests do not pass"
  },
  {
    "objectID": "projects/proj99-final.html",
    "href": "projects/proj99-final.html",
    "title": "Project 11: Binary Search Trees",
    "section": "",
    "text": "Source: https://www.freecodecamp.org/news/data-structures-101-binary-search-tree-398267b6bff0/"
  },
  {
    "objectID": "projects/proj99-final.html#objectives",
    "href": "projects/proj99-final.html#objectives",
    "title": "Project 11: Binary Search Trees",
    "section": "Objectives",
    "text": "Objectives\n\nPractice building BST operations.\nPractice building recursive operations.\nLearn more about binary search trees."
  },
  {
    "objectID": "projects/proj99-final.html#introduction",
    "href": "projects/proj99-final.html#introduction",
    "title": "Project 11: Binary Search Trees",
    "section": "Introduction",
    "text": "Introduction\nAccept the assignment and use git clone to create your copy of the code. Remember to join the same Team as your peer.\nThis project is:\n\nAdd a getHeight() to your BST class.\nUse your BST&lt;Item&gt; to conduct an experiment.\n\nAs usual, you should use test-driven development to accomplish these tasks. Note that part of your grade is based on the thoroughness of your new tests for getHeight().\n\n\n\n\n\n\nImportant\n\n\n\nCopy your Exception.h, catch.hpp, BST.h, makefile, and tests.cpp files from your previous lab, into your repo."
  },
  {
    "objectID": "projects/proj99-final.html#adding-getheight",
    "href": "projects/proj99-final.html#adding-getheight",
    "title": "Project 11: Binary Search Trees",
    "section": "Adding getHeight()",
    "text": "Adding getHeight()\nThe height of a tree with a root node is defined as the height of the node’s taller sub-tree, plus 1. As you can see, this is a recursive definition, which needs a base case. The base case is that if a node has no children, its height is 1.\nLet’s give some examples to clarify:\nIf a tree has no nodes, its height is 0. If a tree has 1 node – the root node – its height is 1.\nIf a tree has a root node and that node has either a left child or a right child, or both, its height is 2. Suppose the tree has a root node and that node has a single right child node. The right child node has height 1. The root node’s height is 1 + (the greater of the height of its left subtree – which is 0 – and the right subtree – which is 1). Thus, the root node’s height is 2.\nImplement getHeight() now. Its implementation is similar to insert() or a traversal algorithm in that it uses recursion. The difference here is that each function returns an integer – the node’s height.\n\nThe Experiment\nThe height of a BST determines the speed of operations like insert() and contains(). If we build a “large” BST of N items (e.g., \\(~2^20\\)), and that tree is balanced, then its height should be the minimal \\(O(lg(N))\\) (e.g., 20).\nThis week’s problem is to conduct a simple experiment to see how “tall” BSTs get, given random values. Our objective is to see how close we come to lg(N) height if we build large trees of N randomly ordered values.\nYour repo contains two directories that each contain ten data files (randomInts01.txt, randomInts02.txt, …, randomInts10.txt), each containing \\(2^20-1 = 1,048,575\\) randomly generated integer values. If these values were ordered in exactly the right way, we could build trees of height 20. (On the other hand, if they were ordered in exactly the wrong way, we could build trees of height 1,048,575!)\nYour task is to write a simple program that prompts the user for the name of an input file, reads each value from that file, and inserts it into a BST. Your program should then display the height of the resulting BST.\nThere are minor details to keep in mind:\n\nThere may be duplicate values within an input file, and inserting a duplicate value into our BST will throw an exception. Your program should count and output the number of duplicate values in a given file by catching and handling this exception.\nThere are two directories – one for Linux/MacOS, and one for Windows.\nThese files were generated in the Maroon lab (whose workstations are 64-bit machines), and so the integers in these files are 64-bit integers. However, the C++ int and unsigned types only store integers in 32 bits; the long type stores integers in 64 bits, so use it to store these 64-bit integers.\n\nSince there are ten input files, you will need to run your program ten times. (Or find a clever way to automate this.) For each file, record the corresponding tree-height in a spreadsheet, and the number of duplicate values that were found. Given all ten heights, use the spreadsheet to calculate the minimum height, the maximum height, the average height, the median height, and the standard deviation of the ten heights. (Your spreadsheet will make each of these computations easy.) Finally, use your spreadsheet to create a bar-chart showing each of the ten heights, as a visualization of your data. Finally\nAnswer the following questions in your spreadsheet, below the chart:\n\nIs \\(lg(N)\\) or \\(N\\) a better approximation for your measured heights? Why?\nHow much variance is there in the height of these trees? Is this surprising? Why or why not?\nHow many duplicate values were there (on average)? Is this surprising? Why or why not?\nThe “big Oh” notation \\(O(f(n))\\) implies that there are constants \\(a\\) and \\(b\\), such that \\(a \\times f(n) + b\\) describes the reality for which \\(O(f(n))\\) is an approximation. A balanced BST of \\(N\\) items has height \\(O(lg(N))\\). Theoretically, there should be values \\(a\\) and \\(b\\) such that \\(a \\times lg(N) + b\\) describes the actual height of a BST built using random data. Using your experimental results, what is a reasonable value for \\(a\\)?"
  },
  {
    "objectID": "projects/proj99-final.html#submission",
    "href": "projects/proj99-final.html#submission",
    "title": "Project 11: Binary Search Trees",
    "section": "Submission",
    "text": "Submission\n\n\n\n\n\n\nImportant\n\n\n\n👉👉👉 Download/export a PDF version of your chart and store it in your repo for submission. Call the file analysis.pdf.\n\n\nDon’t forget to commit your code to your online repo on github.com so that the grader can grade it."
  },
  {
    "objectID": "projects/proj99-final.html#grading-rubric",
    "href": "projects/proj99-final.html#grading-rubric",
    "title": "Project 11: Binary Search Trees",
    "section": "Grading Rubric",
    "text": "Grading Rubric\nTotal: 24 pts\n\ngetHeight(): 5 pts\nNew tests in tests.cpp for getHeight(): 3 pts\nprogram: 10 pts\nspreadsheet / analysis: 6 pts\n\nWays students have lost points in the past:\n\n-3: Missing chart, spreadsheet\n-6: Missing spreadsheet/analysis\n-3: Missing tests for getHeight()\n-1: Big-Oh of height was wrong.\n-1: Error in getHeight(): a tree with two items could either have a height of 1 or 2"
  },
  {
    "objectID": "projects/proj03.html",
    "href": "projects/proj03.html",
    "title": "Project 03: a High Scores Class",
    "section": "",
    "text": "Created by AI Prompt: create a piece of art that echoes grading inside the classroom"
  },
  {
    "objectID": "projects/proj03.html#introduction",
    "href": "projects/proj03.html#introduction",
    "title": "Project 03: a High Scores Class",
    "section": "Introduction",
    "text": "Introduction\nYou will build a HighScores class that keeps track of the top-10 scores for a game. The class will store the scores from highest-to-lowest, and only store at most 10 scores. It will keep track of how many high scores are being stored. The class must store the scores in an array.\nThe methods that must be defined for the class are: addScore(int score), getScore(i), and getNumScores(), plus, of course, the default constructor."
  },
  {
    "objectID": "projects/proj03.html#step-0.-prepare",
    "href": "projects/proj03.html#step-0.-prepare",
    "title": "Project 03: a High Scores Class",
    "section": "Step 0. Prepare",
    "text": "Step 0. Prepare\n\nClick this link and then “Accept this assignment”.\nWait a few seconds and refresh the page. Refresh until the page says “You’re ready to go!”. The page has a link to a github repo.\nClick the link to see your new repo on github.com.\nClick the green Code button and copy the link it shows.\nIn a terminal,\n\ncd to the directory where you are putting all your CS112 assignments.\ntype git clone &lt;paste-the-contents-of-the-link-you-copied&gt;\n\ncd to the new directory containing your repo.\ntype code . to start up Visual Studio Code in that directory.\nInspect the code you got in the assignment.\nIn the terminal, type make tester\nThe code should compile and give you an executable called tester\nRun the program: type ./tester\nYou should get some basic output – or at least it should not crash."
  },
  {
    "objectID": "projects/proj03.html#step-1.-starting-slow",
    "href": "projects/proj03.html#step-1.-starting-slow",
    "title": "Project 03: a High Scores Class",
    "section": "Step 1. Starting slow…",
    "text": "Step 1. Starting slow…\n\nCreate a TEST_CASE that creates a HighScores object, and a SECTION(\"getNumScores\") that calls getNumScores() on that object, and then REQUIREs that the result is 0. Compile (make tester) and see errors.\nNow, in HighScores.h, create the HighScores class and in the class’s private: section, create an array of size 10 of integers called myScores. And, create a variable called myNumScores that stores how many scores are being stored.\nIn the constructor, initialize both variables. You will have to write a loop to initialize every entry of myScores to 0.\nCreate the getter getNumScores(). Then, compile and run: your test should now pass."
  },
  {
    "objectID": "projects/proj03.html#step-2.-adding-a-first-score",
    "href": "projects/proj03.html#step-2.-adding-a-first-score",
    "title": "Project 03: a High Scores Class",
    "section": "Step 2. Adding a first score",
    "text": "Step 2. Adding a first score\nIn tests.cpp, add another test in a SECTION(\"addScore\") to call addScore(30) and then getNumScores() and REQUIRE that the value is 1. Compile and see the errors. Fix them by doing the following:\n\nCreate the addScore(int aScore) method in the .h and .cpp files (the function returns void).\nImplement it by just adding the score to the array at index myNumScores. Then increment myNumScores.\nNow, your test should pass. (However, if we call addScore() multiple times, the scores may not be sorted properly. But we’ll deal with that later.)"
  },
  {
    "objectID": "projects/proj03.html#step-3.-adding-many-scores",
    "href": "projects/proj03.html#step-3.-adding-many-scores",
    "title": "Project 03: a High Scores Class",
    "section": "Step 3. Adding many scores",
    "text": "Step 3. Adding many scores\nIn tests.cpp, create a loop to add 10 more scores to your HighScores object; thus, there should be 11 calls to addScore() made. Then, REQUIRE that the number of scores being stored is 10 – the maximum the object should store. This test should fail because our code does not check for a full array.\nFix the problem by adding code to make sure you only ever store at most 10 scores. Add the code to addScore(): if the array is full – i.e., myNumScores == 10, just return – do not try to add the new score.\n\n\n\n\n\n\nNote\n\n\n\nThis is not a correct solution, but for the time being, it is good enough.\n\n\nAlso, at this time, implement the method getScore(i). The parameter is an index of the score to return. For example, if the array has the value 42 at index 7 and the code calls getScore(7), the value 42 should be returned. You should write multiple tests to make sure the results you get are correct.\nIf the user passes in an invalid index – i.e., an index that is \\(&gt;= myNumScores\\), throw an invalid_argument exception. (include &lt;stdexcept&gt; and add the using namespace std; stuff). Use REQUIRES_THROWS_AS() to test if the exception is thrown.\n\n\n\n\n\n\nTip\n\n\n\nLook at tests.cpp in lab03 to see an example."
  },
  {
    "objectID": "projects/proj03.html#step-4.-keep-the-scores-sorted",
    "href": "projects/proj03.html#step-4.-keep-the-scores-sorted",
    "title": "Project 03: a High Scores Class",
    "section": "Step 4. Keep the scores sorted",
    "text": "Step 4. Keep the scores sorted\nNow, the fun part: when we insert a score into the array, we don’t want to just add it to the “end” of the array. Instead, we want to keep the array sorted from highest score to lowest. So it should be inserted into the array after all the scores that are higher than it and before all scores that are less than or equal to it. In order to do this, we’ll have to shift over any lower scores before inserting the new score into the array.\nFor example, suppose the array looks like this:\n\n\n\n\n\n\n100\n\n\n95\n\n\n93\n\n\n89\n\n\n87\n\n\n70\n\n\n49\n\n\n22\n\n\n19\n\n\n17\n\n\n\n\n\nand myNumScores = 10.\nIf the main code now calls addScore(77), the array should look like this:\n\n\n\n\n\n\n100\n\n\n95\n\n\n93\n\n\n89\n\n\n87\n\n\n77\n\n\n70\n\n\n49\n\n\n22\n\n\n19\n\n\n\n\n\nNotice that every number \\(&lt;= 77\\) has been shifted up in the array, and the last number has been “lost”. Even though we have called addScore() 11 times, myNumScores is still 10.\nTo implement this, your code has to first iterate through the array and find the location where the new high score should be inserted – in this case, that location is index 5. Then, your code needs to copy values up in the array – starting at index 8, where the value 19 is in the example. You move the value at index 8 to index 9, then the value at index 7 to index 8, etc. Finally, the code needs to insert the new value into the place it should go.\nTo summarize, the algorithm for addScore(score) is:\n\nfind the location to insert the new score – checking if the result is -1. If so, return;\nshift every other value up;\nadd the new score to the array at the found location.\nincrement the number of scores stored – but only if the array was not full before adding the new value.\n\n(When the array was full, then the lowest high score was “lost”.)\nTo implement this, you must create two private methods in the class:\n\n\n\n\n\n\nMethod name\n\n\nparameters\n\n\nreturn type\n\n\n\n\n\n\nfindLocationToInsert()\n\n\nint newScore\n\n\nint: the index of where to insert the newScore, or -1 if the score is not a new high score.\n\n\n\n\nshiftUp()\n\n\nint fromIndex\n\n\nvoid\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIf the new score is lower than all stored high scores, findLocationToInsert should return -1. Your code in addScore() should handle this situation, as shown in the algorithm above.\n\n\n\n\n\n\n\n\nNOTE 1\n\n\n\nAbout findLocationToInsert(): loop from 0 to 9 so that your code can discover if the newScore should go at the end of the array. This will work because we’ve initialized the array to all 0s and we assume all scores are \\(&gt;= 0\\).\n\n\nAdd the prototypes to your .h file and add empty “skeleton” implementations in your .cpp file. Implement the algorithm above in your addScore() method. That implementation should be something like 7 lines of code.\nBefore you implement the code, change your tests in tests.cpp. Your tests will have to assume that when addScore() is called, the value is inserted into the correct place, thus keeping the array sorted. So, some of your tests that assumed a value would always be added at the end will have to be replaced/fixed.\n\n\n\n\n\n\nNOTE 2\n\n\n\nGetting these tests correct is crucial. I added a comment after most of my calls to addScore() to state what the array should be holding at that point. That helped me keep track of how the code should be behaving and what my tests should test for.\n\n\nNow, implement the two private methods. Both must use for loops.\n\n\n\n\n\n\nNOTE 3\n\n\n\nYou might find it really useful to create a function to print out the high scores in the object (check the Pair class example). Then, you can call that function from various places to see what the array really holds.\n\n\nOnce you get things working, take another look at your tests. Do you need to add more tests to cover every situation? If so, add them. You’ll be graded on how good your tests are."
  },
  {
    "objectID": "projects/proj03.html#submission",
    "href": "projects/proj03.html#submission",
    "title": "Project 03: a High Scores Class",
    "section": "Submission",
    "text": "Submission\nTake another look at the Grading Rubric below and make changes to maximize your score.\nCommit and Sync your code to your online repo.\n\n\n\n\n\n\nImportant\n\n\n\nVerify you have synced your code to github by going to your online repo webpage and looking to see that the files are correct.\nAlso, verify that the automated test passes. The test is the same as tests.cpp.\n\n\n\nGrading Rubric\nThis project is worth 22 pts:\n\n15 pts for correctness\n2 pt for perfect indentation and good variable names, function names, and comments (i.e., hospitable code). You should write a comment in your code only when the following block of code is not obvious to the trained reader. You should not write a comment for each line of code. Writing a comment above the non-obvious methods can be very useful.\n5 pts for sufficient test cases to prove that the code is correct.\n\nWays students have lost points in the past:\n\n-3: can’t make tester\n-2: Tests don’t pass\n-22: No submission"
  },
  {
    "objectID": "policies.html",
    "href": "policies.html",
    "title": "Course Policies",
    "section": "",
    "text": "Your grade in this course will be based on:\n\nDaily Quizzes: 5%\n\nThe lowest 3 quizzes will be dropped.\n\nLabs: 20%\nHomework projects: 25%\nTests (5, including the final test during the Exam time): 50%\n\nThe lowest test score will be dropped. Final test has to be taken as it does not count for the lowest score."
  },
  {
    "objectID": "policies.html#grace-days",
    "href": "policies.html#grace-days",
    "title": "Course Policies",
    "section": "Grace Days",
    "text": "Grace Days\nYou have 8 Grace Days available to you during the semester. These grace days may be used to submit an assignment late without penalty. Grace Days Remaining will be seen in the GradeBook in Moodle.\nHere are some circumstances in which you might use grace days:\n\nYou are an athlete and you have a very busy week. Use a few grace days to catch up the next week.\nYou become ill (physically or mentally) and cannot do the work on time.\nYou need to go home for an emergency.\n\nHere is the procedure for using grace days:\n\nDO NOT email me to tell me you are going to use grace days. I don’t need to know this – there is no action I need to take if you tell me this.\nWhen your assignment grade comes back and you have lost points due to lateness, then send an email to ask for the points to be restored and tell me how many grace days you want to use for that."
  },
  {
    "objectID": "policies.html#extenuating-circumstances",
    "href": "policies.html#extenuating-circumstances",
    "title": "Course Policies",
    "section": "Extenuating Circumstances",
    "text": "Extenuating Circumstances\nIf you fall ill (physically or mentally) for an extended period of time, AND you send me documentation from Student Life, Student Health Center, or the Center for Health and Wellness, then, and only then, I will consider allowing you to make up late assignments.\n\n\n\n\n\n\nWarning\n\n\n\nIf you begin to skip class repeatedly due to mental health problems, go to the Center for Health and Wellness! Don’t delay!"
  },
  {
    "objectID": "policies.html#incompletes",
    "href": "policies.html#incompletes",
    "title": "Course Policies",
    "section": "Incompletes",
    "text": "Incompletes\nAn Incomplete (I) grade will be granted only in unusual circumstances, and only if those circumstances have been verified by the Student Life Office. Procrastination does not qualify as an unusual circumstance.\nNo work will be accepted after the last day of classes."
  },
  {
    "objectID": "policies.html#classroom-policy",
    "href": "policies.html#classroom-policy",
    "title": "Course Policies",
    "section": "Classroom Policy",
    "text": "Classroom Policy\n\n\n\n\n\n\nIMPORTANT!\n\n\n\nNo phones, no laptops, unless we tell you you can.\n\n\nThis is a difficult class, and you don’t need to be distracted by goofing around on your phone or laptop. And, I don’t want you to distract others.\nDaily Quizzes will be administered in the first 5 minutes of class, on Moodle. Do not show up late to class."
  },
  {
    "objectID": "policies.html#attendance",
    "href": "policies.html#attendance",
    "title": "Course Policies",
    "section": "Attendance",
    "text": "Attendance\nClass attendance is optional.\nAlso, lab attendance is required! Lab is not optional. Skipping lab may result in you doing poorly in class.\nMissing class due to illness: if you are going to miss class due to (physical or mental) illness, please send me an email before class."
  },
  {
    "objectID": "policies.html#disabilities",
    "href": "policies.html#disabilities",
    "title": "Course Policies",
    "section": "Disabilities",
    "text": "Disabilities\nCalvin University is committed to providing access to all students. If you are a student with a documented disability, please notify a Disability Coordinator in Student Success (located in Hiemenga Hall 227) to discuss necessary accommodations. If you have an accommodation memo, please come talk to me in the first two weeks of class. If you are a student needing reasonable modifications for pregnancy and related conditions, please contact the Title IX Coordinator in Student Life (located in Spoelhof University Center 364)."
  },
  {
    "objectID": "policies.html#statement-of-diversity-and-inclusion",
    "href": "policies.html#statement-of-diversity-and-inclusion",
    "title": "Course Policies",
    "section": "Statement of Diversity and Inclusion",
    "text": "Statement of Diversity and Inclusion\nInside and outside of the classroom, I work to treat every person with equal respect, regardless of racial identity, gender identity, physicality, brain chemistry, nationality, political leanings, and religious background. Whoever you are, you are fearfully and wonderfully made. God delights in diversity and I do, too. We humans need diverse viewpoints because every viewpoint, on its own, has blind spots. That has been proven to be true in technology-related fields, where under-represented minorities are significantly under-represented in the working world. When companies work hard to rectify this, they find their products and services improve. We have found this to be true in Computer Science classrooms as well.\n\n\n\n\n\n\nIMPORTANT!\n\n\n\nIf you or someone else in this class is hurt by something I say or do in class, I would like to know about it so that we can work toward a remedy. This has happened in the past in my classroom – usually when I’m trying to be “cool” or be funny. If this happens this semester, please know that it was unintentional. Because this kind of feedback can be uncomfortable for all involved, I’ll take it however it comes: in public or in private, on the spot or days later, directly from you or indirectly through another student, another professor, or through my department chair Keith VanderLinden (kvlinden@calvin.edu).\n\n\n\n\n\n\n\n\nCallout by Prof. Norman!\n\n\n\nAlso, please note that I am half deaf (at least). I am completely deaf on my left side. This results in my not being able to hear students that speak quietly, and not being able to tell which direction sounds are coming from. Please speak loudly! Thanks."
  },
  {
    "objectID": "slides/lab08-slides.html#dad-joke-of-the-week",
    "href": "slides/lab08-slides.html#dad-joke-of-the-week",
    "title": "Lab 08 — Stacks, Queues and Exceptions",
    "section": "Dad joke of the week",
    "text": "Dad joke of the week\n\n\n\n\n\n\n\n\n\n\nDogs can’t operate MRI machines. But catscan."
  },
  {
    "objectID": "slides/lab08-slides.html#lab-6",
    "href": "slides/lab08-slides.html#lab-6",
    "title": "Lab 08 — Stacks, Queues and Exceptions",
    "section": "Lab 6",
    "text": "Lab 6\n\ncreating methods for class list\npair programming"
  },
  {
    "objectID": "slides/lab03-slides.html#lab-3",
    "href": "slides/lab03-slides.html#lab-3",
    "title": "Lab 03 — Classes",
    "section": "Lab 3",
    "text": "Lab 3\n\ncreating a Student class\npair programming (change your pairs!)"
  },
  {
    "objectID": "slides/lab03-slides.html#dad-joke-of-the-week",
    "href": "slides/lab03-slides.html#dad-joke-of-the-week",
    "title": "Lab 03 — Classes",
    "section": "Dad joke of the week",
    "text": "Dad joke of the week\n\n\nQ: Why did the functions stop calling each other?\nA: Because they had constant arguments."
  },
  {
    "objectID": "slides/lab10-slides.html#dad-joke-of-the-week",
    "href": "slides/lab10-slides.html#dad-joke-of-the-week",
    "title": "Lab 10 — Recursion",
    "section": "Dad joke of the week",
    "text": "Dad joke of the week\n\n\n\n\n\n\n\n\n\n\nPete and Repete are on a boat. Pete falls off. Who’s left on the boat?"
  },
  {
    "objectID": "slides/lab10-slides.html#lab-10",
    "href": "slides/lab10-slides.html#lab-10",
    "title": "Lab 10 — Recursion",
    "section": "Lab 10",
    "text": "Lab 10\n\ncreating recursive functions using ChatGPT\ndiscussing efficiency by calculating the number of times a function is called"
  },
  {
    "objectID": "week07.html",
    "href": "week07.html",
    "title": "Week 07: Final Project and Course Wrap-Up",
    "section": "",
    "text": "By the end of this unit, students will be able to…\n\nDesign and implement a database system from scratch.\nWrite SQL queries to solve real-world data retrieval problems.\nPresent a comprehensive database solution addressing a given scenario.\nCompare different database designs and justify choices.\nDemonstrate proficiency in SQL and database management concepts.\nReflect on the course content and their learning experience.",
    "crumbs": [
      "Content",
      "Week 07: Final Project and Course Wrap-Up"
    ]
  },
  {
    "objectID": "week07.html#slos-for-week-07",
    "href": "week07.html#slos-for-week-07",
    "title": "Week 07: Final Project and Course Wrap-Up",
    "section": "",
    "text": "By the end of this unit, students will be able to…\n\nDesign and implement a database system from scratch.\nWrite SQL queries to solve real-world data retrieval problems.\nPresent a comprehensive database solution addressing a given scenario.\nCompare different database designs and justify choices.\nDemonstrate proficiency in SQL and database management concepts.\nReflect on the course content and their learning experience.",
    "crumbs": [
      "Content",
      "Week 07: Final Project and Course Wrap-Up"
    ]
  },
  {
    "objectID": "week07.html#slides-videos-and-application-exercises",
    "href": "week07.html#slides-videos-and-application-exercises",
    "title": "Week 07: Final Project and Course Wrap-Up",
    "section": "Slides, videos, and application exercises",
    "text": "Slides, videos, and application exercises\n\nWeek 08: Slides\n\nSlides\n\n\nVideo\n\n\nNo readings for Week 08.\n\n\n\n\nLab 08: Timing List and Vector Operations\n\nInstructions\n\n\nSource\n\n\nSlides\n\n\n\n\nProject 8: Conga!\nConga!\n\nInstructions\n\n\nStarter",
    "crumbs": [
      "Content",
      "Week 07: Final Project and Course Wrap-Up"
    ]
  },
  {
    "objectID": "week04.html",
    "href": "week04.html",
    "title": "Week 04: Database Design – ER Modeling & Schema Refinement",
    "section": "",
    "text": "Students will be able to…\n\nDesign ER diagrams to model database structures.\nConvert ER models into relational schemas.\nNormalize database schemas using BCNF and 4NF (briefly).\nIdentify and resolve redundancy issues in schemas.\nDefine and enforce primary and foreign key constraints.\nCreate SQL schemas from conceptual designs.",
    "crumbs": [
      "Content",
      "Week 04: Database Design – ER Modeling & Schema Refinement"
    ]
  },
  {
    "objectID": "week04.html#slos-for-week-04",
    "href": "week04.html#slos-for-week-04",
    "title": "Week 04: Database Design – ER Modeling & Schema Refinement",
    "section": "",
    "text": "Students will be able to…\n\nDesign ER diagrams to model database structures.\nConvert ER models into relational schemas.\nNormalize database schemas using BCNF and 4NF (briefly).\nIdentify and resolve redundancy issues in schemas.\nDefine and enforce primary and foreign key constraints.\nCreate SQL schemas from conceptual designs.",
    "crumbs": [
      "Content",
      "Week 04: Database Design – ER Modeling & Schema Refinement"
    ]
  },
  {
    "objectID": "week04.html#slides-videos-and-application-exercises",
    "href": "week04.html#slides-videos-and-application-exercises",
    "title": "Week 04: Database Design – ER Modeling & Schema Refinement",
    "section": "Slides, videos, and application exercises",
    "text": "Slides, videos, and application exercises\n\nWeek 04: Slides\n\nSlides\n\n\nNo readings for Week 4.\n\n\n\n\nLab 04: Vectors\nVec – A First Dynamic Data Structure\n\nInstructions\n\n\nStarter\n\n\nSlides\n\n\n\n\nProject 04: Vec – A First Dynamic Data Structure\nVec – A First Dynamic Data Structure\n\nInstructions\n\n\nStarter",
    "crumbs": [
      "Content",
      "Week 04: Database Design – ER Modeling & Schema Refinement"
    ]
  },
  {
    "objectID": "week03.html",
    "href": "week03.html",
    "title": "Week 03: SQL – Data Modification & Advanced Queries",
    "section": "",
    "text": "Students will be able to:\n\nInsert new records using the INSERT statement.\nModify existing records using the UPDATE statement.\nDelete records using the DELETE statement.\nManage transactions using COMMIT and ROLLBACK.\nDifferentiate between materialized and non-materialized views.\nCreate and manage indexes to optimize query performance.",
    "crumbs": [
      "Content",
      "Week 03: SQL – Data Modification & Advanced Queries"
    ]
  },
  {
    "objectID": "week03.html#slos-for-week-03",
    "href": "week03.html#slos-for-week-03",
    "title": "Week 03: SQL – Data Modification & Advanced Queries",
    "section": "",
    "text": "Students will be able to:\n\nInsert new records using the INSERT statement.\nModify existing records using the UPDATE statement.\nDelete records using the DELETE statement.\nManage transactions using COMMIT and ROLLBACK.\nDifferentiate between materialized and non-materialized views.\nCreate and manage indexes to optimize query performance.",
    "crumbs": [
      "Content",
      "Week 03: SQL – Data Modification & Advanced Queries"
    ]
  },
  {
    "objectID": "week03.html#slides-videos-and-application-exercises",
    "href": "week03.html#slides-videos-and-application-exercises",
    "title": "Week 03: SQL – Data Modification & Advanced Queries",
    "section": "Slides, videos, and application exercises",
    "text": "Slides, videos, and application exercises\n\nWeek 03: Slides\n\nSlides\n\n\nPair class code\n\n\nNo readings for Week 03.\n\n\n\n\nLab 03: Classes\n\nInstructions\n\n\nStarter\n\n\nSlides\n\n\n\n\nProject 03: Classes\n\nInstructions\n\n\nStarter\n\n\n\nExam 1\nExam on Friday during class. Bring your laptop. Content: Weeks 0 - 2.",
    "crumbs": [
      "Content",
      "Week 03: SQL – Data Modification & Advanced Queries"
    ]
  }
]