---
title: "Week 1 Project: Student Course Registration System"
format: 
  html:
    css: /projects/proj-styles.css
# engine: knitr
eval: false
---

<center>

<figure>

<img src="/images/projects/proj01-studog.gif" alt="Studog." width="500"/>

<figcaption>Studoggy.</figcaption>

</figure>

</center>

This project will introduce you to database creation, table design, and basic SQL queries using SQLite3 and SQLiteStudio. You will create a simple database to store student and course information, learning how to define tables, insert data, and retrieve information using SQL.


## Objectives:

By the end of this project, you will:

✅ Understand how to create and structure a relational database using SQLite3.

✅ Learn to define tables, primary keys, and foreign keys.

✅ Insert data into tables and retrieve information using SELECT queries.

✅ Use basic SQL commands such as CREATE TABLE, INSERT, SELECT, WHERE, and JOIN.

✅ Gain hands-on experience with SQLiteStudio as a database management tool.

## Step 0: Setting Up SQLiteStudio

Before you start, ensure that you have SQLiteStudio installed. Follow these steps:

- Download SQLiteStudio from [sqlitestudio.pl](https://sqlitestudio.pl/){target="_blank"}.
- Install SQLiteStudio on your computer.
- Open SQLiteStudio and click on **Database -> Add a Database**.
- Choose "Create a new SQLite3 database", and name the database **university.db** after clicking in the yellow folder button.
- Click Save and ensure the database appears in the left panel.



## Step 1. Creating Tables

Now, you will define three tables: `students`, `courses`, and `enrollments`.

### Task: Create the students Table

This table stores information about students.

1. Open SQLiteStudio and select **Tools -> Open SQL Editor**.
2. Type the following SQL code:

```sql
CREATE TABLE students (
    student_id INTEGER PRIMARY KEY AUTOINCREMENT,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    birthdate DATE,
    major TEXT
);
```

3. Click **Execute** (the green play button).
4. Verify the table was created by clicking on **Database → Refresh Structure**.


### Task: Create the courses Table

This table stores information about courses offered by the university.

1. In the SQL Editor, enter the following code:

```sql
CREATE TABLE courses (
    course_id INTEGER PRIMARY KEY AUTOINCREMENT,
    course_name TEXT NOT NULL,
    department TEXT NOT NULL
);
```

2. Click Execute and refresh the database structure.

## Task: Create the enrollments Table

This table tracks which students are enrolled in which courses. It includes **foreign keys** linking to both the students and courses tables.

1. Enter the following SQL code:

```sql
CREATE TABLE enrollments (
    enrollment_id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER,
    course_id INTEGER,
    enrollment_date DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (student_id) REFERENCES students(student_id),
    FOREIGN KEY (course_id) REFERENCES courses(course_id)
);
```

2. Click Execute and refresh the database structure.

:::{.callout-important}
✅ Checkpoint: Your database now contains three tables: students, courses, and enrollments.
:::

## Step 2. function practice, 2

Now, make a second function in **utils.h** and **utils.cpp**, `constrain2()`, which is the same as `constrain()`, but has the default value of $0.0$ for the low parameter, and the default of $100.0$ for the high parameter. Uncomment the test case in step2 and then add more `REQUIRE` tests to make sure these default arguments work correctly.

When you have your code completed (and perfectly indented!), compile and run:

``` bash
./tester step2
```

**Commit and Sync** your code to github.

::: callout-note
The autograding tests should now pass "step1" and "step2". (Tests for the other steps will pass, because the test cases are currently empty.)
:::

## Step 3. Compute prime numbers

Write a function prototype `isPrime()` in the **primes.h** file. The function takes an **unsigned integer** and returns a **boolean**.

For the implementation in the .cpp file, `isPrime()` returns **true** if the value is a prime number (and **false** otherwise). Here is the pseudo-code:

```         
A prime number is a number that is evenly divisible by only itself and 1. That is,
  for each integer "divisor" value from 2 through n / 2,
    if you divide the number by that divisor, and the remainder is 0, 
          that number is not prime -- return false.
  if you get through all possible divisors, the number is prime: return true.
```

Note that 1 is not a prime (for some reason). 2 is the first prime. Your code may have to handle this case specially (my code does).

Add code to the "step3" `TEST_CASE` in the **tests.cpp** file to test `isPrime()`.

Make sure you test if 4 is a prime (it isn't). Write other `REQUIRE()` calls to test other values.

When you are satisfied that your code is complete, **Commit and Sync** it to github and check that the "step3" test succeeds.

## Step 4. Collecting prime numbers

In your **primes.h** and **primes.cpp** files, create a function that:

-   is called `findNPrimes()` that returns **void**
-   takes as a parameter an array of **unsigned** called primes
-   takes as a parameter an **unsigned** called size that is the size of the array
-   computes the first size prime numbers, putting them into the array (of course, the code calls `isPrime()` to do the hard work)

::: callout-note
Note that this is a little tricky -- if the size of the array is 100, do you loop up to 1000 to find the first 100 primes? Or 2000? You don't know... So, use a while loop that keeps looping as long as the array is not full.
:::

In **tests.cpp** in the "step4" TEST_CASE, write code to define an array of a certain size, call the function, and then `REQUIRE` that various correct values are in the array at the correct indices. You might find it useful to know that the 100th prime is 541.

When you are satisfied that your code is complete, **Commit and Sync** it to github and check that the "step4" test succeeds.

At this point, all autograding tests should pass. You are done!

::: callout-important
## OPTIONAL:

For fun, create an array of 100000 and fill it with primes. See how long it takes to compute and print out the last prime.

You can get the exact run time by running your project this way:

``` bash
time ./tester "step4"
```
:::

## Grading Rubric

This project is worth 20 pts:

-   3 points for each of steps 1 and 2 (6 pts total)
-   2 pts for correctness
-   1 pt for thorough tests
-   5 points for step 3
-   6 points for step 4
-   3 pts for code beauty and hospitality.

Here are some ways students lost points in the past:

-   -6: Missing step 4
-   -1: poor indentation
-   -1: low and high are supposed to be parameters
-   -3: Missing step 2
-   -1: tests in step1 are insufficient.
-   -1: tests in step2 do not test all cases.